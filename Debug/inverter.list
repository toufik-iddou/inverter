
inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e88  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006010  08006010  00007010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006200  08006200  00008024  2**0
                  CONTENTS
  4 .ARM          00000008  08006200  08006200  00007200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006208  08006208  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006208  08006208  00007208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800620c  0800620c  0000720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006210  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008024  2**0
                  CONTENTS
 10 .bss          000002fc  20000024  20000024  00008024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000320  20000320  00008024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2fc  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f55  00000000  00000000  00017350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  0001a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b64  00000000  00000000  0001b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024981  00000000  00000000  0001bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a6d  00000000  00000000  0004069d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd09f  00000000  00000000  0005610a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001331a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f38  00000000  00000000  001331ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  00137124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ff8 	.word	0x08005ff8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08005ff8 	.word	0x08005ff8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <ADC_Init>:
ADC_HandleTypeDef hadc1;

static void ADC1_Init(void);


void ADC_Init(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	ADC1_Init();
 8000e58:	f000 f810 	bl	8000e7c <ADC1_Init>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <ADC_Start>:
void ADC_Start(void){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) buffer_adc, ADC_CHANNELS_LENGHT);
 8000e64:	2203      	movs	r2, #3
 8000e66:	4903      	ldr	r1, [pc, #12]	@ (8000e74 <ADC_Start+0x14>)
 8000e68:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <ADC_Start+0x18>)
 8000e6a:	f000 ffa9 	bl	8001dc0 <HAL_ADC_Start_DMA>

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000040 	.word	0x20000040
 8000e78:	20000048 	.word	0x20000048

08000e7c <ADC1_Init>:


static void ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8000e8e:	4b30      	ldr	r3, [pc, #192]	@ (8000f50 <ADC1_Init+0xd4>)
 8000e90:	4a30      	ldr	r2, [pc, #192]	@ (8000f54 <ADC1_Init+0xd8>)
 8000e92:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e94:	4b2e      	ldr	r3, [pc, #184]	@ (8000f50 <ADC1_Init+0xd4>)
 8000e96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e9a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f50 <ADC1_Init+0xd4>)
 8000e9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ea2:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f50 <ADC1_Init+0xd4>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eaa:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <ADC1_Init+0xd4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <ADC1_Init+0xd4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb8:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <ADC1_Init+0xd4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b24      	ldr	r3, [pc, #144]	@ (8000f50 <ADC1_Init+0xd4>)
 8000ec0:	4a25      	ldr	r2, [pc, #148]	@ (8000f58 <ADC1_Init+0xdc>)
 8000ec2:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	@ (8000f50 <ADC1_Init+0xd4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 3;
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <ADC1_Init+0xd4>)
 8000ecc:	2203      	movs	r2, #3
 8000ece:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <ADC1_Init+0xd4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <ADC1_Init+0xd4>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ede:	481c      	ldr	r0, [pc, #112]	@ (8000f50 <ADC1_Init+0xd4>)
 8000ee0:	f000 ff2a 	bl	8001d38 <HAL_ADC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <ADC1_Init+0x72>
	  {
	    Error_Handler();
 8000eea:	f000 fe83 	bl	8001bf4 <Error_Handler>
	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4619      	mov	r1, r3
 8000efe:	4814      	ldr	r0, [pc, #80]	@ (8000f50 <ADC1_Init+0xd4>)
 8000f00:	f001 f882 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <ADC1_Init+0x92>
	  {
	    Error_Handler();
 8000f0a:	f000 fe73 	bl	8001bf4 <Error_Handler>
	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480d      	ldr	r0, [pc, #52]	@ (8000f50 <ADC1_Init+0xd4>)
 8000f1c:	f001 f874 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <ADC1_Init+0xae>
	  {
	    Error_Handler();
 8000f26:	f000 fe65 	bl	8001bf4 <Error_Handler>
	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 3;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <ADC1_Init+0xd4>)
 8000f38:	f001 f866 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <ADC1_Init+0xca>
	  {
	    Error_Handler();
 8000f42:	f000 fe57 	bl	8001bf4 <Error_Handler>
	  }

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000048 	.word	0x20000048
 8000f54:	40012000 	.word	0x40012000
 8000f58:	0f000001 	.word	0x0f000001

08000f5c <System_Clock_Init>:
RTC_HandleTypeDef hrtc;



void System_Clock_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	@ 0x50
 8000f60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	@ 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 ffe6 	bl	8004f3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b29      	ldr	r3, [pc, #164]	@ (800102c <System_Clock_Init+0xd0>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	4a28      	ldr	r2, [pc, #160]	@ (800102c <System_Clock_Init+0xd0>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f90:	4b26      	ldr	r3, [pc, #152]	@ (800102c <System_Clock_Init+0xd0>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <System_Clock_Init+0xd4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <System_Clock_Init+0xd4>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <System_Clock_Init+0xd4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000fd4:	23a8      	movs	r3, #168	@ 0xa8
 8000fd6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 f97b 	bl	80032e0 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <System_Clock_Init+0x98>
	{
	Error_Handler();
 8000ff0:	f000 fe00 	bl	8001bf4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001000:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001004:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001006:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2105      	movs	r1, #5
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fbdc 	bl	80037d0 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <System_Clock_Init+0xc6>
	{
	Error_Handler();
 800101e:	f000 fde9 	bl	8001bf4 <Error_Handler>
	}
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	@ 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <Real_Time_Clock_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void Real_Time_Clock_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

	   /** Initialize RTC Only
	   */
	   hrtc.Instance = RTC;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <Real_Time_Clock_Init+0x44>)
 800103a:	4a10      	ldr	r2, [pc, #64]	@ (800107c <Real_Time_Clock_Init+0x48>)
 800103c:	601a      	str	r2, [r3, #0]
	   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <Real_Time_Clock_Init+0x44>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
	   hrtc.Init.AsynchPrediv = 127;
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <Real_Time_Clock_Init+0x44>)
 8001046:	227f      	movs	r2, #127	@ 0x7f
 8001048:	609a      	str	r2, [r3, #8]
	   hrtc.Init.SynchPrediv = 255;
 800104a:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <Real_Time_Clock_Init+0x44>)
 800104c:	22ff      	movs	r2, #255	@ 0xff
 800104e:	60da      	str	r2, [r3, #12]
	   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <Real_Time_Clock_Init+0x44>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
	   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <Real_Time_Clock_Init+0x44>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
	   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <Real_Time_Clock_Init+0x44>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
	   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <Real_Time_Clock_Init+0x44>)
 8001064:	f002 fe82 	bl	8003d6c <HAL_RTC_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <Real_Time_Clock_Init+0x3e>
	   {
	     Error_Handler();
 800106e:	f000 fdc1 	bl	8001bf4 <Error_Handler>
	   }



}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000090 	.word	0x20000090
 800107c:	40002800 	.word	0x40002800

08001080 <System_Init>:
 */


#include"config/config.h"

void System_Init(void){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
HAL_Init();
 8001084:	f000 fde6 	bl	8001c54 <HAL_Init>
System_Clock_Init();
 8001088:	f7ff ff68 	bl	8000f5c <System_Clock_Init>
GPIO_Init();
 800108c:	f000 f85c 	bl	8001148 <GPIO_Init>
DMA_Init();
 8001090:	f000 f83a 	bl	8001108 <DMA_Init>
Real_Time_Clock_Init();
 8001094:	f7ff ffce 	bl	8001034 <Real_Time_Clock_Init>
TIM_Init();
 8001098:	f000 f8c2 	bl	8001220 <TIM_Init>
ADC_Init();
 800109c:	f7ff feda 	bl	8000e54 <ADC_Init>
DAC_Init();
 80010a0:	f000 f802 	bl	80010a8 <DAC_Init>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <DAC_Init>:
static void DAC_Out_Init(void);
uint16_t vlotage_val = 0;
DAC_HandleTypeDef hdac;


void DAC_Init(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	DAC_Out_Init();
 80010ac:	f000 f802 	bl	80010b4 <DAC_Out_Init>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DAC_Out_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void DAC_Out_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <DAC_Out_Init+0x4c>)
 80010c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <DAC_Out_Init+0x50>)
 80010c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010c8:	480d      	ldr	r0, [pc, #52]	@ (8001100 <DAC_Out_Init+0x4c>)
 80010ca:	f001 fb4e 	bl	800276a <HAL_DAC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <DAC_Out_Init+0x24>
  {
    Error_Handler();
 80010d4:	f000 fd8e 	bl	8001bf4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	2210      	movs	r2, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	@ (8001100 <DAC_Out_Init+0x4c>)
 80010e8:	f001 fb61 	bl	80027ae <HAL_DAC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <DAC_Out_Init+0x42>
  {
    Error_Handler();
 80010f2:	f000 fd7f 	bl	8001bf4 <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000b0 	.word	0x200000b0
 8001104:	40007400 	.word	0x40007400

08001108 <DMA_Init>:
#include "config/dma_config.h"

DMA_HandleTypeDef hdma_adc1;

void DMA_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <DMA_Init+0x3c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <DMA_Init+0x3c>)
 8001118:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <DMA_Init+0x3c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA2_Stream0_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	2038      	movs	r0, #56	@ 0x38
 8001130:	f001 fae5 	bl	80026fe <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001134:	2038      	movs	r0, #56	@ 0x38
 8001136:	f001 fafe 	bl	8002736 <HAL_NVIC_EnableIRQ>

}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <GPIO_Init>:


#include"config/gpio_config.h"

void GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	@ 0x28
 800114c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b2d      	ldr	r3, [pc, #180]	@ (8001218 <GPIO_Init+0xd0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a2c      	ldr	r2, [pc, #176]	@ (8001218 <GPIO_Init+0xd0>)
 8001168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <GPIO_Init+0xd0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <GPIO_Init+0xd0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a25      	ldr	r2, [pc, #148]	@ (8001218 <GPIO_Init+0xd0>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <GPIO_Init+0xd0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <GPIO_Init+0xd0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <GPIO_Init+0xd0>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <GPIO_Init+0xd0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <GPIO_Init+0xd0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a17      	ldr	r2, [pc, #92]	@ (8001218 <GPIO_Init+0xd0>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <GPIO_Init+0xd0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <GPIO_Init+0xd0>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2108      	movs	r1, #8
 80011ee:	480b      	ldr	r0, [pc, #44]	@ (800121c <GPIO_Init+0xd4>)
 80011f0:	f002 f842 	bl	8003278 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PC3 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011f4:	2308      	movs	r3, #8
 80011f6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4804      	ldr	r0, [pc, #16]	@ (800121c <GPIO_Init+0xd4>)
 800120c:	f001 fe98 	bl	8002f40 <HAL_GPIO_Init>

}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	@ 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40020800 	.word	0x40020800

08001220 <TIM_Init>:

/* Private Functions ----------------------------------------------------------*/
static void TIM1_Init(void);
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void TIM_Init(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	TIM1_Init();
 8001224:	f000 f80c 	bl	8001240 <TIM1_Init>
	TIM1->CCR1=2500;
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <TIM_Init+0x1c>)
 800122a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800122e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2=5000;
 8001230:	4b02      	ldr	r3, [pc, #8]	@ (800123c <TIM_Init+0x1c>)
 8001232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001236:	639a      	str	r2, [r3, #56]	@ 0x38
//	TIM1->CCR3=500;
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40010000 	.word	0x40010000

08001240 <TIM1_Init>:
}



static void TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b096      	sub	sp, #88	@ 0x58
 8001244:	af00      	add	r7, sp, #0
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800125e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2220      	movs	r2, #32
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fe5f 	bl	8004f3c <memset>

	  htim1.Instance = TIM1;
 800127e:	4b4f      	ldr	r3, [pc, #316]	@ (80013bc <TIM1_Init+0x17c>)
 8001280:	4a4f      	ldr	r2, [pc, #316]	@ (80013c0 <TIM1_Init+0x180>)
 8001282:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 0;
 8001284:	4b4d      	ldr	r3, [pc, #308]	@ (80013bc <TIM1_Init+0x17c>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b4c      	ldr	r3, [pc, #304]	@ (80013bc <TIM1_Init+0x17c>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = 8400-1;
 8001290:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <TIM1_Init+0x17c>)
 8001292:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001296:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b48      	ldr	r3, [pc, #288]	@ (80013bc <TIM1_Init+0x17c>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = 0;
 800129e:	4b47      	ldr	r3, [pc, #284]	@ (80013bc <TIM1_Init+0x17c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b45      	ldr	r3, [pc, #276]	@ (80013bc <TIM1_Init+0x17c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012aa:	4844      	ldr	r0, [pc, #272]	@ (80013bc <TIM1_Init+0x17c>)
 80012ac:	f002 fe64 	bl	8003f78 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <TIM1_Init+0x7a>
	  {
	    Error_Handler();
 80012b6:	f000 fc9d 	bl	8001bf4 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012be:	64bb      	str	r3, [r7, #72]	@ 0x48
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012c4:	4619      	mov	r1, r3
 80012c6:	483d      	ldr	r0, [pc, #244]	@ (80013bc <TIM1_Init+0x17c>)
 80012c8:	f003 f966 	bl	8004598 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <TIM1_Init+0x96>
	  {
	    Error_Handler();
 80012d2:	f000 fc8f 	bl	8001bf4 <Error_Handler>
	  }
	  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80012d6:	4839      	ldr	r0, [pc, #228]	@ (80013bc <TIM1_Init+0x17c>)
 80012d8:	f002 fe9d 	bl	8004016 <HAL_TIM_OC_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <TIM1_Init+0xa6>
	  {
	    Error_Handler();
 80012e2:	f000 fc87 	bl	8001bf4 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012e6:	4835      	ldr	r0, [pc, #212]	@ (80013bc <TIM1_Init+0x17c>)
 80012e8:	f002 feee 	bl	80040c8 <HAL_TIM_PWM_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <TIM1_Init+0xb6>
	  {
	    Error_Handler();
 80012f2:	f000 fc7f 	bl	8001bf4 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	643b      	str	r3, [r7, #64]	@ 0x40
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	647b      	str	r3, [r7, #68]	@ 0x44
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001302:	4619      	mov	r1, r3
 8001304:	482d      	ldr	r0, [pc, #180]	@ (80013bc <TIM1_Init+0x17c>)
 8001306:	f003 fd37 	bl	8004d78 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <TIM1_Init+0xd4>
	  {
	    Error_Handler();
 8001310:	f000 fc70 	bl	8001bf4 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
	  sConfigOC.Pulse = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	63bb      	str	r3, [r7, #56]	@ 0x38
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4820      	ldr	r0, [pc, #128]	@ (80013bc <TIM1_Init+0x17c>)
 800133a:	f003 f80f 	bl	800435c <HAL_TIM_OC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <TIM1_Init+0x108>
	  {
	    Error_Handler();
 8001344:	f000 fc56 	bl	8001bf4 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001348:	2360      	movs	r3, #96	@ 0x60
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800134c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001350:	2204      	movs	r2, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4819      	ldr	r0, [pc, #100]	@ (80013bc <TIM1_Init+0x17c>)
 8001356:	f003 f85d 	bl	8004414 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <TIM1_Init+0x124>
	  {
	    Error_Handler();
 8001360:	f000 fc48 	bl	8001bf4 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001368:	2208      	movs	r2, #8
 800136a:	4619      	mov	r1, r3
 800136c:	4813      	ldr	r0, [pc, #76]	@ (80013bc <TIM1_Init+0x17c>)
 800136e:	f003 f851 	bl	8004414 <HAL_TIM_PWM_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <TIM1_Init+0x13c>
	  {
	    Error_Handler();
 8001378:	f000 fc3c 	bl	8001bf4 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.DeadTime = 51;
 8001388:	2333      	movs	r3, #51	@ 0x33
 800138a:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001390:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001394:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4807      	ldr	r0, [pc, #28]	@ (80013bc <TIM1_Init+0x17c>)
 80013a0:	f003 fd66 	bl	8004e70 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <TIM1_Init+0x16e>
	  {
	    Error_Handler();
 80013aa:	f000 fc23 	bl	8001bf4 <Error_Handler>
	  }
	  HAL_TIM_MspPostInit(&htim1);
 80013ae:	4803      	ldr	r0, [pc, #12]	@ (80013bc <TIM1_Init+0x17c>)
 80013b0:	f000 fa40 	bl	8001834 <HAL_TIM_MspPostInit>
}
 80013b4:	bf00      	nop
 80013b6:	3758      	adds	r7, #88	@ 0x58
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000124 	.word	0x20000124
 80013c0:	40010000 	.word	0x40010000
 80013c4:	00000000 	.word	0x00000000

080013c8 <init_sin_V_ref>:
/*
 * code begin
 */

#ifdef DEVELOPMENT_MODE
static void init_sin_V_ref(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 	for ( int i=0;i<=N_ECH/4;i++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e032      	b.n	800143a <init_sin_V_ref+0x72>
 		sin_V_ref[i]=(V_REF_MAX*sin(i*2*PI/(N_ECH)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f847 	bl	800046c <__aeabi_i2d>
 80013de:	a320      	add	r3, pc, #128	@ (adr r3, 8001460 <init_sin_V_ref+0x98>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f8ac 	bl	8000540 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <init_sin_V_ref+0x90>)
 80013f6:	f7ff f9cd 	bl	8000794 <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	ec43 2b17 	vmov	d7, r2, r3
 8001402:	eeb0 0a47 	vmov.f32	s0, s14
 8001406:	eef0 0a67 	vmov.f32	s1, s15
 800140a:	f003 fdc5 	bl	8004f98 <sin>
 800140e:	ec51 0b10 	vmov	r0, r1, d0
 8001412:	a30f      	add	r3, pc, #60	@ (adr r3, 8001450 <init_sin_V_ref+0x88>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff f892 	bl	8000540 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb4e 	bl	8000ac4 <__aeabi_d2f>
 8001428:	4602      	mov	r2, r0
 800142a:	490c      	ldr	r1, [pc, #48]	@ (800145c <init_sin_V_ref+0x94>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	601a      	str	r2, [r3, #0]
 	for ( int i=0;i<=N_ECH/4;i++){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3301      	adds	r3, #1
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b64      	cmp	r3, #100	@ 0x64
 800143e:	ddc9      	ble.n	80013d4 <init_sin_V_ref+0xc>

 	}
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	89374bc6 	.word	0x89374bc6
 8001454:	40745441 	.word	0x40745441
 8001458:	40790000 	.word	0x40790000
 800145c:	2000016c 	.word	0x2000016c
 8001460:	2e48e8a7 	.word	0x2e48e8a7
 8001464:	400921ff 	.word	0x400921ff

08001468 <init_pid_controller>:
#endif

void init_pid_controller(){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

#ifdef DEVELOPMENT_MODE
	init_sin_V_ref();
 800146c:	f7ff ffac 	bl	80013c8 <init_sin_V_ref>
#endif

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <EnableTiming>:
uint32_t cycles=0;
float time=0;


void EnableTiming(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 8001478:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <EnableTiming+0x60>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <EnableTiming+0x26>
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <EnableTiming+0x64>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <EnableTiming+0x26>
    Debug_ITMDebug = 1;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <EnableTiming+0x68>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

  *SCB_DEMCR |= 0x01000000;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <EnableTiming+0x6c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <EnableTiming+0x6c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80014a8:	601a      	str	r2, [r3, #0]
  *DWT_LAR = 0xC5ACCE55; // enable access
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <EnableTiming+0x70>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a0e      	ldr	r2, [pc, #56]	@ (80014e8 <EnableTiming+0x74>)
 80014b0:	601a      	str	r2, [r3, #0]
  *DWT_CYCCNT = 0; // reset the counter
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <EnableTiming+0x78>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <EnableTiming+0x7c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <EnableTiming+0x7c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	2000000c 	.word	0x2000000c
 80014d8:	20000014 	.word	0x20000014
 80014dc:	20000300 	.word	0x20000300
 80014e0:	20000010 	.word	0x20000010
 80014e4:	20000008 	.word	0x20000008
 80014e8:	c5acce55 	.word	0xc5acce55
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000004 	.word	0x20000004

080014f4 <set_start_adc>:


/* USER CODE BEGIN PFP */
int i =0;
bool start_adc = false;
void set_start_adc (bool adc){
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	start_adc=adc;
 80014fe:	4a04      	ldr	r2, [pc, #16]	@ (8001510 <set_start_adc+0x1c>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	7013      	strb	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	2000030c 	.word	0x2000030c

08001514 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
//	PWM_Generate();
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800151c:	2108      	movs	r1, #8
 800151e:	4803      	ldr	r0, [pc, #12]	@ (800152c <HAL_ADC_ConvCpltCallback+0x18>)
 8001520:	f001 fec3 	bl	80032aa <HAL_GPIO_TogglePin>

}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40020800 	.word	0x40020800

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	ed2d 8b02 	vpush	{d8}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  System_Init();
 800153a:	f7ff fda1 	bl	8001080 <System_Init>
  PWM_Model_Init();
 800153e:	f000 fb53 	bl	8001be8 <PWM_Model_Init>
//  System_Start();
  EnableTiming();
 8001542:	f7ff ff97 	bl	8001474 <EnableTiming>
  int i =0;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  uint32_t start = *DWT_CYCCNT;
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <main+0x78>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 2 */
  PWM_Generate();
 8001552:	f000 fb33 	bl	8001bbc <PWM_Generate>
//  i++;
  uint32_t end = *DWT_CYCCNT;
 8001556:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <main+0x78>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	607b      	str	r3, [r7, #4]
  cycles = end-start;
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4a11      	ldr	r2, [pc, #68]	@ (80015ac <main+0x7c>)
 8001566:	6013      	str	r3, [r2, #0]
  time = (float)cycles*1000000/HAL_RCC_GetSysClockFreq();
 8001568:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <main+0x7c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001574:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80015b0 <main+0x80>
 8001578:	ee27 8a87 	vmul.f32	s16, s15, s14
 800157c:	f002 fa0e 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8001580:	ee07 0a90 	vmov	s15, r0
 8001584:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001588:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800158c:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <main+0x84>)
 800158e:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//i++;
//HAL_Delay(500);
	  if(start_adc){
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <main+0x88>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0fb      	beq.n	8001592 <main+0x62>
		  start_adc=false;
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <main+0x88>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
		  ADC_Start();
 80015a0:	f7ff fc5e 	bl	8000e60 <ADC_Start>
	  if(start_adc){
 80015a4:	e7f5      	b.n	8001592 <main+0x62>
 80015a6:	bf00      	nop
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000304 	.word	0x20000304
 80015b0:	49742400 	.word	0x49742400
 80015b4:	20000308 	.word	0x20000308
 80015b8:	2000030c 	.word	0x2000030c

080015bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <HAL_MspInit+0x4c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a2e      	ldr	r2, [pc, #184]	@ (80016e4 <HAL_ADC_MspInit+0xd8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d156      	bne.n	80016dc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b2d      	ldr	r3, [pc, #180]	@ (80016e8 <HAL_ADC_MspInit+0xdc>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	4a2c      	ldr	r2, [pc, #176]	@ (80016e8 <HAL_ADC_MspInit+0xdc>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163c:	6453      	str	r3, [r2, #68]	@ 0x44
 800163e:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <HAL_ADC_MspInit+0xdc>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b26      	ldr	r3, [pc, #152]	@ (80016e8 <HAL_ADC_MspInit+0xdc>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a25      	ldr	r2, [pc, #148]	@ (80016e8 <HAL_ADC_MspInit+0xdc>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <HAL_ADC_MspInit+0xdc>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001666:	230e      	movs	r3, #14
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166a:	2303      	movs	r3, #3
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	481c      	ldr	r0, [pc, #112]	@ (80016ec <HAL_ADC_MspInit+0xe0>)
 800167a:	f001 fc61 	bl	8002f40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 8001680:	4a1c      	ldr	r2, [pc, #112]	@ (80016f4 <HAL_ADC_MspInit+0xe8>)
 8001682:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001684:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800168a:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001690:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001696:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 8001698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800169c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800169e:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 80016a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016a6:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 80016a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016c0:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 80016c2:	f001 f8cd 	bl	8002860 <HAL_DMA_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80016cc:	f000 fa92 	bl	8001bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 80016d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80016d6:	4a06      	ldr	r2, [pc, #24]	@ (80016f0 <HAL_ADC_MspInit+0xe4>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	@ 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40012000 	.word	0x40012000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	200000c4 	.word	0x200000c4
 80016f4:	40026410 	.word	0x40026410

080016f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a17      	ldr	r2, [pc, #92]	@ (8001774 <HAL_DAC_MspInit+0x7c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d127      	bne.n	800176a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <HAL_DAC_MspInit+0x80>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	4a15      	ldr	r2, [pc, #84]	@ (8001778 <HAL_DAC_MspInit+0x80>)
 8001724:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001728:	6413      	str	r3, [r2, #64]	@ 0x40
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <HAL_DAC_MspInit+0x80>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <HAL_DAC_MspInit+0x80>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <HAL_DAC_MspInit+0x80>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_DAC_MspInit+0x80>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001752:	2320      	movs	r3, #32
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001756:	2303      	movs	r3, #3
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	@ (800177c <HAL_DAC_MspInit+0x84>)
 8001766:	f001 fbeb 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	@ 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40007400 	.word	0x40007400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000

08001780 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a0c      	ldr	r2, [pc, #48]	@ (80017cc <HAL_RTC_MspInit+0x4c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d111      	bne.n	80017c4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017a0:	2302      	movs	r3, #2
 80017a2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017a8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 f9fa 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80017ba:	f000 fa1b 	bl	8001bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <HAL_RTC_MspInit+0x50>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40002800 	.word	0x40002800
 80017d0:	42470e3c 	.word	0x42470e3c

080017d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a12      	ldr	r2, [pc, #72]	@ (800182c <HAL_TIM_Base_MspInit+0x58>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d11d      	bne.n	8001822 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_TIM_Base_MspInit+0x5c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a10      	ldr	r2, [pc, #64]	@ (8001830 <HAL_TIM_Base_MspInit+0x5c>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <HAL_TIM_Base_MspInit+0x5c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2019      	movs	r0, #25
 8001808:	f000 ff79 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800180c:	2019      	movs	r0, #25
 800180e:	f000 ff92 	bl	8002736 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	201b      	movs	r0, #27
 8001818:	f000 ff71 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800181c:	201b      	movs	r0, #27
 800181e:	f000 ff8a 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40010000 	.word	0x40010000
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	@ 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a21      	ldr	r2, [pc, #132]	@ (80018d8 <HAL_TIM_MspPostInit+0xa4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d13c      	bne.n	80018d0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_TIM_MspPostInit+0xa8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a1f      	ldr	r2, [pc, #124]	@ (80018dc <HAL_TIM_MspPostInit+0xa8>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <HAL_TIM_MspPostInit+0xa8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_TIM_MspPostInit+0xa8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a18      	ldr	r2, [pc, #96]	@ (80018dc <HAL_TIM_MspPostInit+0xa8>)
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <HAL_TIM_MspPostInit+0xa8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800188e:	2303      	movs	r3, #3
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800189e:	2301      	movs	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <HAL_TIM_MspPostInit+0xac>)
 80018aa:	f001 fb49 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80018ae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <HAL_TIM_MspPostInit+0xb0>)
 80018cc:	f001 fb38 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	@ 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40010000 	.word	0x40010000
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40021000 	.word	0x40021000

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <NMI_Handler+0x4>

080018f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <MemManage_Handler+0x4>

08001900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <UsageFault_Handler+0x4>

08001910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193e:	f000 f9db 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
//	TIM1->CCR1 = (uint16_t)pwm/2;
//	pwm=TIM1->CCR2;


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800194e:	f002 fc14 	bl	800417a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000124 	.word	0x20000124

0800195c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8001960:	2201      	movs	r2, #1
 8001962:	2108      	movs	r1, #8
 8001964:	4805      	ldr	r0, [pc, #20]	@ (800197c <TIM1_CC_IRQHandler+0x20>)
 8001966:	f001 fc87 	bl	8003278 <HAL_GPIO_WritePin>
	set_start_adc (true);
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff fdc2 	bl	80014f4 <set_start_adc>


  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001970:	4803      	ldr	r0, [pc, #12]	@ (8001980 <TIM1_CC_IRQHandler+0x24>)
 8001972:	f002 fc02 	bl	800417a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40020800 	.word	0x40020800
 8001980:	20000124 	.word	0x20000124

08001984 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <DMA2_Stream0_IRQHandler+0x10>)
 800198a:	f001 f86f 	bl	8002a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200000c4 	.word	0x200000c4

08001998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <SystemInit+0x20>)
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a2:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <SystemInit+0x20>)
 80019a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <Start_Data_Conversion>:
 *
*/



Acquisition_Data Start_Data_Conversion(void){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08e      	sub	sp, #56	@ 0x38
 80019c0:	af00      	add	r7, sp, #0
	Acquisition_Data data;
	float If_input_voltage =Input_Voltage(If_CHANNEL);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f8c4 	bl	8001b50 <Input_Voltage>
 80019c8:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	float Io_input_voltage =Input_Voltage(Io_CHANNEL);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f000 f8bf 	bl	8001b50 <Input_Voltage>
 80019d2:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	float Vo_input_voltage =Input_Voltage(Vo_CHANNEL);
 80019d6:	2002      	movs	r0, #2
 80019d8:	f000 f8ba 	bl	8001b50 <Input_Voltage>
 80019dc:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	data.If=Calculate_If(If_input_voltage);
 80019e0:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80019e4:	f000 f830 	bl	8001a48 <Calculate_If>
 80019e8:	eef0 7a40 	vmov.f32	s15, s0
 80019ec:	edc7 7a05 	vstr	s15, [r7, #20]
	data.Io=Calculate_Io(Io_input_voltage);
 80019f0:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 80019f4:	f000 f854 	bl	8001aa0 <Calculate_Io>
 80019f8:	eef0 7a40 	vmov.f32	s15, s0
 80019fc:	edc7 7a06 	vstr	s15, [r7, #24]
	data.Vo=Calculate_Vo(Vo_input_voltage);
 8001a00:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001a04:	f000 f878 	bl	8001af8 <Calculate_Vo>
 8001a08:	eef0 7a40 	vmov.f32	s15, s0
 8001a0c:	edc7 7a07 	vstr	s15, [r7, #28]
//	data.If=(If_input_voltage);
//	data.Io=(Io_input_voltage);
//	data.Vo=(Vo_input_voltage);
	return data;
 8001a10:	f107 0320 	add.w	r3, r7, #32
 8001a14:	f107 0214 	add.w	r2, r7, #20
 8001a18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a1e:	6a39      	ldr	r1, [r7, #32]
 8001a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a24:	ee06 1a90 	vmov	s13, r1
 8001a28:	ee07 2a10 	vmov	s14, r2
 8001a2c:	ee07 3a90 	vmov	s15, r3
}
 8001a30:	eeb0 0a66 	vmov.f32	s0, s13
 8001a34:	eef0 0a47 	vmov.f32	s1, s14
 8001a38:	eeb0 1a67 	vmov.f32	s2, s15
 8001a3c:	3738      	adds	r7, #56	@ 0x38
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	0000      	movs	r0, r0
 8001a44:	0000      	movs	r0, r0
	...

08001a48 <Calculate_If>:



static float Calculate_If(float input_voltage){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	ed87 0a01 	vstr	s0, [r7, #4]
	return  24.606*input_voltage - 61.613;
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7fe fd1c 	bl	8000490 <__aeabi_f2d>
 8001a58:	a30d      	add	r3, pc, #52	@ (adr r3, 8001a90 <Calculate_If+0x48>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fd6f 	bl	8000540 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001a98 <Calculate_If+0x50>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fbae 	bl	80001d0 <__aeabi_dsub>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f7ff f822 	bl	8000ac4 <__aeabi_d2f>
 8001a80:	4603      	mov	r3, r0
 8001a82:	ee07 3a90 	vmov	s15, r3
;
}
 8001a86:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	d0e56042 	.word	0xd0e56042
 8001a94:	40389b22 	.word	0x40389b22
 8001a98:	c8b43958 	.word	0xc8b43958
 8001a9c:	404ece76 	.word	0x404ece76

08001aa0 <Calculate_Io>:

static float Calculate_Io(float input_voltage){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	ed87 0a01 	vstr	s0, [r7, #4]
	return  24.606*input_voltage - 61.613;
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fcf0 	bl	8000490 <__aeabi_f2d>
 8001ab0:	a30d      	add	r3, pc, #52	@ (adr r3, 8001ae8 <Calculate_Io+0x48>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7fe fd43 	bl	8000540 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	a30b      	add	r3, pc, #44	@ (adr r3, 8001af0 <Calculate_Io+0x50>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fb82 	bl	80001d0 <__aeabi_dsub>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7fe fff6 	bl	8000ac4 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	ee07 3a90 	vmov	s15, r3
}
 8001ade:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	d0e56042 	.word	0xd0e56042
 8001aec:	40389b22 	.word	0x40389b22
 8001af0:	c8b43958 	.word	0xc8b43958
 8001af4:	404ece76 	.word	0x404ece76

08001af8 <Calculate_Vo>:

static float Calculate_Vo(float input_voltage){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	ed87 0a01 	vstr	s0, [r7, #4]
	return 514.98*input_voltage - 647.08;
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe fcc4 	bl	8000490 <__aeabi_f2d>
 8001b08:	a30d      	add	r3, pc, #52	@ (adr r3, 8001b40 <Calculate_Vo+0x48>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	f7fe fd17 	bl	8000540 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001b48 <Calculate_Vo+0x50>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fb56 	bl	80001d0 <__aeabi_dsub>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7fe ffca 	bl	8000ac4 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	ee07 3a90 	vmov	s15, r3
}
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	0a3d70a4 	.word	0x0a3d70a4
 8001b44:	408017d7 	.word	0x408017d7
 8001b48:	d70a3d71 	.word	0xd70a3d71
 8001b4c:	408438a3 	.word	0x408438a3

08001b50 <Input_Voltage>:


static float Input_Voltage(enum ADC_CHANNELS_ENUM ADC_CHANNEL){
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
	uint16_t resolution=1023;
 8001b5a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001b5e:	81fb      	strh	r3, [r7, #14]
	return buffer_adc[ADC_CHANNEL]*3.3/resolution;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a15      	ldr	r2, [pc, #84]	@ (8001bb8 <Input_Voltage+0x68>)
 8001b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fc7f 	bl	800046c <__aeabi_i2d>
 8001b6e:	a310      	add	r3, pc, #64	@ (adr r3, 8001bb0 <Input_Voltage+0x60>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fce4 	bl	8000540 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4614      	mov	r4, r2
 8001b7e:	461d      	mov	r5, r3
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fc72 	bl	800046c <__aeabi_i2d>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	4629      	mov	r1, r5
 8001b90:	f7fe fe00 	bl	8000794 <__aeabi_ddiv>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7fe ff92 	bl	8000ac4 <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	ee07 3a90 	vmov	s15, r3

}
 8001ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb0:	66666666 	.word	0x66666666
 8001bb4:	400a6666 	.word	0x400a6666
 8001bb8:	20000040 	.word	0x20000040

08001bbc <PWM_Generate>:
float duty = 0;
Acquisition_Data data;
static float calculate_Duty_Cycle(float V_ref);
static void PWM_Genearte_GPIO(float duty_cycle);

void PWM_Generate(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	data = Start_Data_Conversion();
 8001bc0:	f7ff fefc 	bl	80019bc <Start_Data_Conversion>
 8001bc4:	eef0 6a40 	vmov.f32	s13, s0
 8001bc8:	eeb0 7a60 	vmov.f32	s14, s1
 8001bcc:	eef0 7a41 	vmov.f32	s15, s2
 8001bd0:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <PWM_Generate+0x28>)
 8001bd2:	edc3 6a00 	vstr	s13, [r3]
 8001bd6:	ed83 7a01 	vstr	s14, [r3, #4]
 8001bda:	edc3 7a02 	vstr	s15, [r3, #8]
//	float V_ref = calculate_PID_V_ref(data.If,data.Io,data.Vo);
//	float duty_cycle = calculate_Duty_Cycle(V_ref);
//	PWM_Genearte_GPIO(duty_cycle);
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000310 	.word	0x20000310

08001be8 <PWM_Model_Init>:

void PWM_Model_Init(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	init_pid_controller();
 8001bec:	f7ff fc3c 	bl	8001468 <init_pid_controller>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <Error_Handler>:
 */
#include "utils/error_handler.h"
#include "stm32f4xx_hal.h"

void Error_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf8:	b672      	cpsid	i
}
 8001bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <Error_Handler+0x8>

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c04:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c06:	490e      	ldr	r1, [pc, #56]	@ (8001c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c08:	4a0e      	ldr	r2, [pc, #56]	@ (8001c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c1c:	4c0b      	ldr	r4, [pc, #44]	@ (8001c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c2a:	f7ff feb5 	bl	8001998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f003 f98d 	bl	8004f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7ff fc7d 	bl	8001530 <main>
  bx  lr    
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001c44:	08006210 	.word	0x08006210
  ldr r2, =_sbss
 8001c48:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001c4c:	20000320 	.word	0x20000320

08001c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <HAL_Init+0x40>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <HAL_Init+0x40>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <HAL_Init+0x40>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 fd33 	bl	80026e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	200f      	movs	r0, #15
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fc98 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fd4b 	bl	8002752 <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f000 fd13 	bl	80026fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	@ (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000018 	.word	0x20000018
 8001cf0:	20000020 	.word	0x20000020
 8001cf4:	2000001c 	.word	0x2000001c

08001cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_IncTick+0x20>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_IncTick+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <HAL_IncTick+0x24>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000020 	.word	0x20000020
 8001d1c:	2000031c 	.word	0x2000031c

08001d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <HAL_GetTick+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	2000031c 	.word	0x2000031c

08001d38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e033      	b.n	8001db6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d109      	bne.n	8001d6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fc58 	bl	800160c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d118      	bne.n	8001da8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d7e:	f023 0302 	bic.w	r3, r3, #2
 8001d82:	f043 0202 	orr.w	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa5e 	bl	800224c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f023 0303 	bic.w	r3, r3, #3
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001da6:	e001      	b.n	8001dac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_Start_DMA+0x1e>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e0e9      	b.n	8001fb2 <HAL_ADC_Start_DMA+0x1f2>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d018      	beq.n	8001e26 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e04:	4b6d      	ldr	r3, [pc, #436]	@ (8001fbc <HAL_ADC_Start_DMA+0x1fc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6d      	ldr	r2, [pc, #436]	@ (8001fc0 <HAL_ADC_Start_DMA+0x200>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0c9a      	lsrs	r2, r3, #18
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e34:	d107      	bne.n	8001e46 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e44:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	f040 80a1 	bne.w	8001f98 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e94:	d106      	bne.n	8001ea4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f023 0206 	bic.w	r2, r3, #6
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ea2:	e002      	b.n	8001eaa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb2:	4b44      	ldr	r3, [pc, #272]	@ (8001fc4 <HAL_ADC_Start_DMA+0x204>)
 8001eb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eba:	4a43      	ldr	r2, [pc, #268]	@ (8001fc8 <HAL_ADC_Start_DMA+0x208>)
 8001ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec2:	4a42      	ldr	r2, [pc, #264]	@ (8001fcc <HAL_ADC_Start_DMA+0x20c>)
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eca:	4a41      	ldr	r2, [pc, #260]	@ (8001fd0 <HAL_ADC_Start_DMA+0x210>)
 8001ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001ee6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ef6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	334c      	adds	r3, #76	@ 0x4c
 8001f02:	4619      	mov	r1, r3
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f000 fd58 	bl	80029bc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d12a      	bne.n	8001f6e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd4 <HAL_ADC_Start_DMA+0x214>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d015      	beq.n	8001f4e <HAL_ADC_Start_DMA+0x18e>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd8 <HAL_ADC_Start_DMA+0x218>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d105      	bne.n	8001f38 <HAL_ADC_Start_DMA+0x178>
 8001f2c:	4b25      	ldr	r3, [pc, #148]	@ (8001fc4 <HAL_ADC_Start_DMA+0x204>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a27      	ldr	r2, [pc, #156]	@ (8001fdc <HAL_ADC_Start_DMA+0x21c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d136      	bne.n	8001fb0 <HAL_ADC_Start_DMA+0x1f0>
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <HAL_ADC_Start_DMA+0x204>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d130      	bne.n	8001fb0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d129      	bne.n	8001fb0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e020      	b.n	8001fb0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a18      	ldr	r2, [pc, #96]	@ (8001fd4 <HAL_ADC_Start_DMA+0x214>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d11b      	bne.n	8001fb0 <HAL_ADC_Start_DMA+0x1f0>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d114      	bne.n	8001fb0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	e00b      	b.n	8001fb0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f043 0210 	orr.w	r2, r3, #16
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000018 	.word	0x20000018
 8001fc0:	431bde83 	.word	0x431bde83
 8001fc4:	40012300 	.word	0x40012300
 8001fc8:	08002445 	.word	0x08002445
 8001fcc:	080024ff 	.word	0x080024ff
 8001fd0:	0800251b 	.word	0x0800251b
 8001fd4:	40012000 	.word	0x40012000
 8001fd8:	40012100 	.word	0x40012100
 8001fdc:	40012200 	.word	0x40012200

08001fe0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x1c>
 8002020:	2302      	movs	r3, #2
 8002022:	e105      	b.n	8002230 <HAL_ADC_ConfigChannel+0x228>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d925      	bls.n	8002080 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68d9      	ldr	r1, [r3, #12]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	3b1e      	subs	r3, #30
 800204a:	2207      	movs	r2, #7
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43da      	mvns	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	400a      	ands	r2, r1
 8002058:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68d9      	ldr	r1, [r3, #12]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	4603      	mov	r3, r0
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4403      	add	r3, r0
 8002072:	3b1e      	subs	r3, #30
 8002074:	409a      	lsls	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	e022      	b.n	80020c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6919      	ldr	r1, [r3, #16]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	2207      	movs	r2, #7
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	400a      	ands	r2, r1
 80020a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6919      	ldr	r1, [r3, #16]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4403      	add	r3, r0
 80020bc:	409a      	lsls	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d824      	bhi.n	8002118 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	3b05      	subs	r3, #5
 80020e0:	221f      	movs	r2, #31
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	400a      	ands	r2, r1
 80020ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	3b05      	subs	r3, #5
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	635a      	str	r2, [r3, #52]	@ 0x34
 8002116:	e04c      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d824      	bhi.n	800216a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3b23      	subs	r3, #35	@ 0x23
 8002132:	221f      	movs	r2, #31
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43da      	mvns	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	400a      	ands	r2, r1
 8002140:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3b23      	subs	r3, #35	@ 0x23
 800215c:	fa00 f203 	lsl.w	r2, r0, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30
 8002168:	e023      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	3b41      	subs	r3, #65	@ 0x41
 800217c:	221f      	movs	r2, #31
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	400a      	ands	r2, r1
 800218a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	4618      	mov	r0, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3b41      	subs	r3, #65	@ 0x41
 80021a6:	fa00 f203 	lsl.w	r2, r0, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021b2:	4b22      	ldr	r3, [pc, #136]	@ (800223c <HAL_ADC_ConfigChannel+0x234>)
 80021b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a21      	ldr	r2, [pc, #132]	@ (8002240 <HAL_ADC_ConfigChannel+0x238>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d109      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1cc>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b12      	cmp	r3, #18
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a19      	ldr	r2, [pc, #100]	@ (8002240 <HAL_ADC_ConfigChannel+0x238>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d123      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x21e>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d003      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x1e6>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b11      	cmp	r3, #17
 80021ec:	d11b      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d111      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002202:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <HAL_ADC_ConfigChannel+0x23c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a10      	ldr	r2, [pc, #64]	@ (8002248 <HAL_ADC_ConfigChannel+0x240>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	0c9a      	lsrs	r2, r3, #18
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002218:	e002      	b.n	8002220 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3b01      	subs	r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f9      	bne.n	800221a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40012300 	.word	0x40012300
 8002240:	40012000 	.word	0x40012000
 8002244:	20000018 	.word	0x20000018
 8002248:	431bde83 	.word	0x431bde83

0800224c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002254:	4b79      	ldr	r3, [pc, #484]	@ (800243c <ADC_Init+0x1f0>)
 8002256:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	431a      	orrs	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	021a      	lsls	r2, r3, #8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	4a58      	ldr	r2, [pc, #352]	@ (8002440 <ADC_Init+0x1f4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d022      	beq.n	800232a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6899      	ldr	r1, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6899      	ldr	r1, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	e00f      	b.n	800234a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002348:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0202 	bic.w	r2, r2, #2
 8002358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6899      	ldr	r1, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7e1b      	ldrb	r3, [r3, #24]
 8002364:	005a      	lsls	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01b      	beq.n	80023b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002386:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002396:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	3b01      	subs	r3, #1
 80023a4:	035a      	lsls	r2, r3, #13
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	e007      	b.n	80023c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023be:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	3b01      	subs	r3, #1
 80023dc:	051a      	lsls	r2, r3, #20
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6899      	ldr	r1, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002402:	025a      	lsls	r2, r3, #9
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800241a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	029a      	lsls	r2, r3, #10
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40012300 	.word	0x40012300
 8002440:	0f000001 	.word	0x0f000001

08002444 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002450:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800245a:	2b00      	cmp	r3, #0
 800245c:	d13c      	bne.n	80024d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d12b      	bne.n	80024d0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800247c:	2b00      	cmp	r3, #0
 800247e:	d127      	bne.n	80024d0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002486:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002498:	2b00      	cmp	r3, #0
 800249a:	d119      	bne.n	80024d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0220 	bic.w	r2, r2, #32
 80024aa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff f81f 	bl	8001514 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024d6:	e00e      	b.n	80024f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff fd85 	bl	8001ff4 <HAL_ADC_ErrorCallback>
}
 80024ea:	e004      	b.n	80024f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f7ff fd67 	bl	8001fe0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002526:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2240      	movs	r2, #64	@ 0x40
 800252c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	f043 0204 	orr.w	r2, r3, #4
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f7ff fd5a 	bl	8001ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002558:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002570:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	@ (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0307 	and.w	r3, r3, #7
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0b      	blt.n	80025d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4907      	ldr	r1, [pc, #28]	@ (80025e4 <__NVIC_EnableIRQ+0x38>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2001      	movs	r0, #1
 80025ce:	fa00 f202 	lsl.w	r2, r0, r2
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db0a      	blt.n	8002612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	490c      	ldr	r1, [pc, #48]	@ (8002634 <__NVIC_SetPriority+0x4c>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002610:	e00a      	b.n	8002628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4908      	ldr	r1, [pc, #32]	@ (8002638 <__NVIC_SetPriority+0x50>)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3b04      	subs	r3, #4
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	440b      	add	r3, r1
 8002626:	761a      	strb	r2, [r3, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000e100 	.word	0xe000e100
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	@ 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	bf28      	it	cs
 800265a:	2304      	movcs	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3304      	adds	r3, #4
 8002662:	2b06      	cmp	r3, #6
 8002664:	d902      	bls.n	800266c <NVIC_EncodePriority+0x30>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b03      	subs	r3, #3
 800266a:	e000      	b.n	800266e <NVIC_EncodePriority+0x32>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	f04f 32ff 	mov.w	r2, #4294967295
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002684:	f04f 31ff 	mov.w	r1, #4294967295
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43d9      	mvns	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	4313      	orrs	r3, r2
         );
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	@ 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b4:	d301      	bcc.n	80026ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00f      	b.n	80026da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <SysTick_Config+0x40>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c2:	210f      	movs	r1, #15
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f7ff ff8e 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <SysTick_Config+0x40>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d2:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <SysTick_Config+0x40>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff29 	bl	8002548 <__NVIC_SetPriorityGrouping>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff3e 	bl	8002590 <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff8e 	bl	800263c <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5d 	bl	80025e8 <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff31 	bl	80025ac <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa2 	bl	80026a4 <SysTick_Config>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e014      	b.n	80027a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	791b      	ldrb	r3, [r3, #4]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7fe ffb3 	bl	80016f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b089      	sub	sp, #36	@ 0x24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_DAC_ConfigChannel+0x1c>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e042      	b.n	8002854 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	795b      	ldrb	r3, [r3, #5]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_DAC_ConfigChannel+0x2c>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e03c      	b.n	8002854 <HAL_DAC_ConfigChannel+0xa6>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2202      	movs	r2, #2
 80027e4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	22c0      	movs	r2, #192	@ 0xc0
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43da      	mvns	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	400a      	ands	r2, r1
 8002844:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002852:	7ffb      	ldrb	r3, [r7, #31]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3724      	adds	r7, #36	@ 0x24
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff fa58 	bl	8001d20 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e099      	b.n	80029b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289c:	e00f      	b.n	80028be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800289e:	f7ff fa3f 	bl	8001d20 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d908      	bls.n	80028be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2203      	movs	r2, #3
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e078      	b.n	80029b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e8      	bne.n	800289e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4b38      	ldr	r3, [pc, #224]	@ (80029b8 <HAL_DMA_Init+0x158>)
 80028d8:	4013      	ands	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	2b04      	cmp	r3, #4
 8002916:	d107      	bne.n	8002928 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	4313      	orrs	r3, r2
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f023 0307 	bic.w	r3, r3, #7
 800293e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	2b04      	cmp	r3, #4
 8002950:	d117      	bne.n	8002982 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fa6f 	bl	8002e48 <DMA_CheckFifoParam>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2240      	movs	r2, #64	@ 0x40
 8002974:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800297e:	2301      	movs	r3, #1
 8002980:	e016      	b.n	80029b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa26 	bl	8002ddc <DMA_CalcBaseAndBitshift>
 8002990:	4603      	mov	r3, r0
 8002992:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	223f      	movs	r2, #63	@ 0x3f
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	f010803f 	.word	0xf010803f

080029bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA_Start_IT+0x26>
 80029de:	2302      	movs	r3, #2
 80029e0:	e040      	b.n	8002a64 <HAL_DMA_Start_IT+0xa8>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d12f      	bne.n	8002a56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f9b8 	bl	8002d80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a14:	223f      	movs	r2, #63	@ 0x3f
 8002a16:	409a      	lsls	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0216 	orr.w	r2, r2, #22
 8002a2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0208 	orr.w	r2, r2, #8
 8002a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	e005      	b.n	8002a62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a78:	4b8e      	ldr	r3, [pc, #568]	@ (8002cb4 <HAL_DMA_IRQHandler+0x248>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a8e      	ldr	r2, [pc, #568]	@ (8002cb8 <HAL_DMA_IRQHandler+0x24c>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0a9b      	lsrs	r3, r3, #10
 8002a84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a96:	2208      	movs	r2, #8
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01a      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0204 	bic.w	r2, r2, #4
 8002abe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002adc:	2201      	movs	r2, #1
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d012      	beq.n	8002b0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	2201      	movs	r2, #1
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b06:	f043 0202 	orr.w	r2, r3, #2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	2204      	movs	r2, #4
 8002b14:	409a      	lsls	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00b      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	2204      	movs	r2, #4
 8002b32:	409a      	lsls	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	f043 0204 	orr.w	r2, r3, #4
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b48:	2210      	movs	r2, #16
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d043      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d03c      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b66:	2210      	movs	r2, #16
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d018      	beq.n	8002bae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d108      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d024      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
 8002b9a:	e01f      	b.n	8002bdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01b      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
 8002bac:	e016      	b.n	8002bdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0208 	bic.w	r2, r2, #8
 8002bca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be0:	2220      	movs	r2, #32
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 808f 	beq.w	8002d0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8087 	beq.w	8002d0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c02:	2220      	movs	r2, #32
 8002c04:	409a      	lsls	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	d136      	bne.n	8002c84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0216 	bic.w	r2, r2, #22
 8002c24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_DMA_IRQHandler+0x1da>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0208 	bic.w	r2, r2, #8
 8002c54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5a:	223f      	movs	r2, #63	@ 0x3f
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d07e      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
        }
        return;
 8002c82:	e079      	b.n	8002d78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01d      	beq.n	8002cce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d031      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
 8002cb0:	e02c      	b.n	8002d0c <HAL_DMA_IRQHandler+0x2a0>
 8002cb2:	bf00      	nop
 8002cb4:	20000018 	.word	0x20000018
 8002cb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d023      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
 8002ccc:	e01e      	b.n	8002d0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10f      	bne.n	8002cfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0210 	bic.w	r2, r2, #16
 8002cea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d032      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d022      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2205      	movs	r2, #5
 8002d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d307      	bcc.n	8002d54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f2      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x2cc>
 8002d52:	e000      	b.n	8002d56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
 8002d76:	e000      	b.n	8002d7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d78:	bf00      	nop
    }
  }
}
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b40      	cmp	r3, #64	@ 0x40
 8002dac:	d108      	bne.n	8002dc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dbe:	e007      	b.n	8002dd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	60da      	str	r2, [r3, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	3b10      	subs	r3, #16
 8002dec:	4a14      	ldr	r2, [pc, #80]	@ (8002e40 <DMA_CalcBaseAndBitshift+0x64>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002df6:	4a13      	ldr	r2, [pc, #76]	@ (8002e44 <DMA_CalcBaseAndBitshift+0x68>)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d909      	bls.n	8002e1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	1d1a      	adds	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e1c:	e007      	b.n	8002e2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	aaaaaaab 	.word	0xaaaaaaab
 8002e44:	08006020 	.word	0x08006020

08002e48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11f      	bne.n	8002ea2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d856      	bhi.n	8002f16 <DMA_CheckFifoParam+0xce>
 8002e68:	a201      	add	r2, pc, #4	@ (adr r2, 8002e70 <DMA_CheckFifoParam+0x28>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002e81 	.word	0x08002e81
 8002e74:	08002e93 	.word	0x08002e93
 8002e78:	08002e81 	.word	0x08002e81
 8002e7c:	08002f17 	.word	0x08002f17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d046      	beq.n	8002f1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e90:	e043      	b.n	8002f1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e9a:	d140      	bne.n	8002f1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e03d      	b.n	8002f1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eaa:	d121      	bne.n	8002ef0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d837      	bhi.n	8002f22 <DMA_CheckFifoParam+0xda>
 8002eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <DMA_CheckFifoParam+0x70>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002ecf 	.word	0x08002ecf
 8002ec0:	08002ec9 	.word	0x08002ec9
 8002ec4:	08002ee1 	.word	0x08002ee1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ecc:	e030      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d025      	beq.n	8002f26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ede:	e022      	b.n	8002f26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ee8:	d11f      	bne.n	8002f2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eee:	e01c      	b.n	8002f2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d903      	bls.n	8002efe <DMA_CheckFifoParam+0xb6>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d003      	beq.n	8002f04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002efc:	e018      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      break;
 8002f02:	e015      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00e      	beq.n	8002f2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e00b      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
      break;
 8002f16:	bf00      	nop
 8002f18:	e00a      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e008      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e006      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;
 8002f22:	bf00      	nop
 8002f24:	e004      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;
 8002f26:	bf00      	nop
 8002f28:	e002      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f2a:	bf00      	nop
 8002f2c:	e000      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e16b      	b.n	8003234 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	f040 815a 	bne.w	800322e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d005      	beq.n	8002f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d130      	bne.n	8002ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc8:	2201      	movs	r2, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 0201 	and.w	r2, r3, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d017      	beq.n	8003030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d123      	bne.n	8003084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	08da      	lsrs	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3208      	adds	r2, #8
 8003044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	08da      	lsrs	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3208      	adds	r2, #8
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0203 	and.w	r2, r3, #3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80b4 	beq.w	800322e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b60      	ldr	r3, [pc, #384]	@ (800324c <HAL_GPIO_Init+0x30c>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	4a5f      	ldr	r2, [pc, #380]	@ (800324c <HAL_GPIO_Init+0x30c>)
 80030d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030d6:	4b5d      	ldr	r3, [pc, #372]	@ (800324c <HAL_GPIO_Init+0x30c>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003250 <HAL_GPIO_Init+0x310>)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	220f      	movs	r2, #15
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a52      	ldr	r2, [pc, #328]	@ (8003254 <HAL_GPIO_Init+0x314>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d02b      	beq.n	8003166 <HAL_GPIO_Init+0x226>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a51      	ldr	r2, [pc, #324]	@ (8003258 <HAL_GPIO_Init+0x318>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d025      	beq.n	8003162 <HAL_GPIO_Init+0x222>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a50      	ldr	r2, [pc, #320]	@ (800325c <HAL_GPIO_Init+0x31c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01f      	beq.n	800315e <HAL_GPIO_Init+0x21e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4f      	ldr	r2, [pc, #316]	@ (8003260 <HAL_GPIO_Init+0x320>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d019      	beq.n	800315a <HAL_GPIO_Init+0x21a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4e      	ldr	r2, [pc, #312]	@ (8003264 <HAL_GPIO_Init+0x324>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_GPIO_Init+0x216>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4d      	ldr	r2, [pc, #308]	@ (8003268 <HAL_GPIO_Init+0x328>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00d      	beq.n	8003152 <HAL_GPIO_Init+0x212>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4c      	ldr	r2, [pc, #304]	@ (800326c <HAL_GPIO_Init+0x32c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <HAL_GPIO_Init+0x20e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a4b      	ldr	r2, [pc, #300]	@ (8003270 <HAL_GPIO_Init+0x330>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_GPIO_Init+0x20a>
 8003146:	2307      	movs	r3, #7
 8003148:	e00e      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800314a:	2308      	movs	r3, #8
 800314c:	e00c      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800314e:	2306      	movs	r3, #6
 8003150:	e00a      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003152:	2305      	movs	r3, #5
 8003154:	e008      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003156:	2304      	movs	r3, #4
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800315a:	2303      	movs	r3, #3
 800315c:	e004      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800315e:	2302      	movs	r3, #2
 8003160:	e002      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003166:	2300      	movs	r3, #0
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	f002 0203 	and.w	r2, r2, #3
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	4093      	lsls	r3, r2
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003178:	4935      	ldr	r1, [pc, #212]	@ (8003250 <HAL_GPIO_Init+0x310>)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	3302      	adds	r3, #2
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003186:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <HAL_GPIO_Init+0x334>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031aa:	4a32      	ldr	r2, [pc, #200]	@ (8003274 <HAL_GPIO_Init+0x334>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b0:	4b30      	ldr	r3, [pc, #192]	@ (8003274 <HAL_GPIO_Init+0x334>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d4:	4a27      	ldr	r2, [pc, #156]	@ (8003274 <HAL_GPIO_Init+0x334>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031da:	4b26      	ldr	r3, [pc, #152]	@ (8003274 <HAL_GPIO_Init+0x334>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003274 <HAL_GPIO_Init+0x334>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003204:	4b1b      	ldr	r3, [pc, #108]	@ (8003274 <HAL_GPIO_Init+0x334>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003228:	4a12      	ldr	r2, [pc, #72]	@ (8003274 <HAL_GPIO_Init+0x334>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3301      	adds	r3, #1
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b0f      	cmp	r3, #15
 8003238:	f67f ae90 	bls.w	8002f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3724      	adds	r7, #36	@ 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	40013800 	.word	0x40013800
 8003254:	40020000 	.word	0x40020000
 8003258:	40020400 	.word	0x40020400
 800325c:	40020800 	.word	0x40020800
 8003260:	40020c00 	.word	0x40020c00
 8003264:	40021000 	.word	0x40021000
 8003268:	40021400 	.word	0x40021400
 800326c:	40021800 	.word	0x40021800
 8003270:	40021c00 	.word	0x40021c00
 8003274:	40013c00 	.word	0x40013c00

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003294:	e003      	b.n	800329e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	041a      	lsls	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	619a      	str	r2, [r3, #24]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032bc:	887a      	ldrh	r2, [r7, #2]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4013      	ands	r3, r2
 80032c2:	041a      	lsls	r2, r3, #16
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	400b      	ands	r3, r1
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	619a      	str	r2, [r3, #24]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e267      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d075      	beq.n	80033ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032fe:	4b88      	ldr	r3, [pc, #544]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b04      	cmp	r3, #4
 8003308:	d00c      	beq.n	8003324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330a:	4b85      	ldr	r3, [pc, #532]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003312:	2b08      	cmp	r3, #8
 8003314:	d112      	bne.n	800333c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003316:	4b82      	ldr	r3, [pc, #520]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800331e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003322:	d10b      	bne.n	800333c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	4b7e      	ldr	r3, [pc, #504]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d05b      	beq.n	80033e8 <HAL_RCC_OscConfig+0x108>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d157      	bne.n	80033e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e242      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003344:	d106      	bne.n	8003354 <HAL_RCC_OscConfig+0x74>
 8003346:	4b76      	ldr	r3, [pc, #472]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a75      	ldr	r2, [pc, #468]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e01d      	b.n	8003390 <HAL_RCC_OscConfig+0xb0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x98>
 800335e:	4b70      	ldr	r3, [pc, #448]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6f      	ldr	r2, [pc, #444]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b6d      	ldr	r3, [pc, #436]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a6c      	ldr	r2, [pc, #432]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e00b      	b.n	8003390 <HAL_RCC_OscConfig+0xb0>
 8003378:	4b69      	ldr	r3, [pc, #420]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a68      	ldr	r2, [pc, #416]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 800337e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	4b66      	ldr	r3, [pc, #408]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a65      	ldr	r2, [pc, #404]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 800338a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800338e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fe fcc2 	bl	8001d20 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fe fcbe 	bl	8001d20 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	@ 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e207      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0xc0>
 80033be:	e014      	b.n	80033ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe fcae 	bl	8001d20 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fe fcaa 	bl	8001d20 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	@ 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e1f3      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	4b51      	ldr	r3, [pc, #324]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0xe8>
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d063      	beq.n	80034be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003402:	4b47      	ldr	r3, [pc, #284]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340a:	2b08      	cmp	r3, #8
 800340c:	d11c      	bne.n	8003448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340e:	4b44      	ldr	r3, [pc, #272]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d116      	bne.n	8003448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341a:	4b41      	ldr	r3, [pc, #260]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_RCC_OscConfig+0x152>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d001      	beq.n	8003432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e1c7      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003432:	4b3b      	ldr	r3, [pc, #236]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4937      	ldr	r1, [pc, #220]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	e03a      	b.n	80034be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003450:	4b34      	ldr	r3, [pc, #208]	@ (8003524 <HAL_RCC_OscConfig+0x244>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fe fc63 	bl	8001d20 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345e:	f7fe fc5f 	bl	8001d20 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e1a8      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	4b2b      	ldr	r3, [pc, #172]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347c:	4b28      	ldr	r3, [pc, #160]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4925      	ldr	r1, [pc, #148]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 800348c:	4313      	orrs	r3, r2
 800348e:	600b      	str	r3, [r1, #0]
 8003490:	e015      	b.n	80034be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003492:	4b24      	ldr	r3, [pc, #144]	@ (8003524 <HAL_RCC_OscConfig+0x244>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fe fc42 	bl	8001d20 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a0:	f7fe fc3e 	bl	8001d20 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e187      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d036      	beq.n	8003538 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d016      	beq.n	8003500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d2:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <HAL_RCC_OscConfig+0x248>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fe fc22 	bl	8001d20 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e0:	f7fe fc1e 	bl	8001d20 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e167      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003520 <HAL_RCC_OscConfig+0x240>)
 80034f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x200>
 80034fe:	e01b      	b.n	8003538 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003500:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <HAL_RCC_OscConfig+0x248>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003506:	f7fe fc0b 	bl	8001d20 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	e00e      	b.n	800352c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350e:	f7fe fc07 	bl	8001d20 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d907      	bls.n	800352c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e150      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
 8003520:	40023800 	.word	0x40023800
 8003524:	42470000 	.word	0x42470000
 8003528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	4b88      	ldr	r3, [pc, #544]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 800352e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ea      	bne.n	800350e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8097 	beq.w	8003674 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354a:	4b81      	ldr	r3, [pc, #516]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	4b7d      	ldr	r3, [pc, #500]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	4a7c      	ldr	r2, [pc, #496]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003564:	6413      	str	r3, [r2, #64]	@ 0x40
 8003566:	4b7a      	ldr	r3, [pc, #488]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003572:	2301      	movs	r3, #1
 8003574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b77      	ldr	r3, [pc, #476]	@ (8003754 <HAL_RCC_OscConfig+0x474>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d118      	bne.n	80035b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003582:	4b74      	ldr	r3, [pc, #464]	@ (8003754 <HAL_RCC_OscConfig+0x474>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a73      	ldr	r2, [pc, #460]	@ (8003754 <HAL_RCC_OscConfig+0x474>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800358c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358e:	f7fe fbc7 	bl	8001d20 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003596:	f7fe fbc3 	bl	8001d20 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e10c      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003754 <HAL_RCC_OscConfig+0x474>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x2ea>
 80035bc:	4b64      	ldr	r3, [pc, #400]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c0:	4a63      	ldr	r2, [pc, #396]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c8:	e01c      	b.n	8003604 <HAL_RCC_OscConfig+0x324>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0x30c>
 80035d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035de:	4b5c      	ldr	r3, [pc, #368]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0x324>
 80035ec:	4b58      	ldr	r3, [pc, #352]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f0:	4a57      	ldr	r2, [pc, #348]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f8:	4b55      	ldr	r3, [pc, #340]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fc:	4a54      	ldr	r2, [pc, #336]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80035fe:	f023 0304 	bic.w	r3, r3, #4
 8003602:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d015      	beq.n	8003638 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fe fb88 	bl	8001d20 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003612:	e00a      	b.n	800362a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fe fb84 	bl	8001d20 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e0cb      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	4b49      	ldr	r3, [pc, #292]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ee      	beq.n	8003614 <HAL_RCC_OscConfig+0x334>
 8003636:	e014      	b.n	8003662 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003638:	f7fe fb72 	bl	8001d20 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fe fb6e 	bl	8001d20 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0b5      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003656:	4b3e      	ldr	r3, [pc, #248]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1ee      	bne.n	8003640 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003662:	7dfb      	ldrb	r3, [r7, #23]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003668:	4b39      	ldr	r3, [pc, #228]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	4a38      	ldr	r2, [pc, #224]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 800366e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003672:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80a1 	beq.w	80037c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800367e:	4b34      	ldr	r3, [pc, #208]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b08      	cmp	r3, #8
 8003688:	d05c      	beq.n	8003744 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d141      	bne.n	8003716 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	4b31      	ldr	r3, [pc, #196]	@ (8003758 <HAL_RCC_OscConfig+0x478>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fb42 	bl	8001d20 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fb3e 	bl	8001d20 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e087      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	4b27      	ldr	r3, [pc, #156]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	019b      	lsls	r3, r3, #6
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	085b      	lsrs	r3, r3, #1
 80036d6:	3b01      	subs	r3, #1
 80036d8:	041b      	lsls	r3, r3, #16
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	491b      	ldr	r1, [pc, #108]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <HAL_RCC_OscConfig+0x478>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fe fb17 	bl	8001d20 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fe fb13 	bl	8001d20 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e05c      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003708:	4b11      	ldr	r3, [pc, #68]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x416>
 8003714:	e054      	b.n	80037c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <HAL_RCC_OscConfig+0x478>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fb00 	bl	8001d20 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fafc 	bl	8001d20 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e045      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <HAL_RCC_OscConfig+0x470>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x444>
 8003742:	e03d      	b.n	80037c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e038      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
 8003750:	40023800 	.word	0x40023800
 8003754:	40007000 	.word	0x40007000
 8003758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800375c:	4b1b      	ldr	r3, [pc, #108]	@ (80037cc <HAL_RCC_OscConfig+0x4ec>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d028      	beq.n	80037bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d121      	bne.n	80037bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d11a      	bne.n	80037bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003794:	4293      	cmp	r3, r2
 8003796:	d111      	bne.n	80037bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	3b01      	subs	r3, #1
 80037a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800

080037d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0cc      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e4:	4b68      	ldr	r3, [pc, #416]	@ (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d90c      	bls.n	800380c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b65      	ldr	r3, [pc, #404]	@ (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b63      	ldr	r3, [pc, #396]	@ (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0b8      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003824:	4b59      	ldr	r3, [pc, #356]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a58      	ldr	r2, [pc, #352]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800382e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800383c:	4b53      	ldr	r3, [pc, #332]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a52      	ldr	r2, [pc, #328]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	4b50      	ldr	r3, [pc, #320]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	494d      	ldr	r1, [pc, #308]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d044      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b47      	ldr	r3, [pc, #284]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d119      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d003      	beq.n	800388e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388a:	2b03      	cmp	r3, #3
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388e:	4b3f      	ldr	r3, [pc, #252]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389e:	4b3b      	ldr	r3, [pc, #236]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e067      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ae:	4b37      	ldr	r3, [pc, #220]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f023 0203 	bic.w	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4934      	ldr	r1, [pc, #208]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c0:	f7fe fa2e 	bl	8001d20 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	e00a      	b.n	80038de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c8:	f7fe fa2a 	bl	8001d20 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e04f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	4b2b      	ldr	r3, [pc, #172]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 020c 	and.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d1eb      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f0:	4b25      	ldr	r3, [pc, #148]	@ (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d20c      	bcs.n	8003918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b22      	ldr	r3, [pc, #136]	@ (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e032      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003924:	4b19      	ldr	r3, [pc, #100]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4916      	ldr	r1, [pc, #88]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003942:	4b12      	ldr	r3, [pc, #72]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	490e      	ldr	r1, [pc, #56]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003956:	f000 f821 	bl	800399c <HAL_RCC_GetSysClockFreq>
 800395a:	4602      	mov	r2, r0
 800395c:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	490a      	ldr	r1, [pc, #40]	@ (8003990 <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	5ccb      	ldrb	r3, [r1, r3]
 800396a:	fa22 f303 	lsr.w	r3, r2, r3
 800396e:	4a09      	ldr	r2, [pc, #36]	@ (8003994 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003972:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe f98e 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40023c00 	.word	0x40023c00
 800398c:	40023800 	.word	0x40023800
 8003990:	08006010 	.word	0x08006010
 8003994:	20000018 	.word	0x20000018
 8003998:	2000001c 	.word	0x2000001c

0800399c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800399c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a0:	b094      	sub	sp, #80	@ 0x50
 80039a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80039a8:	2300      	movs	r3, #0
 80039aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ac:	2300      	movs	r3, #0
 80039ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b4:	4b79      	ldr	r3, [pc, #484]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d00d      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x40>
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	f200 80e1 	bhi.w	8003b88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x34>
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d003      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ce:	e0db      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d0:	4b73      	ldr	r3, [pc, #460]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 80039d2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80039d4:	e0db      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039d6:	4b73      	ldr	r3, [pc, #460]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x208>)
 80039d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039da:	e0d8      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039dc:	4b6f      	ldr	r3, [pc, #444]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039e6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d063      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	099b      	lsrs	r3, r3, #6
 80039f8:	2200      	movs	r2, #0
 80039fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a06:	2300      	movs	r3, #0
 8003a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a0e:	4622      	mov	r2, r4
 8003a10:	462b      	mov	r3, r5
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	0159      	lsls	r1, r3, #5
 8003a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a20:	0150      	lsls	r0, r2, #5
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4621      	mov	r1, r4
 8003a28:	1a51      	subs	r1, r2, r1
 8003a2a:	6139      	str	r1, [r7, #16]
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a40:	4659      	mov	r1, fp
 8003a42:	018b      	lsls	r3, r1, #6
 8003a44:	4651      	mov	r1, sl
 8003a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a4a:	4651      	mov	r1, sl
 8003a4c:	018a      	lsls	r2, r1, #6
 8003a4e:	4651      	mov	r1, sl
 8003a50:	ebb2 0801 	subs.w	r8, r2, r1
 8003a54:	4659      	mov	r1, fp
 8003a56:	eb63 0901 	sbc.w	r9, r3, r1
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a6e:	4690      	mov	r8, r2
 8003a70:	4699      	mov	r9, r3
 8003a72:	4623      	mov	r3, r4
 8003a74:	eb18 0303 	adds.w	r3, r8, r3
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	462b      	mov	r3, r5
 8003a7c:	eb49 0303 	adc.w	r3, r9, r3
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a8e:	4629      	mov	r1, r5
 8003a90:	024b      	lsls	r3, r1, #9
 8003a92:	4621      	mov	r1, r4
 8003a94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a98:	4621      	mov	r1, r4
 8003a9a:	024a      	lsls	r2, r1, #9
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003aac:	f7fd f85a 	bl	8000b64 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab8:	e058      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aba:	4b38      	ldr	r3, [pc, #224]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aca:	623b      	str	r3, [r7, #32]
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	f04f 0000 	mov.w	r0, #0
 8003adc:	f04f 0100 	mov.w	r1, #0
 8003ae0:	0159      	lsls	r1, r3, #5
 8003ae2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae6:	0150      	lsls	r0, r2, #5
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4641      	mov	r1, r8
 8003aee:	ebb2 0a01 	subs.w	sl, r2, r1
 8003af2:	4649      	mov	r1, r9
 8003af4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b10:	eb63 050b 	sbc.w	r5, r3, fp
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	00eb      	lsls	r3, r5, #3
 8003b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b22:	00e2      	lsls	r2, r4, #3
 8003b24:	4614      	mov	r4, r2
 8003b26:	461d      	mov	r5, r3
 8003b28:	4643      	mov	r3, r8
 8003b2a:	18e3      	adds	r3, r4, r3
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	464b      	mov	r3, r9
 8003b30:	eb45 0303 	adc.w	r3, r5, r3
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b42:	4629      	mov	r1, r5
 8003b44:	028b      	lsls	r3, r1, #10
 8003b46:	4621      	mov	r1, r4
 8003b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	028a      	lsls	r2, r1, #10
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b56:	2200      	movs	r2, #0
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	61fa      	str	r2, [r7, #28]
 8003b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b60:	f7fd f800 	bl	8000b64 <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4613      	mov	r3, r2
 8003b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	3301      	adds	r3, #1
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003b7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b86:	e002      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3750      	adds	r7, #80	@ 0x50
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	00f42400 	.word	0x00f42400
 8003ba4:	007a1200 	.word	0x007a1200

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d105      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d035      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bd0:	4b62      	ldr	r3, [pc, #392]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bd6:	f7fe f8a3 	bl	8001d20 <HAL_GetTick>
 8003bda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bde:	f7fe f89f 	bl	8001d20 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0b0      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	019a      	lsls	r2, r3, #6
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	071b      	lsls	r3, r3, #28
 8003c08:	4955      	ldr	r1, [pc, #340]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c10:	4b52      	ldr	r3, [pc, #328]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c16:	f7fe f883 	bl	8001d20 <HAL_GetTick>
 8003c1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c1e:	f7fe f87f 	bl	8001d20 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e090      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c30:	4b4b      	ldr	r3, [pc, #300]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8083 	beq.w	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	4b44      	ldr	r3, [pc, #272]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	4a43      	ldr	r2, [pc, #268]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c5a:	4b41      	ldr	r3, [pc, #260]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c66:	4b3f      	ldr	r3, [pc, #252]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c72:	f7fe f855 	bl	8001d20 <HAL_GetTick>
 8003c76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c7a:	f7fe f851 	bl	8001d20 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e062      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c8c:	4b35      	ldr	r3, [pc, #212]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c98:	4b31      	ldr	r3, [pc, #196]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d02f      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d028      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc0:	4b29      	ldr	r3, [pc, #164]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc6:	4b28      	ldr	r3, [pc, #160]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ccc:	4a24      	ldr	r2, [pc, #144]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cd2:	4b23      	ldr	r3, [pc, #140]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d114      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cde:	f7fe f81f 	bl	8001d20 <HAL_GetTick>
 8003ce2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce6:	f7fe f81b 	bl	8001d20 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e02a      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfc:	4b18      	ldr	r3, [pc, #96]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ee      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d14:	d10d      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003d16:	4b12      	ldr	r3, [pc, #72]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d2a:	490d      	ldr	r1, [pc, #52]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	608b      	str	r3, [r1, #8]
 8003d30:	e005      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d32:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	4a0a      	ldr	r2, [pc, #40]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d38:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003d3c:	6093      	str	r3, [r2, #8]
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	4905      	ldr	r1, [pc, #20]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	42470068 	.word	0x42470068
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40007000 	.word	0x40007000
 8003d68:	42470e40 	.word	0x42470e40

08003d6c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e073      	b.n	8003e6a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	7f5b      	ldrb	r3, [r3, #29]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd fcf4 	bl	8001780 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d055      	beq.n	8003e58 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	22ca      	movs	r2, #202	@ 0xca
 8003db2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2253      	movs	r2, #83	@ 0x53
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f87f 	bl	8003ec0 <RTC_EnterInitMode>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d12c      	bne.n	8003e26 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dde:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6899      	ldr	r1, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68d2      	ldr	r2, [r2, #12]
 8003e06:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6919      	ldr	r1, [r3, #16]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	041a      	lsls	r2, r3, #16
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f886 	bl	8003f2e <RTC_ExitInitMode>
 8003e22:	4603      	mov	r3, r0
 8003e24:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d110      	bne.n	8003e4e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	22ff      	movs	r2, #255	@ 0xff
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e56:	e001      	b.n	8003e5c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a0d      	ldr	r2, [pc, #52]	@ (8003ebc <HAL_RTC_WaitForSynchro+0x48>)
 8003e86:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e88:	f7fd ff4a 	bl	8001d20 <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e8e:	e009      	b.n	8003ea4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e90:	f7fd ff46 	bl	8001d20 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e007      	b.n	8003eb4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0ee      	beq.n	8003e90 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	00017f5f 	.word	0x00017f5f

08003ec0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d122      	bne.n	8003f24 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eee:	f7fd ff17 	bl	8001d20 <HAL_GetTick>
 8003ef2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ef4:	e00c      	b.n	8003f10 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ef6:	f7fd ff13 	bl	8001d20 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f04:	d904      	bls.n	8003f10 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2204      	movs	r2, #4
 8003f0a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <RTC_EnterInitMode+0x64>
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d1e8      	bne.n	8003ef6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f48:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff8b 	bl	8003e74 <HAL_RTC_WaitForSynchro>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d004      	beq.n	8003f6e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2204      	movs	r2, #4
 8003f68:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e041      	b.n	800400e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd fc18 	bl	80017d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f000 fbe8 	bl	800478c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e041      	b.n	80040ac <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f839 	bl	80040b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3304      	adds	r3, #4
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f000 fb99 	bl	800478c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e041      	b.n	800415e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f839 	bl	8004166 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f000 fb40 	bl	800478c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d020      	beq.n	80041de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01b      	beq.n	80041de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f06f 0202 	mvn.w	r2, #2
 80041ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fac2 	bl	800474e <HAL_TIM_IC_CaptureCallback>
 80041ca:	e005      	b.n	80041d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fab4 	bl	800473a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fac5 	bl	8004762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d020      	beq.n	800422a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01b      	beq.n	800422a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f06f 0204 	mvn.w	r2, #4
 80041fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fa9c 	bl	800474e <HAL_TIM_IC_CaptureCallback>
 8004216:	e005      	b.n	8004224 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fa8e 	bl	800473a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fa9f 	bl	8004762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01b      	beq.n	8004276 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f06f 0208 	mvn.w	r2, #8
 8004246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2204      	movs	r2, #4
 800424c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fa76 	bl	800474e <HAL_TIM_IC_CaptureCallback>
 8004262:	e005      	b.n	8004270 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fa68 	bl	800473a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fa79 	bl	8004762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01b      	beq.n	80042c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f06f 0210 	mvn.w	r2, #16
 8004292:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2208      	movs	r2, #8
 8004298:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa50 	bl	800474e <HAL_TIM_IC_CaptureCallback>
 80042ae:	e005      	b.n	80042bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fa42 	bl	800473a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa53 	bl	8004762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f06f 0201 	mvn.w	r2, #1
 80042de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fa20 	bl	8004726 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00c      	beq.n	800430a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d007      	beq.n	800430a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fe0f 	bl	8004f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa24 	bl	8004776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00c      	beq.n	8004352 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f06f 0220 	mvn.w	r2, #32
 800434a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fde1 	bl	8004f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004376:	2302      	movs	r3, #2
 8004378:	e048      	b.n	800440c <HAL_TIM_OC_ConfigChannel+0xb0>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b0c      	cmp	r3, #12
 8004386:	d839      	bhi.n	80043fc <HAL_TIM_OC_ConfigChannel+0xa0>
 8004388:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <HAL_TIM_OC_ConfigChannel+0x34>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043c5 	.word	0x080043c5
 8004394:	080043fd 	.word	0x080043fd
 8004398:	080043fd 	.word	0x080043fd
 800439c:	080043fd 	.word	0x080043fd
 80043a0:	080043d3 	.word	0x080043d3
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	080043fd 	.word	0x080043fd
 80043ac:	080043fd 	.word	0x080043fd
 80043b0:	080043e1 	.word	0x080043e1
 80043b4:	080043fd 	.word	0x080043fd
 80043b8:	080043fd 	.word	0x080043fd
 80043bc:	080043fd 	.word	0x080043fd
 80043c0:	080043ef 	.word	0x080043ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa8a 	bl	80048e4 <TIM_OC1_SetConfig>
      break;
 80043d0:	e017      	b.n	8004402 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 faf3 	bl	80049c4 <TIM_OC2_SetConfig>
      break;
 80043de:	e010      	b.n	8004402 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fb62 	bl	8004ab0 <TIM_OC3_SetConfig>
      break;
 80043ec:	e009      	b.n	8004402 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fbcf 	bl	8004b98 <TIM_OC4_SetConfig>
      break;
 80043fa:	e002      	b.n	8004402 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800440a:	7dfb      	ldrb	r3, [r7, #23]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800442e:	2302      	movs	r3, #2
 8004430:	e0ae      	b.n	8004590 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b0c      	cmp	r3, #12
 800443e:	f200 809f 	bhi.w	8004580 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004442:	a201      	add	r2, pc, #4	@ (adr r2, 8004448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	0800447d 	.word	0x0800447d
 800444c:	08004581 	.word	0x08004581
 8004450:	08004581 	.word	0x08004581
 8004454:	08004581 	.word	0x08004581
 8004458:	080044bd 	.word	0x080044bd
 800445c:	08004581 	.word	0x08004581
 8004460:	08004581 	.word	0x08004581
 8004464:	08004581 	.word	0x08004581
 8004468:	080044ff 	.word	0x080044ff
 800446c:	08004581 	.word	0x08004581
 8004470:	08004581 	.word	0x08004581
 8004474:	08004581 	.word	0x08004581
 8004478:	0800453f 	.word	0x0800453f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fa2e 	bl	80048e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0208 	orr.w	r2, r2, #8
 8004496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0204 	bic.w	r2, r2, #4
 80044a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6999      	ldr	r1, [r3, #24]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	619a      	str	r2, [r3, #24]
      break;
 80044ba:	e064      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fa7e 	bl	80049c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6999      	ldr	r1, [r3, #24]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	021a      	lsls	r2, r3, #8
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	619a      	str	r2, [r3, #24]
      break;
 80044fc:	e043      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fad3 	bl	8004ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0208 	orr.w	r2, r2, #8
 8004518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0204 	bic.w	r2, r2, #4
 8004528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69d9      	ldr	r1, [r3, #28]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	61da      	str	r2, [r3, #28]
      break;
 800453c:	e023      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fb27 	bl	8004b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69d9      	ldr	r1, [r3, #28]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	021a      	lsls	r2, r3, #8
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	61da      	str	r2, [r3, #28]
      break;
 800457e:	e002      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]
      break;
 8004584:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800458e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_TIM_ConfigClockSource+0x1c>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e0b4      	b.n	800471e <HAL_TIM_ConfigClockSource+0x186>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ec:	d03e      	beq.n	800466c <HAL_TIM_ConfigClockSource+0xd4>
 80045ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f2:	f200 8087 	bhi.w	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 80045f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fa:	f000 8086 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x172>
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004602:	d87f      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b70      	cmp	r3, #112	@ 0x70
 8004606:	d01a      	beq.n	800463e <HAL_TIM_ConfigClockSource+0xa6>
 8004608:	2b70      	cmp	r3, #112	@ 0x70
 800460a:	d87b      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b60      	cmp	r3, #96	@ 0x60
 800460e:	d050      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004610:	2b60      	cmp	r3, #96	@ 0x60
 8004612:	d877      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 8004614:	2b50      	cmp	r3, #80	@ 0x50
 8004616:	d03c      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0xfa>
 8004618:	2b50      	cmp	r3, #80	@ 0x50
 800461a:	d873      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 800461c:	2b40      	cmp	r3, #64	@ 0x40
 800461e:	d058      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004620:	2b40      	cmp	r3, #64	@ 0x40
 8004622:	d86f      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 8004624:	2b30      	cmp	r3, #48	@ 0x30
 8004626:	d064      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004628:	2b30      	cmp	r3, #48	@ 0x30
 800462a:	d86b      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 800462c:	2b20      	cmp	r3, #32
 800462e:	d060      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004630:	2b20      	cmp	r3, #32
 8004632:	d867      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d05c      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004638:	2b10      	cmp	r3, #16
 800463a:	d05a      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x15a>
 800463c:	e062      	b.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800464e:	f000 fb73 	bl	8004d38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	609a      	str	r2, [r3, #8]
      break;
 800466a:	e04f      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800467c:	f000 fb5c 	bl	8004d38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800468e:	609a      	str	r2, [r3, #8]
      break;
 8004690:	e03c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800469e:	461a      	mov	r2, r3
 80046a0:	f000 fad0 	bl	8004c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2150      	movs	r1, #80	@ 0x50
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fb29 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 80046b0:	e02c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046be:	461a      	mov	r2, r3
 80046c0:	f000 faef 	bl	8004ca2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2160      	movs	r1, #96	@ 0x60
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fb19 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 80046d0:	e01c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046de:	461a      	mov	r2, r3
 80046e0:	f000 fab0 	bl	8004c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2140      	movs	r1, #64	@ 0x40
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fb09 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 80046f0:	e00c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f000 fb00 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 8004702:	e003      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
      break;
 8004708:	e000      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800470a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a46      	ldr	r2, [pc, #280]	@ (80048b8 <TIM_Base_SetConfig+0x12c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047aa:	d00f      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a43      	ldr	r2, [pc, #268]	@ (80048bc <TIM_Base_SetConfig+0x130>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a42      	ldr	r2, [pc, #264]	@ (80048c0 <TIM_Base_SetConfig+0x134>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a41      	ldr	r2, [pc, #260]	@ (80048c4 <TIM_Base_SetConfig+0x138>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a40      	ldr	r2, [pc, #256]	@ (80048c8 <TIM_Base_SetConfig+0x13c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d108      	bne.n	80047de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a35      	ldr	r2, [pc, #212]	@ (80048b8 <TIM_Base_SetConfig+0x12c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d02b      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ec:	d027      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a32      	ldr	r2, [pc, #200]	@ (80048bc <TIM_Base_SetConfig+0x130>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d023      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a31      	ldr	r2, [pc, #196]	@ (80048c0 <TIM_Base_SetConfig+0x134>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01f      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a30      	ldr	r2, [pc, #192]	@ (80048c4 <TIM_Base_SetConfig+0x138>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01b      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2f      	ldr	r2, [pc, #188]	@ (80048c8 <TIM_Base_SetConfig+0x13c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d017      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2e      	ldr	r2, [pc, #184]	@ (80048cc <TIM_Base_SetConfig+0x140>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2d      	ldr	r2, [pc, #180]	@ (80048d0 <TIM_Base_SetConfig+0x144>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00f      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2c      	ldr	r2, [pc, #176]	@ (80048d4 <TIM_Base_SetConfig+0x148>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2b      	ldr	r2, [pc, #172]	@ (80048d8 <TIM_Base_SetConfig+0x14c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2a      	ldr	r2, [pc, #168]	@ (80048dc <TIM_Base_SetConfig+0x150>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a29      	ldr	r2, [pc, #164]	@ (80048e0 <TIM_Base_SetConfig+0x154>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d108      	bne.n	8004850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a10      	ldr	r2, [pc, #64]	@ (80048b8 <TIM_Base_SetConfig+0x12c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_Base_SetConfig+0xf8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a12      	ldr	r2, [pc, #72]	@ (80048c8 <TIM_Base_SetConfig+0x13c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d103      	bne.n	800488c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d105      	bne.n	80048aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f023 0201 	bic.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	611a      	str	r2, [r3, #16]
  }
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40010400 	.word	0x40010400
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800
 80048d8:	40001800 	.word	0x40001800
 80048dc:	40001c00 	.word	0x40001c00
 80048e0:	40002000 	.word	0x40002000

080048e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f023 0201 	bic.w	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 0302 	bic.w	r3, r3, #2
 800492c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a20      	ldr	r2, [pc, #128]	@ (80049bc <TIM_OC1_SetConfig+0xd8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_OC1_SetConfig+0x64>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a1f      	ldr	r2, [pc, #124]	@ (80049c0 <TIM_OC1_SetConfig+0xdc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10c      	bne.n	8004962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0308 	bic.w	r3, r3, #8
 800494e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f023 0304 	bic.w	r3, r3, #4
 8004960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a15      	ldr	r2, [pc, #84]	@ (80049bc <TIM_OC1_SetConfig+0xd8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_OC1_SetConfig+0x8e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <TIM_OC1_SetConfig+0xdc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40010400 	.word	0x40010400

080049c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f023 0210 	bic.w	r2, r3, #16
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0320 	bic.w	r3, r3, #32
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a22      	ldr	r2, [pc, #136]	@ (8004aa8 <TIM_OC2_SetConfig+0xe4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_OC2_SetConfig+0x68>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a21      	ldr	r2, [pc, #132]	@ (8004aac <TIM_OC2_SetConfig+0xe8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10d      	bne.n	8004a48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a17      	ldr	r2, [pc, #92]	@ (8004aa8 <TIM_OC2_SetConfig+0xe4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC2_SetConfig+0x94>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a16      	ldr	r2, [pc, #88]	@ (8004aac <TIM_OC2_SetConfig+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d113      	bne.n	8004a80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40010400 	.word	0x40010400

08004ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0303 	bic.w	r3, r3, #3
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a21      	ldr	r2, [pc, #132]	@ (8004b90 <TIM_OC3_SetConfig+0xe0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_OC3_SetConfig+0x66>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a20      	ldr	r2, [pc, #128]	@ (8004b94 <TIM_OC3_SetConfig+0xe4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d10d      	bne.n	8004b32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a16      	ldr	r2, [pc, #88]	@ (8004b90 <TIM_OC3_SetConfig+0xe0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC3_SetConfig+0x92>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a15      	ldr	r2, [pc, #84]	@ (8004b94 <TIM_OC3_SetConfig+0xe4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d113      	bne.n	8004b6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40010400 	.word	0x40010400

08004b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	031b      	lsls	r3, r3, #12
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a12      	ldr	r2, [pc, #72]	@ (8004c3c <TIM_OC4_SetConfig+0xa4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d003      	beq.n	8004c00 <TIM_OC4_SetConfig+0x68>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a11      	ldr	r2, [pc, #68]	@ (8004c40 <TIM_OC4_SetConfig+0xa8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d109      	bne.n	8004c14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	019b      	lsls	r3, r3, #6
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40010400 	.word	0x40010400

08004c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0201 	bic.w	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f023 030a 	bic.w	r3, r3, #10
 8004c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f023 0210 	bic.w	r2, r3, #16
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	031b      	lsls	r3, r3, #12
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f043 0307 	orr.w	r3, r3, #7
 8004d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	021a      	lsls	r2, r3, #8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	609a      	str	r2, [r3, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e05a      	b.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a21      	ldr	r2, [pc, #132]	@ (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d022      	beq.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ddc:	d01d      	beq.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d018      	beq.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1b      	ldr	r2, [pc, #108]	@ (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d013      	beq.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00e      	beq.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a18      	ldr	r2, [pc, #96]	@ (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d009      	beq.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	@ (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a15      	ldr	r2, [pc, #84]	@ (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d10c      	bne.n	8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40010000 	.word	0x40010000
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40000c00 	.word	0x40000c00
 8004e64:	40010400 	.word	0x40010400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40001800 	.word	0x40001800

08004e70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e03d      	b.n	8004f08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <memset>:
 8004f3c:	4402      	add	r2, r0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d100      	bne.n	8004f46 <memset+0xa>
 8004f44:	4770      	bx	lr
 8004f46:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4a:	e7f9      	b.n	8004f40 <memset+0x4>

08004f4c <__libc_init_array>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4d0d      	ldr	r5, [pc, #52]	@ (8004f84 <__libc_init_array+0x38>)
 8004f50:	4c0d      	ldr	r4, [pc, #52]	@ (8004f88 <__libc_init_array+0x3c>)
 8004f52:	1b64      	subs	r4, r4, r5
 8004f54:	10a4      	asrs	r4, r4, #2
 8004f56:	2600      	movs	r6, #0
 8004f58:	42a6      	cmp	r6, r4
 8004f5a:	d109      	bne.n	8004f70 <__libc_init_array+0x24>
 8004f5c:	4d0b      	ldr	r5, [pc, #44]	@ (8004f8c <__libc_init_array+0x40>)
 8004f5e:	4c0c      	ldr	r4, [pc, #48]	@ (8004f90 <__libc_init_array+0x44>)
 8004f60:	f001 f84a 	bl	8005ff8 <_init>
 8004f64:	1b64      	subs	r4, r4, r5
 8004f66:	10a4      	asrs	r4, r4, #2
 8004f68:	2600      	movs	r6, #0
 8004f6a:	42a6      	cmp	r6, r4
 8004f6c:	d105      	bne.n	8004f7a <__libc_init_array+0x2e>
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f74:	4798      	blx	r3
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7ee      	b.n	8004f58 <__libc_init_array+0xc>
 8004f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7e:	4798      	blx	r3
 8004f80:	3601      	adds	r6, #1
 8004f82:	e7f2      	b.n	8004f6a <__libc_init_array+0x1e>
 8004f84:	08006208 	.word	0x08006208
 8004f88:	08006208 	.word	0x08006208
 8004f8c:	08006208 	.word	0x08006208
 8004f90:	0800620c 	.word	0x0800620c
 8004f94:	00000000 	.word	0x00000000

08004f98 <sin>:
 8004f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f9a:	ec53 2b10 	vmov	r2, r3, d0
 8004f9e:	4826      	ldr	r0, [pc, #152]	@ (8005038 <sin+0xa0>)
 8004fa0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004fa4:	4281      	cmp	r1, r0
 8004fa6:	d807      	bhi.n	8004fb8 <sin+0x20>
 8004fa8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005030 <sin+0x98>
 8004fac:	2000      	movs	r0, #0
 8004fae:	b005      	add	sp, #20
 8004fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb4:	f000 b90c 	b.w	80051d0 <__kernel_sin>
 8004fb8:	4820      	ldr	r0, [pc, #128]	@ (800503c <sin+0xa4>)
 8004fba:	4281      	cmp	r1, r0
 8004fbc:	d908      	bls.n	8004fd0 <sin+0x38>
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f7fb f905 	bl	80001d0 <__aeabi_dsub>
 8004fc6:	ec41 0b10 	vmov	d0, r0, r1
 8004fca:	b005      	add	sp, #20
 8004fcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fd0:	4668      	mov	r0, sp
 8004fd2:	f000 f9b9 	bl	8005348 <__ieee754_rem_pio2>
 8004fd6:	f000 0003 	and.w	r0, r0, #3
 8004fda:	2801      	cmp	r0, #1
 8004fdc:	d00c      	beq.n	8004ff8 <sin+0x60>
 8004fde:	2802      	cmp	r0, #2
 8004fe0:	d011      	beq.n	8005006 <sin+0x6e>
 8004fe2:	b9e8      	cbnz	r0, 8005020 <sin+0x88>
 8004fe4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004fe8:	ed9d 0b00 	vldr	d0, [sp]
 8004fec:	2001      	movs	r0, #1
 8004fee:	f000 f8ef 	bl	80051d0 <__kernel_sin>
 8004ff2:	ec51 0b10 	vmov	r0, r1, d0
 8004ff6:	e7e6      	b.n	8004fc6 <sin+0x2e>
 8004ff8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ffc:	ed9d 0b00 	vldr	d0, [sp]
 8005000:	f000 f81e 	bl	8005040 <__kernel_cos>
 8005004:	e7f5      	b.n	8004ff2 <sin+0x5a>
 8005006:	ed9d 1b02 	vldr	d1, [sp, #8]
 800500a:	ed9d 0b00 	vldr	d0, [sp]
 800500e:	2001      	movs	r0, #1
 8005010:	f000 f8de 	bl	80051d0 <__kernel_sin>
 8005014:	ec53 2b10 	vmov	r2, r3, d0
 8005018:	4610      	mov	r0, r2
 800501a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800501e:	e7d2      	b.n	8004fc6 <sin+0x2e>
 8005020:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005024:	ed9d 0b00 	vldr	d0, [sp]
 8005028:	f000 f80a 	bl	8005040 <__kernel_cos>
 800502c:	e7f2      	b.n	8005014 <sin+0x7c>
 800502e:	bf00      	nop
	...
 8005038:	3fe921fb 	.word	0x3fe921fb
 800503c:	7fefffff 	.word	0x7fefffff

08005040 <__kernel_cos>:
 8005040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	ec57 6b10 	vmov	r6, r7, d0
 8005048:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800504c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005050:	ed8d 1b00 	vstr	d1, [sp]
 8005054:	d206      	bcs.n	8005064 <__kernel_cos+0x24>
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	f7fb fd0b 	bl	8000a74 <__aeabi_d2iz>
 800505e:	2800      	cmp	r0, #0
 8005060:	f000 8088 	beq.w	8005174 <__kernel_cos+0x134>
 8005064:	4632      	mov	r2, r6
 8005066:	463b      	mov	r3, r7
 8005068:	4630      	mov	r0, r6
 800506a:	4639      	mov	r1, r7
 800506c:	f7fb fa68 	bl	8000540 <__aeabi_dmul>
 8005070:	4b51      	ldr	r3, [pc, #324]	@ (80051b8 <__kernel_cos+0x178>)
 8005072:	2200      	movs	r2, #0
 8005074:	4604      	mov	r4, r0
 8005076:	460d      	mov	r5, r1
 8005078:	f7fb fa62 	bl	8000540 <__aeabi_dmul>
 800507c:	a340      	add	r3, pc, #256	@ (adr r3, 8005180 <__kernel_cos+0x140>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	4682      	mov	sl, r0
 8005084:	468b      	mov	fp, r1
 8005086:	4620      	mov	r0, r4
 8005088:	4629      	mov	r1, r5
 800508a:	f7fb fa59 	bl	8000540 <__aeabi_dmul>
 800508e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005188 <__kernel_cos+0x148>)
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f7fb f89e 	bl	80001d4 <__adddf3>
 8005098:	4622      	mov	r2, r4
 800509a:	462b      	mov	r3, r5
 800509c:	f7fb fa50 	bl	8000540 <__aeabi_dmul>
 80050a0:	a33b      	add	r3, pc, #236	@ (adr r3, 8005190 <__kernel_cos+0x150>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb f893 	bl	80001d0 <__aeabi_dsub>
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	f7fb fa47 	bl	8000540 <__aeabi_dmul>
 80050b2:	a339      	add	r3, pc, #228	@ (adr r3, 8005198 <__kernel_cos+0x158>)
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f7fb f88c 	bl	80001d4 <__adddf3>
 80050bc:	4622      	mov	r2, r4
 80050be:	462b      	mov	r3, r5
 80050c0:	f7fb fa3e 	bl	8000540 <__aeabi_dmul>
 80050c4:	a336      	add	r3, pc, #216	@ (adr r3, 80051a0 <__kernel_cos+0x160>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f7fb f881 	bl	80001d0 <__aeabi_dsub>
 80050ce:	4622      	mov	r2, r4
 80050d0:	462b      	mov	r3, r5
 80050d2:	f7fb fa35 	bl	8000540 <__aeabi_dmul>
 80050d6:	a334      	add	r3, pc, #208	@ (adr r3, 80051a8 <__kernel_cos+0x168>)
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f7fb f87a 	bl	80001d4 <__adddf3>
 80050e0:	4622      	mov	r2, r4
 80050e2:	462b      	mov	r3, r5
 80050e4:	f7fb fa2c 	bl	8000540 <__aeabi_dmul>
 80050e8:	4622      	mov	r2, r4
 80050ea:	462b      	mov	r3, r5
 80050ec:	f7fb fa28 	bl	8000540 <__aeabi_dmul>
 80050f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f4:	4604      	mov	r4, r0
 80050f6:	460d      	mov	r5, r1
 80050f8:	4630      	mov	r0, r6
 80050fa:	4639      	mov	r1, r7
 80050fc:	f7fb fa20 	bl	8000540 <__aeabi_dmul>
 8005100:	460b      	mov	r3, r1
 8005102:	4602      	mov	r2, r0
 8005104:	4629      	mov	r1, r5
 8005106:	4620      	mov	r0, r4
 8005108:	f7fb f862 	bl	80001d0 <__aeabi_dsub>
 800510c:	4b2b      	ldr	r3, [pc, #172]	@ (80051bc <__kernel_cos+0x17c>)
 800510e:	4598      	cmp	r8, r3
 8005110:	4606      	mov	r6, r0
 8005112:	460f      	mov	r7, r1
 8005114:	d810      	bhi.n	8005138 <__kernel_cos+0xf8>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4650      	mov	r0, sl
 800511c:	4659      	mov	r1, fp
 800511e:	f7fb f857 	bl	80001d0 <__aeabi_dsub>
 8005122:	460b      	mov	r3, r1
 8005124:	4926      	ldr	r1, [pc, #152]	@ (80051c0 <__kernel_cos+0x180>)
 8005126:	4602      	mov	r2, r0
 8005128:	2000      	movs	r0, #0
 800512a:	f7fb f851 	bl	80001d0 <__aeabi_dsub>
 800512e:	ec41 0b10 	vmov	d0, r0, r1
 8005132:	b003      	add	sp, #12
 8005134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005138:	4b22      	ldr	r3, [pc, #136]	@ (80051c4 <__kernel_cos+0x184>)
 800513a:	4921      	ldr	r1, [pc, #132]	@ (80051c0 <__kernel_cos+0x180>)
 800513c:	4598      	cmp	r8, r3
 800513e:	bf8c      	ite	hi
 8005140:	4d21      	ldrhi	r5, [pc, #132]	@ (80051c8 <__kernel_cos+0x188>)
 8005142:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005146:	2400      	movs	r4, #0
 8005148:	4622      	mov	r2, r4
 800514a:	462b      	mov	r3, r5
 800514c:	2000      	movs	r0, #0
 800514e:	f7fb f83f 	bl	80001d0 <__aeabi_dsub>
 8005152:	4622      	mov	r2, r4
 8005154:	4680      	mov	r8, r0
 8005156:	4689      	mov	r9, r1
 8005158:	462b      	mov	r3, r5
 800515a:	4650      	mov	r0, sl
 800515c:	4659      	mov	r1, fp
 800515e:	f7fb f837 	bl	80001d0 <__aeabi_dsub>
 8005162:	4632      	mov	r2, r6
 8005164:	463b      	mov	r3, r7
 8005166:	f7fb f833 	bl	80001d0 <__aeabi_dsub>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4640      	mov	r0, r8
 8005170:	4649      	mov	r1, r9
 8005172:	e7da      	b.n	800512a <__kernel_cos+0xea>
 8005174:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80051b0 <__kernel_cos+0x170>
 8005178:	e7db      	b.n	8005132 <__kernel_cos+0xf2>
 800517a:	bf00      	nop
 800517c:	f3af 8000 	nop.w
 8005180:	be8838d4 	.word	0xbe8838d4
 8005184:	bda8fae9 	.word	0xbda8fae9
 8005188:	bdb4b1c4 	.word	0xbdb4b1c4
 800518c:	3e21ee9e 	.word	0x3e21ee9e
 8005190:	809c52ad 	.word	0x809c52ad
 8005194:	3e927e4f 	.word	0x3e927e4f
 8005198:	19cb1590 	.word	0x19cb1590
 800519c:	3efa01a0 	.word	0x3efa01a0
 80051a0:	16c15177 	.word	0x16c15177
 80051a4:	3f56c16c 	.word	0x3f56c16c
 80051a8:	5555554c 	.word	0x5555554c
 80051ac:	3fa55555 	.word	0x3fa55555
 80051b0:	00000000 	.word	0x00000000
 80051b4:	3ff00000 	.word	0x3ff00000
 80051b8:	3fe00000 	.word	0x3fe00000
 80051bc:	3fd33332 	.word	0x3fd33332
 80051c0:	3ff00000 	.word	0x3ff00000
 80051c4:	3fe90000 	.word	0x3fe90000
 80051c8:	3fd20000 	.word	0x3fd20000
 80051cc:	00000000 	.word	0x00000000

080051d0 <__kernel_sin>:
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	ec55 4b10 	vmov	r4, r5, d0
 80051d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80051dc:	b085      	sub	sp, #20
 80051de:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80051e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80051e6:	4680      	mov	r8, r0
 80051e8:	d205      	bcs.n	80051f6 <__kernel_sin+0x26>
 80051ea:	4620      	mov	r0, r4
 80051ec:	4629      	mov	r1, r5
 80051ee:	f7fb fc41 	bl	8000a74 <__aeabi_d2iz>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d052      	beq.n	800529c <__kernel_sin+0xcc>
 80051f6:	4622      	mov	r2, r4
 80051f8:	462b      	mov	r3, r5
 80051fa:	4620      	mov	r0, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	f7fb f99f 	bl	8000540 <__aeabi_dmul>
 8005202:	4682      	mov	sl, r0
 8005204:	468b      	mov	fp, r1
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4620      	mov	r0, r4
 800520c:	4629      	mov	r1, r5
 800520e:	f7fb f997 	bl	8000540 <__aeabi_dmul>
 8005212:	a342      	add	r3, pc, #264	@ (adr r3, 800531c <__kernel_sin+0x14c>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	e9cd 0100 	strd	r0, r1, [sp]
 800521c:	4650      	mov	r0, sl
 800521e:	4659      	mov	r1, fp
 8005220:	f7fb f98e 	bl	8000540 <__aeabi_dmul>
 8005224:	a33f      	add	r3, pc, #252	@ (adr r3, 8005324 <__kernel_sin+0x154>)
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f7fa ffd1 	bl	80001d0 <__aeabi_dsub>
 800522e:	4652      	mov	r2, sl
 8005230:	465b      	mov	r3, fp
 8005232:	f7fb f985 	bl	8000540 <__aeabi_dmul>
 8005236:	a33d      	add	r3, pc, #244	@ (adr r3, 800532c <__kernel_sin+0x15c>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fa ffca 	bl	80001d4 <__adddf3>
 8005240:	4652      	mov	r2, sl
 8005242:	465b      	mov	r3, fp
 8005244:	f7fb f97c 	bl	8000540 <__aeabi_dmul>
 8005248:	a33a      	add	r3, pc, #232	@ (adr r3, 8005334 <__kernel_sin+0x164>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fa ffbf 	bl	80001d0 <__aeabi_dsub>
 8005252:	4652      	mov	r2, sl
 8005254:	465b      	mov	r3, fp
 8005256:	f7fb f973 	bl	8000540 <__aeabi_dmul>
 800525a:	a338      	add	r3, pc, #224	@ (adr r3, 800533c <__kernel_sin+0x16c>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f7fa ffb8 	bl	80001d4 <__adddf3>
 8005264:	4606      	mov	r6, r0
 8005266:	460f      	mov	r7, r1
 8005268:	f1b8 0f00 	cmp.w	r8, #0
 800526c:	d11b      	bne.n	80052a6 <__kernel_sin+0xd6>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4650      	mov	r0, sl
 8005274:	4659      	mov	r1, fp
 8005276:	f7fb f963 	bl	8000540 <__aeabi_dmul>
 800527a:	a325      	add	r3, pc, #148	@ (adr r3, 8005310 <__kernel_sin+0x140>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fa ffa6 	bl	80001d0 <__aeabi_dsub>
 8005284:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005288:	f7fb f95a 	bl	8000540 <__aeabi_dmul>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4620      	mov	r0, r4
 8005292:	4629      	mov	r1, r5
 8005294:	f7fa ff9e 	bl	80001d4 <__adddf3>
 8005298:	4604      	mov	r4, r0
 800529a:	460d      	mov	r5, r1
 800529c:	ec45 4b10 	vmov	d0, r4, r5
 80052a0:	b005      	add	sp, #20
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005318 <__kernel_sin+0x148>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	f7fb f947 	bl	8000540 <__aeabi_dmul>
 80052b2:	4632      	mov	r2, r6
 80052b4:	4680      	mov	r8, r0
 80052b6:	4689      	mov	r9, r1
 80052b8:	463b      	mov	r3, r7
 80052ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052be:	f7fb f93f 	bl	8000540 <__aeabi_dmul>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4640      	mov	r0, r8
 80052c8:	4649      	mov	r1, r9
 80052ca:	f7fa ff81 	bl	80001d0 <__aeabi_dsub>
 80052ce:	4652      	mov	r2, sl
 80052d0:	465b      	mov	r3, fp
 80052d2:	f7fb f935 	bl	8000540 <__aeabi_dmul>
 80052d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052da:	f7fa ff79 	bl	80001d0 <__aeabi_dsub>
 80052de:	a30c      	add	r3, pc, #48	@ (adr r3, 8005310 <__kernel_sin+0x140>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	4606      	mov	r6, r0
 80052e6:	460f      	mov	r7, r1
 80052e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052ec:	f7fb f928 	bl	8000540 <__aeabi_dmul>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4630      	mov	r0, r6
 80052f6:	4639      	mov	r1, r7
 80052f8:	f7fa ff6c 	bl	80001d4 <__adddf3>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4620      	mov	r0, r4
 8005302:	4629      	mov	r1, r5
 8005304:	f7fa ff64 	bl	80001d0 <__aeabi_dsub>
 8005308:	e7c6      	b.n	8005298 <__kernel_sin+0xc8>
 800530a:	bf00      	nop
 800530c:	f3af 8000 	nop.w
 8005310:	55555549 	.word	0x55555549
 8005314:	3fc55555 	.word	0x3fc55555
 8005318:	3fe00000 	.word	0x3fe00000
 800531c:	5acfd57c 	.word	0x5acfd57c
 8005320:	3de5d93a 	.word	0x3de5d93a
 8005324:	8a2b9ceb 	.word	0x8a2b9ceb
 8005328:	3e5ae5e6 	.word	0x3e5ae5e6
 800532c:	57b1fe7d 	.word	0x57b1fe7d
 8005330:	3ec71de3 	.word	0x3ec71de3
 8005334:	19c161d5 	.word	0x19c161d5
 8005338:	3f2a01a0 	.word	0x3f2a01a0
 800533c:	1110f8a6 	.word	0x1110f8a6
 8005340:	3f811111 	.word	0x3f811111
 8005344:	00000000 	.word	0x00000000

08005348 <__ieee754_rem_pio2>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	ec57 6b10 	vmov	r6, r7, d0
 8005350:	4bc5      	ldr	r3, [pc, #788]	@ (8005668 <__ieee754_rem_pio2+0x320>)
 8005352:	b08d      	sub	sp, #52	@ 0x34
 8005354:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005358:	4598      	cmp	r8, r3
 800535a:	4604      	mov	r4, r0
 800535c:	9704      	str	r7, [sp, #16]
 800535e:	d807      	bhi.n	8005370 <__ieee754_rem_pio2+0x28>
 8005360:	2200      	movs	r2, #0
 8005362:	2300      	movs	r3, #0
 8005364:	ed80 0b00 	vstr	d0, [r0]
 8005368:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800536c:	2500      	movs	r5, #0
 800536e:	e028      	b.n	80053c2 <__ieee754_rem_pio2+0x7a>
 8005370:	4bbe      	ldr	r3, [pc, #760]	@ (800566c <__ieee754_rem_pio2+0x324>)
 8005372:	4598      	cmp	r8, r3
 8005374:	d878      	bhi.n	8005468 <__ieee754_rem_pio2+0x120>
 8005376:	9b04      	ldr	r3, [sp, #16]
 8005378:	4dbd      	ldr	r5, [pc, #756]	@ (8005670 <__ieee754_rem_pio2+0x328>)
 800537a:	2b00      	cmp	r3, #0
 800537c:	4630      	mov	r0, r6
 800537e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005630 <__ieee754_rem_pio2+0x2e8>)
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	4639      	mov	r1, r7
 8005386:	dd38      	ble.n	80053fa <__ieee754_rem_pio2+0xb2>
 8005388:	f7fa ff22 	bl	80001d0 <__aeabi_dsub>
 800538c:	45a8      	cmp	r8, r5
 800538e:	4606      	mov	r6, r0
 8005390:	460f      	mov	r7, r1
 8005392:	d01a      	beq.n	80053ca <__ieee754_rem_pio2+0x82>
 8005394:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005638 <__ieee754_rem_pio2+0x2f0>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	f7fa ff19 	bl	80001d0 <__aeabi_dsub>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4680      	mov	r8, r0
 80053a4:	4689      	mov	r9, r1
 80053a6:	4630      	mov	r0, r6
 80053a8:	4639      	mov	r1, r7
 80053aa:	f7fa ff11 	bl	80001d0 <__aeabi_dsub>
 80053ae:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005638 <__ieee754_rem_pio2+0x2f0>)
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f7fa ff0c 	bl	80001d0 <__aeabi_dsub>
 80053b8:	e9c4 8900 	strd	r8, r9, [r4]
 80053bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053c0:	2501      	movs	r5, #1
 80053c2:	4628      	mov	r0, r5
 80053c4:	b00d      	add	sp, #52	@ 0x34
 80053c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ca:	a39d      	add	r3, pc, #628	@ (adr r3, 8005640 <__ieee754_rem_pio2+0x2f8>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fa fefe 	bl	80001d0 <__aeabi_dsub>
 80053d4:	a39c      	add	r3, pc, #624	@ (adr r3, 8005648 <__ieee754_rem_pio2+0x300>)
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	4606      	mov	r6, r0
 80053dc:	460f      	mov	r7, r1
 80053de:	f7fa fef7 	bl	80001d0 <__aeabi_dsub>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4680      	mov	r8, r0
 80053e8:	4689      	mov	r9, r1
 80053ea:	4630      	mov	r0, r6
 80053ec:	4639      	mov	r1, r7
 80053ee:	f7fa feef 	bl	80001d0 <__aeabi_dsub>
 80053f2:	a395      	add	r3, pc, #596	@ (adr r3, 8005648 <__ieee754_rem_pio2+0x300>)
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	e7dc      	b.n	80053b4 <__ieee754_rem_pio2+0x6c>
 80053fa:	f7fa feeb 	bl	80001d4 <__adddf3>
 80053fe:	45a8      	cmp	r8, r5
 8005400:	4606      	mov	r6, r0
 8005402:	460f      	mov	r7, r1
 8005404:	d018      	beq.n	8005438 <__ieee754_rem_pio2+0xf0>
 8005406:	a38c      	add	r3, pc, #560	@ (adr r3, 8005638 <__ieee754_rem_pio2+0x2f0>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f7fa fee2 	bl	80001d4 <__adddf3>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4680      	mov	r8, r0
 8005416:	4689      	mov	r9, r1
 8005418:	4630      	mov	r0, r6
 800541a:	4639      	mov	r1, r7
 800541c:	f7fa fed8 	bl	80001d0 <__aeabi_dsub>
 8005420:	a385      	add	r3, pc, #532	@ (adr r3, 8005638 <__ieee754_rem_pio2+0x2f0>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f7fa fed5 	bl	80001d4 <__adddf3>
 800542a:	f04f 35ff 	mov.w	r5, #4294967295
 800542e:	e9c4 8900 	strd	r8, r9, [r4]
 8005432:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005436:	e7c4      	b.n	80053c2 <__ieee754_rem_pio2+0x7a>
 8005438:	a381      	add	r3, pc, #516	@ (adr r3, 8005640 <__ieee754_rem_pio2+0x2f8>)
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fa fec9 	bl	80001d4 <__adddf3>
 8005442:	a381      	add	r3, pc, #516	@ (adr r3, 8005648 <__ieee754_rem_pio2+0x300>)
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	4606      	mov	r6, r0
 800544a:	460f      	mov	r7, r1
 800544c:	f7fa fec2 	bl	80001d4 <__adddf3>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4680      	mov	r8, r0
 8005456:	4689      	mov	r9, r1
 8005458:	4630      	mov	r0, r6
 800545a:	4639      	mov	r1, r7
 800545c:	f7fa feb8 	bl	80001d0 <__aeabi_dsub>
 8005460:	a379      	add	r3, pc, #484	@ (adr r3, 8005648 <__ieee754_rem_pio2+0x300>)
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	e7de      	b.n	8005426 <__ieee754_rem_pio2+0xde>
 8005468:	4b82      	ldr	r3, [pc, #520]	@ (8005674 <__ieee754_rem_pio2+0x32c>)
 800546a:	4598      	cmp	r8, r3
 800546c:	f200 80d1 	bhi.w	8005612 <__ieee754_rem_pio2+0x2ca>
 8005470:	f000 f966 	bl	8005740 <fabs>
 8005474:	ec57 6b10 	vmov	r6, r7, d0
 8005478:	a375      	add	r3, pc, #468	@ (adr r3, 8005650 <__ieee754_rem_pio2+0x308>)
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	4630      	mov	r0, r6
 8005480:	4639      	mov	r1, r7
 8005482:	f7fb f85d 	bl	8000540 <__aeabi_dmul>
 8005486:	4b7c      	ldr	r3, [pc, #496]	@ (8005678 <__ieee754_rem_pio2+0x330>)
 8005488:	2200      	movs	r2, #0
 800548a:	f7fa fea3 	bl	80001d4 <__adddf3>
 800548e:	f7fb faf1 	bl	8000a74 <__aeabi_d2iz>
 8005492:	4605      	mov	r5, r0
 8005494:	f7fa ffea 	bl	800046c <__aeabi_i2d>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054a0:	a363      	add	r3, pc, #396	@ (adr r3, 8005630 <__ieee754_rem_pio2+0x2e8>)
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f7fb f84b 	bl	8000540 <__aeabi_dmul>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4630      	mov	r0, r6
 80054b0:	4639      	mov	r1, r7
 80054b2:	f7fa fe8d 	bl	80001d0 <__aeabi_dsub>
 80054b6:	a360      	add	r3, pc, #384	@ (adr r3, 8005638 <__ieee754_rem_pio2+0x2f0>)
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	4682      	mov	sl, r0
 80054be:	468b      	mov	fp, r1
 80054c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054c4:	f7fb f83c 	bl	8000540 <__aeabi_dmul>
 80054c8:	2d1f      	cmp	r5, #31
 80054ca:	4606      	mov	r6, r0
 80054cc:	460f      	mov	r7, r1
 80054ce:	dc0c      	bgt.n	80054ea <__ieee754_rem_pio2+0x1a2>
 80054d0:	4b6a      	ldr	r3, [pc, #424]	@ (800567c <__ieee754_rem_pio2+0x334>)
 80054d2:	1e6a      	subs	r2, r5, #1
 80054d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d8:	4543      	cmp	r3, r8
 80054da:	d006      	beq.n	80054ea <__ieee754_rem_pio2+0x1a2>
 80054dc:	4632      	mov	r2, r6
 80054de:	463b      	mov	r3, r7
 80054e0:	4650      	mov	r0, sl
 80054e2:	4659      	mov	r1, fp
 80054e4:	f7fa fe74 	bl	80001d0 <__aeabi_dsub>
 80054e8:	e00e      	b.n	8005508 <__ieee754_rem_pio2+0x1c0>
 80054ea:	463b      	mov	r3, r7
 80054ec:	4632      	mov	r2, r6
 80054ee:	4650      	mov	r0, sl
 80054f0:	4659      	mov	r1, fp
 80054f2:	f7fa fe6d 	bl	80001d0 <__aeabi_dsub>
 80054f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80054fa:	9305      	str	r3, [sp, #20]
 80054fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005500:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005504:	2b10      	cmp	r3, #16
 8005506:	dc02      	bgt.n	800550e <__ieee754_rem_pio2+0x1c6>
 8005508:	e9c4 0100 	strd	r0, r1, [r4]
 800550c:	e039      	b.n	8005582 <__ieee754_rem_pio2+0x23a>
 800550e:	a34c      	add	r3, pc, #304	@ (adr r3, 8005640 <__ieee754_rem_pio2+0x2f8>)
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005518:	f7fb f812 	bl	8000540 <__aeabi_dmul>
 800551c:	4606      	mov	r6, r0
 800551e:	460f      	mov	r7, r1
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4650      	mov	r0, sl
 8005526:	4659      	mov	r1, fp
 8005528:	f7fa fe52 	bl	80001d0 <__aeabi_dsub>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4680      	mov	r8, r0
 8005532:	4689      	mov	r9, r1
 8005534:	4650      	mov	r0, sl
 8005536:	4659      	mov	r1, fp
 8005538:	f7fa fe4a 	bl	80001d0 <__aeabi_dsub>
 800553c:	4632      	mov	r2, r6
 800553e:	463b      	mov	r3, r7
 8005540:	f7fa fe46 	bl	80001d0 <__aeabi_dsub>
 8005544:	a340      	add	r3, pc, #256	@ (adr r3, 8005648 <__ieee754_rem_pio2+0x300>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	4606      	mov	r6, r0
 800554c:	460f      	mov	r7, r1
 800554e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005552:	f7fa fff5 	bl	8000540 <__aeabi_dmul>
 8005556:	4632      	mov	r2, r6
 8005558:	463b      	mov	r3, r7
 800555a:	f7fa fe39 	bl	80001d0 <__aeabi_dsub>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4606      	mov	r6, r0
 8005564:	460f      	mov	r7, r1
 8005566:	4640      	mov	r0, r8
 8005568:	4649      	mov	r1, r9
 800556a:	f7fa fe31 	bl	80001d0 <__aeabi_dsub>
 800556e:	9a05      	ldr	r2, [sp, #20]
 8005570:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b31      	cmp	r3, #49	@ 0x31
 8005578:	dc20      	bgt.n	80055bc <__ieee754_rem_pio2+0x274>
 800557a:	e9c4 0100 	strd	r0, r1, [r4]
 800557e:	46c2      	mov	sl, r8
 8005580:	46cb      	mov	fp, r9
 8005582:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005586:	4650      	mov	r0, sl
 8005588:	4642      	mov	r2, r8
 800558a:	464b      	mov	r3, r9
 800558c:	4659      	mov	r1, fp
 800558e:	f7fa fe1f 	bl	80001d0 <__aeabi_dsub>
 8005592:	463b      	mov	r3, r7
 8005594:	4632      	mov	r2, r6
 8005596:	f7fa fe1b 	bl	80001d0 <__aeabi_dsub>
 800559a:	9b04      	ldr	r3, [sp, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80055a2:	f6bf af0e 	bge.w	80053c2 <__ieee754_rem_pio2+0x7a>
 80055a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80055aa:	6063      	str	r3, [r4, #4]
 80055ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055b0:	f8c4 8000 	str.w	r8, [r4]
 80055b4:	60a0      	str	r0, [r4, #8]
 80055b6:	60e3      	str	r3, [r4, #12]
 80055b8:	426d      	negs	r5, r5
 80055ba:	e702      	b.n	80053c2 <__ieee754_rem_pio2+0x7a>
 80055bc:	a326      	add	r3, pc, #152	@ (adr r3, 8005658 <__ieee754_rem_pio2+0x310>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c6:	f7fa ffbb 	bl	8000540 <__aeabi_dmul>
 80055ca:	4606      	mov	r6, r0
 80055cc:	460f      	mov	r7, r1
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4640      	mov	r0, r8
 80055d4:	4649      	mov	r1, r9
 80055d6:	f7fa fdfb 	bl	80001d0 <__aeabi_dsub>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4682      	mov	sl, r0
 80055e0:	468b      	mov	fp, r1
 80055e2:	4640      	mov	r0, r8
 80055e4:	4649      	mov	r1, r9
 80055e6:	f7fa fdf3 	bl	80001d0 <__aeabi_dsub>
 80055ea:	4632      	mov	r2, r6
 80055ec:	463b      	mov	r3, r7
 80055ee:	f7fa fdef 	bl	80001d0 <__aeabi_dsub>
 80055f2:	a31b      	add	r3, pc, #108	@ (adr r3, 8005660 <__ieee754_rem_pio2+0x318>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	4606      	mov	r6, r0
 80055fa:	460f      	mov	r7, r1
 80055fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005600:	f7fa ff9e 	bl	8000540 <__aeabi_dmul>
 8005604:	4632      	mov	r2, r6
 8005606:	463b      	mov	r3, r7
 8005608:	f7fa fde2 	bl	80001d0 <__aeabi_dsub>
 800560c:	4606      	mov	r6, r0
 800560e:	460f      	mov	r7, r1
 8005610:	e764      	b.n	80054dc <__ieee754_rem_pio2+0x194>
 8005612:	4b1b      	ldr	r3, [pc, #108]	@ (8005680 <__ieee754_rem_pio2+0x338>)
 8005614:	4598      	cmp	r8, r3
 8005616:	d935      	bls.n	8005684 <__ieee754_rem_pio2+0x33c>
 8005618:	4632      	mov	r2, r6
 800561a:	463b      	mov	r3, r7
 800561c:	4630      	mov	r0, r6
 800561e:	4639      	mov	r1, r7
 8005620:	f7fa fdd6 	bl	80001d0 <__aeabi_dsub>
 8005624:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005628:	e9c4 0100 	strd	r0, r1, [r4]
 800562c:	e69e      	b.n	800536c <__ieee754_rem_pio2+0x24>
 800562e:	bf00      	nop
 8005630:	54400000 	.word	0x54400000
 8005634:	3ff921fb 	.word	0x3ff921fb
 8005638:	1a626331 	.word	0x1a626331
 800563c:	3dd0b461 	.word	0x3dd0b461
 8005640:	1a600000 	.word	0x1a600000
 8005644:	3dd0b461 	.word	0x3dd0b461
 8005648:	2e037073 	.word	0x2e037073
 800564c:	3ba3198a 	.word	0x3ba3198a
 8005650:	6dc9c883 	.word	0x6dc9c883
 8005654:	3fe45f30 	.word	0x3fe45f30
 8005658:	2e000000 	.word	0x2e000000
 800565c:	3ba3198a 	.word	0x3ba3198a
 8005660:	252049c1 	.word	0x252049c1
 8005664:	397b839a 	.word	0x397b839a
 8005668:	3fe921fb 	.word	0x3fe921fb
 800566c:	4002d97b 	.word	0x4002d97b
 8005670:	3ff921fb 	.word	0x3ff921fb
 8005674:	413921fb 	.word	0x413921fb
 8005678:	3fe00000 	.word	0x3fe00000
 800567c:	08006028 	.word	0x08006028
 8005680:	7fefffff 	.word	0x7fefffff
 8005684:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005688:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800568c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005690:	4630      	mov	r0, r6
 8005692:	460f      	mov	r7, r1
 8005694:	f7fb f9ee 	bl	8000a74 <__aeabi_d2iz>
 8005698:	f7fa fee8 	bl	800046c <__aeabi_i2d>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4630      	mov	r0, r6
 80056a2:	4639      	mov	r1, r7
 80056a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056a8:	f7fa fd92 	bl	80001d0 <__aeabi_dsub>
 80056ac:	4b22      	ldr	r3, [pc, #136]	@ (8005738 <__ieee754_rem_pio2+0x3f0>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	f7fa ff46 	bl	8000540 <__aeabi_dmul>
 80056b4:	460f      	mov	r7, r1
 80056b6:	4606      	mov	r6, r0
 80056b8:	f7fb f9dc 	bl	8000a74 <__aeabi_d2iz>
 80056bc:	f7fa fed6 	bl	800046c <__aeabi_i2d>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4630      	mov	r0, r6
 80056c6:	4639      	mov	r1, r7
 80056c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80056cc:	f7fa fd80 	bl	80001d0 <__aeabi_dsub>
 80056d0:	4b19      	ldr	r3, [pc, #100]	@ (8005738 <__ieee754_rem_pio2+0x3f0>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	f7fa ff34 	bl	8000540 <__aeabi_dmul>
 80056d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80056dc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80056e0:	f04f 0803 	mov.w	r8, #3
 80056e4:	2600      	movs	r6, #0
 80056e6:	2700      	movs	r7, #0
 80056e8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80056ec:	4632      	mov	r2, r6
 80056ee:	463b      	mov	r3, r7
 80056f0:	46c2      	mov	sl, r8
 80056f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80056f6:	f7fb f98b 	bl	8000a10 <__aeabi_dcmpeq>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d1f4      	bne.n	80056e8 <__ieee754_rem_pio2+0x3a0>
 80056fe:	4b0f      	ldr	r3, [pc, #60]	@ (800573c <__ieee754_rem_pio2+0x3f4>)
 8005700:	9301      	str	r3, [sp, #4]
 8005702:	2302      	movs	r3, #2
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	462a      	mov	r2, r5
 8005708:	4653      	mov	r3, sl
 800570a:	4621      	mov	r1, r4
 800570c:	a806      	add	r0, sp, #24
 800570e:	f000 f81f 	bl	8005750 <__kernel_rem_pio2>
 8005712:	9b04      	ldr	r3, [sp, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	4605      	mov	r5, r0
 8005718:	f6bf ae53 	bge.w	80053c2 <__ieee754_rem_pio2+0x7a>
 800571c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005720:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005724:	e9c4 2300 	strd	r2, r3, [r4]
 8005728:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800572c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005730:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005734:	e740      	b.n	80055b8 <__ieee754_rem_pio2+0x270>
 8005736:	bf00      	nop
 8005738:	41700000 	.word	0x41700000
 800573c:	080060a8 	.word	0x080060a8

08005740 <fabs>:
 8005740:	ec51 0b10 	vmov	r0, r1, d0
 8005744:	4602      	mov	r2, r0
 8005746:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800574a:	ec43 2b10 	vmov	d0, r2, r3
 800574e:	4770      	bx	lr

08005750 <__kernel_rem_pio2>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	ed2d 8b02 	vpush	{d8}
 8005758:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800575c:	f112 0f14 	cmn.w	r2, #20
 8005760:	9306      	str	r3, [sp, #24]
 8005762:	9104      	str	r1, [sp, #16]
 8005764:	4bbe      	ldr	r3, [pc, #760]	@ (8005a60 <__kernel_rem_pio2+0x310>)
 8005766:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005768:	9008      	str	r0, [sp, #32]
 800576a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	9b06      	ldr	r3, [sp, #24]
 8005772:	f103 33ff 	add.w	r3, r3, #4294967295
 8005776:	bfa8      	it	ge
 8005778:	1ed4      	subge	r4, r2, #3
 800577a:	9305      	str	r3, [sp, #20]
 800577c:	bfb2      	itee	lt
 800577e:	2400      	movlt	r4, #0
 8005780:	2318      	movge	r3, #24
 8005782:	fb94 f4f3 	sdivge	r4, r4, r3
 8005786:	f06f 0317 	mvn.w	r3, #23
 800578a:	fb04 3303 	mla	r3, r4, r3, r3
 800578e:	eb03 0b02 	add.w	fp, r3, r2
 8005792:	9b00      	ldr	r3, [sp, #0]
 8005794:	9a05      	ldr	r2, [sp, #20]
 8005796:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005a50 <__kernel_rem_pio2+0x300>
 800579a:	eb03 0802 	add.w	r8, r3, r2
 800579e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80057a0:	1aa7      	subs	r7, r4, r2
 80057a2:	ae20      	add	r6, sp, #128	@ 0x80
 80057a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80057a8:	2500      	movs	r5, #0
 80057aa:	4545      	cmp	r5, r8
 80057ac:	dd13      	ble.n	80057d6 <__kernel_rem_pio2+0x86>
 80057ae:	9b06      	ldr	r3, [sp, #24]
 80057b0:	aa20      	add	r2, sp, #128	@ 0x80
 80057b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80057b6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80057ba:	f04f 0800 	mov.w	r8, #0
 80057be:	9b00      	ldr	r3, [sp, #0]
 80057c0:	4598      	cmp	r8, r3
 80057c2:	dc31      	bgt.n	8005828 <__kernel_rem_pio2+0xd8>
 80057c4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005a50 <__kernel_rem_pio2+0x300>
 80057c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80057d0:	462f      	mov	r7, r5
 80057d2:	2600      	movs	r6, #0
 80057d4:	e01b      	b.n	800580e <__kernel_rem_pio2+0xbe>
 80057d6:	42ef      	cmn	r7, r5
 80057d8:	d407      	bmi.n	80057ea <__kernel_rem_pio2+0x9a>
 80057da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80057de:	f7fa fe45 	bl	800046c <__aeabi_i2d>
 80057e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80057e6:	3501      	adds	r5, #1
 80057e8:	e7df      	b.n	80057aa <__kernel_rem_pio2+0x5a>
 80057ea:	ec51 0b18 	vmov	r0, r1, d8
 80057ee:	e7f8      	b.n	80057e2 <__kernel_rem_pio2+0x92>
 80057f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80057f8:	f7fa fea2 	bl	8000540 <__aeabi_dmul>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005804:	f7fa fce6 	bl	80001d4 <__adddf3>
 8005808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800580c:	3601      	adds	r6, #1
 800580e:	9b05      	ldr	r3, [sp, #20]
 8005810:	429e      	cmp	r6, r3
 8005812:	f1a7 0708 	sub.w	r7, r7, #8
 8005816:	ddeb      	ble.n	80057f0 <__kernel_rem_pio2+0xa0>
 8005818:	ed9d 7b02 	vldr	d7, [sp, #8]
 800581c:	f108 0801 	add.w	r8, r8, #1
 8005820:	ecaa 7b02 	vstmia	sl!, {d7}
 8005824:	3508      	adds	r5, #8
 8005826:	e7ca      	b.n	80057be <__kernel_rem_pio2+0x6e>
 8005828:	9b00      	ldr	r3, [sp, #0]
 800582a:	f8dd 8000 	ldr.w	r8, [sp]
 800582e:	aa0c      	add	r2, sp, #48	@ 0x30
 8005830:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005834:	930a      	str	r3, [sp, #40]	@ 0x28
 8005836:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005838:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800583c:	9309      	str	r3, [sp, #36]	@ 0x24
 800583e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005842:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005844:	ab98      	add	r3, sp, #608	@ 0x260
 8005846:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800584a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800584e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005852:	ac0c      	add	r4, sp, #48	@ 0x30
 8005854:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005856:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800585a:	46a1      	mov	r9, r4
 800585c:	46c2      	mov	sl, r8
 800585e:	f1ba 0f00 	cmp.w	sl, #0
 8005862:	f1a5 0508 	sub.w	r5, r5, #8
 8005866:	dc77      	bgt.n	8005958 <__kernel_rem_pio2+0x208>
 8005868:	4658      	mov	r0, fp
 800586a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800586e:	f000 fac7 	bl	8005e00 <scalbn>
 8005872:	ec57 6b10 	vmov	r6, r7, d0
 8005876:	2200      	movs	r2, #0
 8005878:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800587c:	4630      	mov	r0, r6
 800587e:	4639      	mov	r1, r7
 8005880:	f7fa fe5e 	bl	8000540 <__aeabi_dmul>
 8005884:	ec41 0b10 	vmov	d0, r0, r1
 8005888:	f000 fb3a 	bl	8005f00 <floor>
 800588c:	4b75      	ldr	r3, [pc, #468]	@ (8005a64 <__kernel_rem_pio2+0x314>)
 800588e:	ec51 0b10 	vmov	r0, r1, d0
 8005892:	2200      	movs	r2, #0
 8005894:	f7fa fe54 	bl	8000540 <__aeabi_dmul>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4630      	mov	r0, r6
 800589e:	4639      	mov	r1, r7
 80058a0:	f7fa fc96 	bl	80001d0 <__aeabi_dsub>
 80058a4:	460f      	mov	r7, r1
 80058a6:	4606      	mov	r6, r0
 80058a8:	f7fb f8e4 	bl	8000a74 <__aeabi_d2iz>
 80058ac:	9002      	str	r0, [sp, #8]
 80058ae:	f7fa fddd 	bl	800046c <__aeabi_i2d>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4630      	mov	r0, r6
 80058b8:	4639      	mov	r1, r7
 80058ba:	f7fa fc89 	bl	80001d0 <__aeabi_dsub>
 80058be:	f1bb 0f00 	cmp.w	fp, #0
 80058c2:	4606      	mov	r6, r0
 80058c4:	460f      	mov	r7, r1
 80058c6:	dd6c      	ble.n	80059a2 <__kernel_rem_pio2+0x252>
 80058c8:	f108 31ff 	add.w	r1, r8, #4294967295
 80058cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80058ce:	9d02      	ldr	r5, [sp, #8]
 80058d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058d4:	f1cb 0018 	rsb	r0, fp, #24
 80058d8:	fa43 f200 	asr.w	r2, r3, r0
 80058dc:	4415      	add	r5, r2
 80058de:	4082      	lsls	r2, r0
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	aa0c      	add	r2, sp, #48	@ 0x30
 80058e4:	9502      	str	r5, [sp, #8]
 80058e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80058ea:	f1cb 0217 	rsb	r2, fp, #23
 80058ee:	fa43 f902 	asr.w	r9, r3, r2
 80058f2:	f1b9 0f00 	cmp.w	r9, #0
 80058f6:	dd64      	ble.n	80059c2 <__kernel_rem_pio2+0x272>
 80058f8:	9b02      	ldr	r3, [sp, #8]
 80058fa:	2200      	movs	r2, #0
 80058fc:	3301      	adds	r3, #1
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	4615      	mov	r5, r2
 8005902:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005906:	4590      	cmp	r8, r2
 8005908:	f300 80b8 	bgt.w	8005a7c <__kernel_rem_pio2+0x32c>
 800590c:	f1bb 0f00 	cmp.w	fp, #0
 8005910:	dd07      	ble.n	8005922 <__kernel_rem_pio2+0x1d2>
 8005912:	f1bb 0f01 	cmp.w	fp, #1
 8005916:	f000 80bf 	beq.w	8005a98 <__kernel_rem_pio2+0x348>
 800591a:	f1bb 0f02 	cmp.w	fp, #2
 800591e:	f000 80c6 	beq.w	8005aae <__kernel_rem_pio2+0x35e>
 8005922:	f1b9 0f02 	cmp.w	r9, #2
 8005926:	d14c      	bne.n	80059c2 <__kernel_rem_pio2+0x272>
 8005928:	4632      	mov	r2, r6
 800592a:	463b      	mov	r3, r7
 800592c:	494e      	ldr	r1, [pc, #312]	@ (8005a68 <__kernel_rem_pio2+0x318>)
 800592e:	2000      	movs	r0, #0
 8005930:	f7fa fc4e 	bl	80001d0 <__aeabi_dsub>
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	2d00      	cmp	r5, #0
 800593a:	d042      	beq.n	80059c2 <__kernel_rem_pio2+0x272>
 800593c:	4658      	mov	r0, fp
 800593e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005a58 <__kernel_rem_pio2+0x308>
 8005942:	f000 fa5d 	bl	8005e00 <scalbn>
 8005946:	4630      	mov	r0, r6
 8005948:	4639      	mov	r1, r7
 800594a:	ec53 2b10 	vmov	r2, r3, d0
 800594e:	f7fa fc3f 	bl	80001d0 <__aeabi_dsub>
 8005952:	4606      	mov	r6, r0
 8005954:	460f      	mov	r7, r1
 8005956:	e034      	b.n	80059c2 <__kernel_rem_pio2+0x272>
 8005958:	4b44      	ldr	r3, [pc, #272]	@ (8005a6c <__kernel_rem_pio2+0x31c>)
 800595a:	2200      	movs	r2, #0
 800595c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005960:	f7fa fdee 	bl	8000540 <__aeabi_dmul>
 8005964:	f7fb f886 	bl	8000a74 <__aeabi_d2iz>
 8005968:	f7fa fd80 	bl	800046c <__aeabi_i2d>
 800596c:	4b40      	ldr	r3, [pc, #256]	@ (8005a70 <__kernel_rem_pio2+0x320>)
 800596e:	2200      	movs	r2, #0
 8005970:	4606      	mov	r6, r0
 8005972:	460f      	mov	r7, r1
 8005974:	f7fa fde4 	bl	8000540 <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005980:	f7fa fc26 	bl	80001d0 <__aeabi_dsub>
 8005984:	f7fb f876 	bl	8000a74 <__aeabi_d2iz>
 8005988:	e9d5 2300 	ldrd	r2, r3, [r5]
 800598c:	f849 0b04 	str.w	r0, [r9], #4
 8005990:	4639      	mov	r1, r7
 8005992:	4630      	mov	r0, r6
 8005994:	f7fa fc1e 	bl	80001d4 <__adddf3>
 8005998:	f10a 3aff 	add.w	sl, sl, #4294967295
 800599c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a0:	e75d      	b.n	800585e <__kernel_rem_pio2+0x10e>
 80059a2:	d107      	bne.n	80059b4 <__kernel_rem_pio2+0x264>
 80059a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80059a8:	aa0c      	add	r2, sp, #48	@ 0x30
 80059aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80059b2:	e79e      	b.n	80058f2 <__kernel_rem_pio2+0x1a2>
 80059b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005a74 <__kernel_rem_pio2+0x324>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	f7fb f848 	bl	8000a4c <__aeabi_dcmpge>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d143      	bne.n	8005a48 <__kernel_rem_pio2+0x2f8>
 80059c0:	4681      	mov	r9, r0
 80059c2:	2200      	movs	r2, #0
 80059c4:	2300      	movs	r3, #0
 80059c6:	4630      	mov	r0, r6
 80059c8:	4639      	mov	r1, r7
 80059ca:	f7fb f821 	bl	8000a10 <__aeabi_dcmpeq>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f000 80bf 	beq.w	8005b52 <__kernel_rem_pio2+0x402>
 80059d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80059d8:	2200      	movs	r2, #0
 80059da:	9900      	ldr	r1, [sp, #0]
 80059dc:	428b      	cmp	r3, r1
 80059de:	da6e      	bge.n	8005abe <__kernel_rem_pio2+0x36e>
 80059e0:	2a00      	cmp	r2, #0
 80059e2:	f000 8089 	beq.w	8005af8 <__kernel_rem_pio2+0x3a8>
 80059e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80059ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80059ec:	f1ab 0b18 	sub.w	fp, fp, #24
 80059f0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f6      	beq.n	80059e6 <__kernel_rem_pio2+0x296>
 80059f8:	4658      	mov	r0, fp
 80059fa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005a58 <__kernel_rem_pio2+0x308>
 80059fe:	f000 f9ff 	bl	8005e00 <scalbn>
 8005a02:	f108 0301 	add.w	r3, r8, #1
 8005a06:	00da      	lsls	r2, r3, #3
 8005a08:	9205      	str	r2, [sp, #20]
 8005a0a:	ec55 4b10 	vmov	r4, r5, d0
 8005a0e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005a10:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005a6c <__kernel_rem_pio2+0x31c>
 8005a14:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005a18:	4646      	mov	r6, r8
 8005a1a:	f04f 0a00 	mov.w	sl, #0
 8005a1e:	2e00      	cmp	r6, #0
 8005a20:	f280 80cf 	bge.w	8005bc2 <__kernel_rem_pio2+0x472>
 8005a24:	4644      	mov	r4, r8
 8005a26:	2c00      	cmp	r4, #0
 8005a28:	f2c0 80fd 	blt.w	8005c26 <__kernel_rem_pio2+0x4d6>
 8005a2c:	4b12      	ldr	r3, [pc, #72]	@ (8005a78 <__kernel_rem_pio2+0x328>)
 8005a2e:	461f      	mov	r7, r3
 8005a30:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005a32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a36:	9306      	str	r3, [sp, #24]
 8005a38:	f04f 0a00 	mov.w	sl, #0
 8005a3c:	f04f 0b00 	mov.w	fp, #0
 8005a40:	2600      	movs	r6, #0
 8005a42:	eba8 0504 	sub.w	r5, r8, r4
 8005a46:	e0e2      	b.n	8005c0e <__kernel_rem_pio2+0x4be>
 8005a48:	f04f 0902 	mov.w	r9, #2
 8005a4c:	e754      	b.n	80058f8 <__kernel_rem_pio2+0x1a8>
 8005a4e:	bf00      	nop
	...
 8005a5c:	3ff00000 	.word	0x3ff00000
 8005a60:	080061f0 	.word	0x080061f0
 8005a64:	40200000 	.word	0x40200000
 8005a68:	3ff00000 	.word	0x3ff00000
 8005a6c:	3e700000 	.word	0x3e700000
 8005a70:	41700000 	.word	0x41700000
 8005a74:	3fe00000 	.word	0x3fe00000
 8005a78:	080061b0 	.word	0x080061b0
 8005a7c:	f854 3b04 	ldr.w	r3, [r4], #4
 8005a80:	b945      	cbnz	r5, 8005a94 <__kernel_rem_pio2+0x344>
 8005a82:	b123      	cbz	r3, 8005a8e <__kernel_rem_pio2+0x33e>
 8005a84:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005a88:	f844 3c04 	str.w	r3, [r4, #-4]
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	3201      	adds	r2, #1
 8005a90:	461d      	mov	r5, r3
 8005a92:	e738      	b.n	8005906 <__kernel_rem_pio2+0x1b6>
 8005a94:	1acb      	subs	r3, r1, r3
 8005a96:	e7f7      	b.n	8005a88 <__kernel_rem_pio2+0x338>
 8005a98:	f108 32ff 	add.w	r2, r8, #4294967295
 8005a9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005aa6:	a90c      	add	r1, sp, #48	@ 0x30
 8005aa8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005aac:	e739      	b.n	8005922 <__kernel_rem_pio2+0x1d2>
 8005aae:	f108 32ff 	add.w	r2, r8, #4294967295
 8005ab2:	ab0c      	add	r3, sp, #48	@ 0x30
 8005ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005abc:	e7f3      	b.n	8005aa6 <__kernel_rem_pio2+0x356>
 8005abe:	a90c      	add	r1, sp, #48	@ 0x30
 8005ac0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	e787      	b.n	80059da <__kernel_rem_pio2+0x28a>
 8005aca:	3401      	adds	r4, #1
 8005acc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005ad0:	2a00      	cmp	r2, #0
 8005ad2:	d0fa      	beq.n	8005aca <__kernel_rem_pio2+0x37a>
 8005ad4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ad6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005ada:	eb0d 0503 	add.w	r5, sp, r3
 8005ade:	9b06      	ldr	r3, [sp, #24]
 8005ae0:	aa20      	add	r2, sp, #128	@ 0x80
 8005ae2:	4443      	add	r3, r8
 8005ae4:	f108 0701 	add.w	r7, r8, #1
 8005ae8:	3d98      	subs	r5, #152	@ 0x98
 8005aea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005aee:	4444      	add	r4, r8
 8005af0:	42bc      	cmp	r4, r7
 8005af2:	da04      	bge.n	8005afe <__kernel_rem_pio2+0x3ae>
 8005af4:	46a0      	mov	r8, r4
 8005af6:	e6a2      	b.n	800583e <__kernel_rem_pio2+0xee>
 8005af8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005afa:	2401      	movs	r4, #1
 8005afc:	e7e6      	b.n	8005acc <__kernel_rem_pio2+0x37c>
 8005afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b00:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005b04:	f7fa fcb2 	bl	800046c <__aeabi_i2d>
 8005b08:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005dd0 <__kernel_rem_pio2+0x680>
 8005b0c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005b10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b18:	46b2      	mov	sl, r6
 8005b1a:	f04f 0800 	mov.w	r8, #0
 8005b1e:	9b05      	ldr	r3, [sp, #20]
 8005b20:	4598      	cmp	r8, r3
 8005b22:	dd05      	ble.n	8005b30 <__kernel_rem_pio2+0x3e0>
 8005b24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b28:	3701      	adds	r7, #1
 8005b2a:	eca5 7b02 	vstmia	r5!, {d7}
 8005b2e:	e7df      	b.n	8005af0 <__kernel_rem_pio2+0x3a0>
 8005b30:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005b34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005b38:	f7fa fd02 	bl	8000540 <__aeabi_dmul>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b44:	f7fa fb46 	bl	80001d4 <__adddf3>
 8005b48:	f108 0801 	add.w	r8, r8, #1
 8005b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b50:	e7e5      	b.n	8005b1e <__kernel_rem_pio2+0x3ce>
 8005b52:	f1cb 0000 	rsb	r0, fp, #0
 8005b56:	ec47 6b10 	vmov	d0, r6, r7
 8005b5a:	f000 f951 	bl	8005e00 <scalbn>
 8005b5e:	ec55 4b10 	vmov	r4, r5, d0
 8005b62:	4b9d      	ldr	r3, [pc, #628]	@ (8005dd8 <__kernel_rem_pio2+0x688>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	4620      	mov	r0, r4
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f7fa ff6f 	bl	8000a4c <__aeabi_dcmpge>
 8005b6e:	b300      	cbz	r0, 8005bb2 <__kernel_rem_pio2+0x462>
 8005b70:	4b9a      	ldr	r3, [pc, #616]	@ (8005ddc <__kernel_rem_pio2+0x68c>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	4620      	mov	r0, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	f7fa fce2 	bl	8000540 <__aeabi_dmul>
 8005b7c:	f7fa ff7a 	bl	8000a74 <__aeabi_d2iz>
 8005b80:	4606      	mov	r6, r0
 8005b82:	f7fa fc73 	bl	800046c <__aeabi_i2d>
 8005b86:	4b94      	ldr	r3, [pc, #592]	@ (8005dd8 <__kernel_rem_pio2+0x688>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f7fa fcd9 	bl	8000540 <__aeabi_dmul>
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4602      	mov	r2, r0
 8005b92:	4629      	mov	r1, r5
 8005b94:	4620      	mov	r0, r4
 8005b96:	f7fa fb1b 	bl	80001d0 <__aeabi_dsub>
 8005b9a:	f7fa ff6b 	bl	8000a74 <__aeabi_d2iz>
 8005b9e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005ba0:	f10b 0b18 	add.w	fp, fp, #24
 8005ba4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005ba8:	f108 0801 	add.w	r8, r8, #1
 8005bac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005bb0:	e722      	b.n	80059f8 <__kernel_rem_pio2+0x2a8>
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	f7fa ff5d 	bl	8000a74 <__aeabi_d2iz>
 8005bba:	ab0c      	add	r3, sp, #48	@ 0x30
 8005bbc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005bc0:	e71a      	b.n	80059f8 <__kernel_rem_pio2+0x2a8>
 8005bc2:	ab0c      	add	r3, sp, #48	@ 0x30
 8005bc4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005bc8:	f7fa fc50 	bl	800046c <__aeabi_i2d>
 8005bcc:	4622      	mov	r2, r4
 8005bce:	462b      	mov	r3, r5
 8005bd0:	f7fa fcb6 	bl	8000540 <__aeabi_dmul>
 8005bd4:	4652      	mov	r2, sl
 8005bd6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005bda:	465b      	mov	r3, fp
 8005bdc:	4620      	mov	r0, r4
 8005bde:	4629      	mov	r1, r5
 8005be0:	f7fa fcae 	bl	8000540 <__aeabi_dmul>
 8005be4:	3e01      	subs	r6, #1
 8005be6:	4604      	mov	r4, r0
 8005be8:	460d      	mov	r5, r1
 8005bea:	e718      	b.n	8005a1e <__kernel_rem_pio2+0x2ce>
 8005bec:	9906      	ldr	r1, [sp, #24]
 8005bee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005bf2:	9106      	str	r1, [sp, #24]
 8005bf4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005bf8:	f7fa fca2 	bl	8000540 <__aeabi_dmul>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4650      	mov	r0, sl
 8005c02:	4659      	mov	r1, fp
 8005c04:	f7fa fae6 	bl	80001d4 <__adddf3>
 8005c08:	3601      	adds	r6, #1
 8005c0a:	4682      	mov	sl, r0
 8005c0c:	468b      	mov	fp, r1
 8005c0e:	9b00      	ldr	r3, [sp, #0]
 8005c10:	429e      	cmp	r6, r3
 8005c12:	dc01      	bgt.n	8005c18 <__kernel_rem_pio2+0x4c8>
 8005c14:	42b5      	cmp	r5, r6
 8005c16:	dae9      	bge.n	8005bec <__kernel_rem_pio2+0x49c>
 8005c18:	ab48      	add	r3, sp, #288	@ 0x120
 8005c1a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005c1e:	e9c5 ab00 	strd	sl, fp, [r5]
 8005c22:	3c01      	subs	r4, #1
 8005c24:	e6ff      	b.n	8005a26 <__kernel_rem_pio2+0x2d6>
 8005c26:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	dc0b      	bgt.n	8005c44 <__kernel_rem_pio2+0x4f4>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dc39      	bgt.n	8005ca4 <__kernel_rem_pio2+0x554>
 8005c30:	d05d      	beq.n	8005cee <__kernel_rem_pio2+0x59e>
 8005c32:	9b02      	ldr	r3, [sp, #8]
 8005c34:	f003 0007 	and.w	r0, r3, #7
 8005c38:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005c3c:	ecbd 8b02 	vpop	{d8}
 8005c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c44:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d1f3      	bne.n	8005c32 <__kernel_rem_pio2+0x4e2>
 8005c4a:	9b05      	ldr	r3, [sp, #20]
 8005c4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005c50:	eb0d 0403 	add.w	r4, sp, r3
 8005c54:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005c58:	4625      	mov	r5, r4
 8005c5a:	46c2      	mov	sl, r8
 8005c5c:	f1ba 0f00 	cmp.w	sl, #0
 8005c60:	f1a5 0508 	sub.w	r5, r5, #8
 8005c64:	dc6b      	bgt.n	8005d3e <__kernel_rem_pio2+0x5ee>
 8005c66:	4645      	mov	r5, r8
 8005c68:	2d01      	cmp	r5, #1
 8005c6a:	f1a4 0408 	sub.w	r4, r4, #8
 8005c6e:	f300 8087 	bgt.w	8005d80 <__kernel_rem_pio2+0x630>
 8005c72:	9c05      	ldr	r4, [sp, #20]
 8005c74:	ab48      	add	r3, sp, #288	@ 0x120
 8005c76:	441c      	add	r4, r3
 8005c78:	2000      	movs	r0, #0
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f1b8 0f01 	cmp.w	r8, #1
 8005c80:	f300 809c 	bgt.w	8005dbc <__kernel_rem_pio2+0x66c>
 8005c84:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005c88:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005c8c:	f1b9 0f00 	cmp.w	r9, #0
 8005c90:	f040 80a6 	bne.w	8005de0 <__kernel_rem_pio2+0x690>
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	e9c3 7800 	strd	r7, r8, [r3]
 8005c9a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005c9e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005ca2:	e7c6      	b.n	8005c32 <__kernel_rem_pio2+0x4e2>
 8005ca4:	9d05      	ldr	r5, [sp, #20]
 8005ca6:	ab48      	add	r3, sp, #288	@ 0x120
 8005ca8:	441d      	add	r5, r3
 8005caa:	4644      	mov	r4, r8
 8005cac:	2000      	movs	r0, #0
 8005cae:	2100      	movs	r1, #0
 8005cb0:	2c00      	cmp	r4, #0
 8005cb2:	da35      	bge.n	8005d20 <__kernel_rem_pio2+0x5d0>
 8005cb4:	f1b9 0f00 	cmp.w	r9, #0
 8005cb8:	d038      	beq.n	8005d2c <__kernel_rem_pio2+0x5dc>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cc0:	9c04      	ldr	r4, [sp, #16]
 8005cc2:	e9c4 2300 	strd	r2, r3, [r4]
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005cce:	f7fa fa7f 	bl	80001d0 <__aeabi_dsub>
 8005cd2:	ad4a      	add	r5, sp, #296	@ 0x128
 8005cd4:	2401      	movs	r4, #1
 8005cd6:	45a0      	cmp	r8, r4
 8005cd8:	da2b      	bge.n	8005d32 <__kernel_rem_pio2+0x5e2>
 8005cda:	f1b9 0f00 	cmp.w	r9, #0
 8005cde:	d002      	beq.n	8005ce6 <__kernel_rem_pio2+0x596>
 8005ce0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	9b04      	ldr	r3, [sp, #16]
 8005ce8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005cec:	e7a1      	b.n	8005c32 <__kernel_rem_pio2+0x4e2>
 8005cee:	9c05      	ldr	r4, [sp, #20]
 8005cf0:	ab48      	add	r3, sp, #288	@ 0x120
 8005cf2:	441c      	add	r4, r3
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	f1b8 0f00 	cmp.w	r8, #0
 8005cfc:	da09      	bge.n	8005d12 <__kernel_rem_pio2+0x5c2>
 8005cfe:	f1b9 0f00 	cmp.w	r9, #0
 8005d02:	d002      	beq.n	8005d0a <__kernel_rem_pio2+0x5ba>
 8005d04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d08:	4619      	mov	r1, r3
 8005d0a:	9b04      	ldr	r3, [sp, #16]
 8005d0c:	e9c3 0100 	strd	r0, r1, [r3]
 8005d10:	e78f      	b.n	8005c32 <__kernel_rem_pio2+0x4e2>
 8005d12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d16:	f7fa fa5d 	bl	80001d4 <__adddf3>
 8005d1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d1e:	e7eb      	b.n	8005cf8 <__kernel_rem_pio2+0x5a8>
 8005d20:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005d24:	f7fa fa56 	bl	80001d4 <__adddf3>
 8005d28:	3c01      	subs	r4, #1
 8005d2a:	e7c1      	b.n	8005cb0 <__kernel_rem_pio2+0x560>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	e7c6      	b.n	8005cc0 <__kernel_rem_pio2+0x570>
 8005d32:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005d36:	f7fa fa4d 	bl	80001d4 <__adddf3>
 8005d3a:	3401      	adds	r4, #1
 8005d3c:	e7cb      	b.n	8005cd6 <__kernel_rem_pio2+0x586>
 8005d3e:	ed95 7b00 	vldr	d7, [r5]
 8005d42:	ed8d 7b00 	vstr	d7, [sp]
 8005d46:	ed95 7b02 	vldr	d7, [r5, #8]
 8005d4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d4e:	ec53 2b17 	vmov	r2, r3, d7
 8005d52:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005d56:	f7fa fa3d 	bl	80001d4 <__adddf3>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4606      	mov	r6, r0
 8005d60:	460f      	mov	r7, r1
 8005d62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d66:	f7fa fa33 	bl	80001d0 <__aeabi_dsub>
 8005d6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d6e:	f7fa fa31 	bl	80001d4 <__adddf3>
 8005d72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d76:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005d7a:	e9c5 6700 	strd	r6, r7, [r5]
 8005d7e:	e76d      	b.n	8005c5c <__kernel_rem_pio2+0x50c>
 8005d80:	ed94 7b00 	vldr	d7, [r4]
 8005d84:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005d88:	ec51 0b17 	vmov	r0, r1, d7
 8005d8c:	4652      	mov	r2, sl
 8005d8e:	465b      	mov	r3, fp
 8005d90:	ed8d 7b00 	vstr	d7, [sp]
 8005d94:	f7fa fa1e 	bl	80001d4 <__adddf3>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	460f      	mov	r7, r1
 8005da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005da4:	f7fa fa14 	bl	80001d0 <__aeabi_dsub>
 8005da8:	4652      	mov	r2, sl
 8005daa:	465b      	mov	r3, fp
 8005dac:	f7fa fa12 	bl	80001d4 <__adddf3>
 8005db0:	3d01      	subs	r5, #1
 8005db2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005db6:	e9c4 6700 	strd	r6, r7, [r4]
 8005dba:	e755      	b.n	8005c68 <__kernel_rem_pio2+0x518>
 8005dbc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005dc0:	f7fa fa08 	bl	80001d4 <__adddf3>
 8005dc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005dc8:	e758      	b.n	8005c7c <__kernel_rem_pio2+0x52c>
 8005dca:	bf00      	nop
 8005dcc:	f3af 8000 	nop.w
	...
 8005dd8:	41700000 	.word	0x41700000
 8005ddc:	3e700000 	.word	0x3e700000
 8005de0:	9b04      	ldr	r3, [sp, #16]
 8005de2:	9a04      	ldr	r2, [sp, #16]
 8005de4:	601f      	str	r7, [r3, #0]
 8005de6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005dea:	605c      	str	r4, [r3, #4]
 8005dec:	609d      	str	r5, [r3, #8]
 8005dee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005df2:	60d3      	str	r3, [r2, #12]
 8005df4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005df8:	6110      	str	r0, [r2, #16]
 8005dfa:	6153      	str	r3, [r2, #20]
 8005dfc:	e719      	b.n	8005c32 <__kernel_rem_pio2+0x4e2>
 8005dfe:	bf00      	nop

08005e00 <scalbn>:
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	ec55 4b10 	vmov	r4, r5, d0
 8005e06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	462b      	mov	r3, r5
 8005e0e:	b991      	cbnz	r1, 8005e36 <scalbn+0x36>
 8005e10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005e14:	4323      	orrs	r3, r4
 8005e16:	d03d      	beq.n	8005e94 <scalbn+0x94>
 8005e18:	4b35      	ldr	r3, [pc, #212]	@ (8005ef0 <scalbn+0xf0>)
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f7fa fb8e 	bl	8000540 <__aeabi_dmul>
 8005e24:	4b33      	ldr	r3, [pc, #204]	@ (8005ef4 <scalbn+0xf4>)
 8005e26:	429e      	cmp	r6, r3
 8005e28:	4604      	mov	r4, r0
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	da0f      	bge.n	8005e4e <scalbn+0x4e>
 8005e2e:	a328      	add	r3, pc, #160	@ (adr r3, 8005ed0 <scalbn+0xd0>)
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	e01e      	b.n	8005e74 <scalbn+0x74>
 8005e36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005e3a:	4291      	cmp	r1, r2
 8005e3c:	d10b      	bne.n	8005e56 <scalbn+0x56>
 8005e3e:	4622      	mov	r2, r4
 8005e40:	4620      	mov	r0, r4
 8005e42:	4629      	mov	r1, r5
 8005e44:	f7fa f9c6 	bl	80001d4 <__adddf3>
 8005e48:	4604      	mov	r4, r0
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	e022      	b.n	8005e94 <scalbn+0x94>
 8005e4e:	460b      	mov	r3, r1
 8005e50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005e54:	3936      	subs	r1, #54	@ 0x36
 8005e56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005e5a:	4296      	cmp	r6, r2
 8005e5c:	dd0d      	ble.n	8005e7a <scalbn+0x7a>
 8005e5e:	2d00      	cmp	r5, #0
 8005e60:	a11d      	add	r1, pc, #116	@ (adr r1, 8005ed8 <scalbn+0xd8>)
 8005e62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e66:	da02      	bge.n	8005e6e <scalbn+0x6e>
 8005e68:	a11d      	add	r1, pc, #116	@ (adr r1, 8005ee0 <scalbn+0xe0>)
 8005e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e6e:	a31a      	add	r3, pc, #104	@ (adr r3, 8005ed8 <scalbn+0xd8>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa fb64 	bl	8000540 <__aeabi_dmul>
 8005e78:	e7e6      	b.n	8005e48 <scalbn+0x48>
 8005e7a:	1872      	adds	r2, r6, r1
 8005e7c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005e80:	428a      	cmp	r2, r1
 8005e82:	dcec      	bgt.n	8005e5e <scalbn+0x5e>
 8005e84:	2a00      	cmp	r2, #0
 8005e86:	dd08      	ble.n	8005e9a <scalbn+0x9a>
 8005e88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005e8c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005e90:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e94:	ec45 4b10 	vmov	d0, r4, r5
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005e9e:	da08      	bge.n	8005eb2 <scalbn+0xb2>
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	a10b      	add	r1, pc, #44	@ (adr r1, 8005ed0 <scalbn+0xd0>)
 8005ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ea8:	dac1      	bge.n	8005e2e <scalbn+0x2e>
 8005eaa:	a10f      	add	r1, pc, #60	@ (adr r1, 8005ee8 <scalbn+0xe8>)
 8005eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eb0:	e7bd      	b.n	8005e2e <scalbn+0x2e>
 8005eb2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005eb6:	3236      	adds	r2, #54	@ 0x36
 8005eb8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005ebc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef8 <scalbn+0xf8>)
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	e7d4      	b.n	8005e74 <scalbn+0x74>
 8005eca:	bf00      	nop
 8005ecc:	f3af 8000 	nop.w
 8005ed0:	c2f8f359 	.word	0xc2f8f359
 8005ed4:	01a56e1f 	.word	0x01a56e1f
 8005ed8:	8800759c 	.word	0x8800759c
 8005edc:	7e37e43c 	.word	0x7e37e43c
 8005ee0:	8800759c 	.word	0x8800759c
 8005ee4:	fe37e43c 	.word	0xfe37e43c
 8005ee8:	c2f8f359 	.word	0xc2f8f359
 8005eec:	81a56e1f 	.word	0x81a56e1f
 8005ef0:	43500000 	.word	0x43500000
 8005ef4:	ffff3cb0 	.word	0xffff3cb0
 8005ef8:	3c900000 	.word	0x3c900000
 8005efc:	00000000 	.word	0x00000000

08005f00 <floor>:
 8005f00:	ec51 0b10 	vmov	r0, r1, d0
 8005f04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005f10:	2e13      	cmp	r6, #19
 8005f12:	460c      	mov	r4, r1
 8005f14:	4605      	mov	r5, r0
 8005f16:	4680      	mov	r8, r0
 8005f18:	dc34      	bgt.n	8005f84 <floor+0x84>
 8005f1a:	2e00      	cmp	r6, #0
 8005f1c:	da17      	bge.n	8005f4e <floor+0x4e>
 8005f1e:	a332      	add	r3, pc, #200	@ (adr r3, 8005fe8 <floor+0xe8>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa f956 	bl	80001d4 <__adddf3>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f7fa fd98 	bl	8000a60 <__aeabi_dcmpgt>
 8005f30:	b150      	cbz	r0, 8005f48 <floor+0x48>
 8005f32:	2c00      	cmp	r4, #0
 8005f34:	da55      	bge.n	8005fe2 <floor+0xe2>
 8005f36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005f3a:	432c      	orrs	r4, r5
 8005f3c:	2500      	movs	r5, #0
 8005f3e:	42ac      	cmp	r4, r5
 8005f40:	4c2b      	ldr	r4, [pc, #172]	@ (8005ff0 <floor+0xf0>)
 8005f42:	bf08      	it	eq
 8005f44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	e023      	b.n	8005f96 <floor+0x96>
 8005f4e:	4f29      	ldr	r7, [pc, #164]	@ (8005ff4 <floor+0xf4>)
 8005f50:	4137      	asrs	r7, r6
 8005f52:	ea01 0307 	and.w	r3, r1, r7
 8005f56:	4303      	orrs	r3, r0
 8005f58:	d01d      	beq.n	8005f96 <floor+0x96>
 8005f5a:	a323      	add	r3, pc, #140	@ (adr r3, 8005fe8 <floor+0xe8>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa f938 	bl	80001d4 <__adddf3>
 8005f64:	2200      	movs	r2, #0
 8005f66:	2300      	movs	r3, #0
 8005f68:	f7fa fd7a 	bl	8000a60 <__aeabi_dcmpgt>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d0eb      	beq.n	8005f48 <floor+0x48>
 8005f70:	2c00      	cmp	r4, #0
 8005f72:	bfbe      	ittt	lt
 8005f74:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005f78:	4133      	asrlt	r3, r6
 8005f7a:	18e4      	addlt	r4, r4, r3
 8005f7c:	ea24 0407 	bic.w	r4, r4, r7
 8005f80:	2500      	movs	r5, #0
 8005f82:	e7e1      	b.n	8005f48 <floor+0x48>
 8005f84:	2e33      	cmp	r6, #51	@ 0x33
 8005f86:	dd0a      	ble.n	8005f9e <floor+0x9e>
 8005f88:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005f8c:	d103      	bne.n	8005f96 <floor+0x96>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	f7fa f91f 	bl	80001d4 <__adddf3>
 8005f96:	ec41 0b10 	vmov	d0, r0, r1
 8005f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f9e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005fa2:	f04f 37ff 	mov.w	r7, #4294967295
 8005fa6:	40df      	lsrs	r7, r3
 8005fa8:	4207      	tst	r7, r0
 8005faa:	d0f4      	beq.n	8005f96 <floor+0x96>
 8005fac:	a30e      	add	r3, pc, #56	@ (adr r3, 8005fe8 <floor+0xe8>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa f90f 	bl	80001d4 <__adddf3>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f7fa fd51 	bl	8000a60 <__aeabi_dcmpgt>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d0c2      	beq.n	8005f48 <floor+0x48>
 8005fc2:	2c00      	cmp	r4, #0
 8005fc4:	da0a      	bge.n	8005fdc <floor+0xdc>
 8005fc6:	2e14      	cmp	r6, #20
 8005fc8:	d101      	bne.n	8005fce <floor+0xce>
 8005fca:	3401      	adds	r4, #1
 8005fcc:	e006      	b.n	8005fdc <floor+0xdc>
 8005fce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	40b3      	lsls	r3, r6
 8005fd6:	441d      	add	r5, r3
 8005fd8:	4545      	cmp	r5, r8
 8005fda:	d3f6      	bcc.n	8005fca <floor+0xca>
 8005fdc:	ea25 0507 	bic.w	r5, r5, r7
 8005fe0:	e7b2      	b.n	8005f48 <floor+0x48>
 8005fe2:	2500      	movs	r5, #0
 8005fe4:	462c      	mov	r4, r5
 8005fe6:	e7af      	b.n	8005f48 <floor+0x48>
 8005fe8:	8800759c 	.word	0x8800759c
 8005fec:	7e37e43c 	.word	0x7e37e43c
 8005ff0:	bff00000 	.word	0xbff00000
 8005ff4:	000fffff 	.word	0x000fffff

08005ff8 <_init>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr

08006004 <_fini>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	bf00      	nop
 8006008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600a:	bc08      	pop	{r3}
 800600c:	469e      	mov	lr, r3
 800600e:	4770      	bx	lr
