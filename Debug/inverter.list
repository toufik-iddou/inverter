
inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d78  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004f00  08004f00  00005f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f0  080050f0  00007098  2**0
                  CONTENTS
  4 .ARM          00000008  080050f0  080050f0  000060f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f8  080050f8  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f8  080050f8  000060f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050fc  080050fc  000060fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005100  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007098  2**0
                  CONTENTS
 10 .bss          0000095c  20000098  20000098  00007098  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200009f4  200009f4  00007098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001368a  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038bc  00000000  00000000  0001a752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  0001e010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc0  00000000  00000000  0001edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024838  00000000  00000000  0001fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019890  00000000  00000000  000445c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd28a  00000000  00000000  0005de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013b0da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029b4  00000000  00000000  0013b120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00007951  00000000  00000000  0013dad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000043  00000000  00000000  00145425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ee8 	.word	0x08004ee8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08004ee8 	.word	0x08004ee8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <ADC_Init>:
ADC_HandleTypeDef hadc1;

static void ADC1_Init(void);


void ADC_Init(void){
 8000e80:	b500      	push	{lr}

	  ADC_ChannelConfTypeDef sConfig = {0};

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8000e82:	4829      	ldr	r0, [pc, #164]	@ (8000f28 <ADC_Init+0xa8>)
 8000e84:	4929      	ldr	r1, [pc, #164]	@ (8000f2c <ADC_Init+0xac>)
 8000e86:	6001      	str	r1, [r0, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
	  hadc1.Init.ScanConvMode = ENABLE;
 8000e88:	2201      	movs	r2, #1
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	2300      	movs	r3, #0
void ADC_Init(void){
 8000e8c:	b085      	sub	sp, #20
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc1.Init.NbrOfConversion = 3;
	  hadc1.Init.DMAContinuousRequests = DISABLE;
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8e:	e9c0 2204 	strd	r2, r2, [r0, #16]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e92:	4a27      	ldr	r2, [pc, #156]	@ (8000f30 <ADC_Init+0xb0>)
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e94:	7603      	strb	r3, [r0, #24]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	e9cd 3300 	strd	r3, r3, [sp]
 8000e9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9e:	f880 3020 	strb.w	r3, [r0, #32]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea2:	60c3      	str	r3, [r0, #12]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea4:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
	  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000eae:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8000eb2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
	  hadc1.Init.NbrOfConversion = 3;
 8000eb6:	2303      	movs	r3, #3
	  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000eb8:	e9c0 c101 	strd	ip, r1, [r0, #4]
	  hadc1.Init.NbrOfConversion = 3;
 8000ebc:	61c3      	str	r3, [r0, #28]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	f000 ff39 	bl	8001d34 <HAL_ADC_Init>
 8000ec2:	b9f8      	cbnz	r0, 8000f04 <ADC_Init+0x84>
	    Error_Handler();
	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000ec4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8000f20 <ADC_Init+0xa0>
	  sConfig.Rank = 1;
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ec8:	2300      	movs	r3, #0
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eca:	4817      	ldr	r0, [pc, #92]	@ (8000f28 <ADC_Init+0xa8>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ecc:	9302      	str	r3, [sp, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ece:	4669      	mov	r1, sp
	  sConfig.Channel = ADC_CHANNEL_1;
 8000ed0:	ed8d 7b00 	vstr	d7, [sp]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed4:	f001 f8d4 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000ed8:	b9f8      	cbnz	r0, 8000f1a <ADC_Init+0x9a>
	    Error_Handler();
	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8000eda:	2202      	movs	r2, #2
 8000edc:	2302      	movs	r3, #2
	  sConfig.Rank = 2;
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ede:	4812      	ldr	r0, [pc, #72]	@ (8000f28 <ADC_Init+0xa8>)
 8000ee0:	4669      	mov	r1, sp
	  sConfig.Channel = ADC_CHANNEL_2;
 8000ee2:	e9cd 2300 	strd	r2, r3, [sp]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	f001 f8cb 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000eea:	b998      	cbnz	r0, 8000f14 <ADC_Init+0x94>
	    Error_Handler();
	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8000eec:	2206      	movs	r2, #6
 8000eee:	2303      	movs	r3, #3
	  sConfig.Rank = 3;
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef0:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <ADC_Init+0xa8>)
 8000ef2:	4669      	mov	r1, sp
	  sConfig.Channel = ADC_CHANNEL_6;
 8000ef4:	e9cd 2300 	strd	r2, r3, [sp]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef8:	f001 f8c2 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000efc:	b928      	cbnz	r0, 8000f0a <ADC_Init+0x8a>
}
 8000efe:	b005      	add	sp, #20
 8000f00:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 8000f04:	f000 fe9a 	bl	8001c3c <Error_Handler>
 8000f08:	e7dc      	b.n	8000ec4 <ADC_Init+0x44>
	  {
	    Error_Handler();
 8000f0a:	f000 fe97 	bl	8001c3c <Error_Handler>
}
 8000f0e:	b005      	add	sp, #20
 8000f10:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 8000f14:	f000 fe92 	bl	8001c3c <Error_Handler>
 8000f18:	e7e8      	b.n	8000eec <ADC_Init+0x6c>
	    Error_Handler();
 8000f1a:	f000 fe8f 	bl	8001c3c <Error_Handler>
 8000f1e:	e7dc      	b.n	8000eda <ADC_Init+0x5a>
 8000f20:	00000001 	.word	0x00000001
 8000f24:	00000001 	.word	0x00000001
 8000f28:	200000b8 	.word	0x200000b8
 8000f2c:	40012000 	.word	0x40012000
 8000f30:	0f000001 	.word	0x0f000001

08000f34 <ADC_Start>:
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) buffer_adc, ADC_CHANNELS_LENGHT);
 8000f34:	4902      	ldr	r1, [pc, #8]	@ (8000f40 <ADC_Start+0xc>)
 8000f36:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <ADC_Start+0x10>)
 8000f38:	2203      	movs	r2, #3
 8000f3a:	f000 bfa7 	b.w	8001e8c <HAL_ADC_Start_DMA>
 8000f3e:	bf00      	nop
 8000f40:	20000100 	.word	0x20000100
 8000f44:	200000b8 	.word	0x200000b8

08000f48 <System_Clock_Init>:
RTC_HandleTypeDef hrtc;



void System_Clock_Init(void)
{
 8000f48:	b510      	push	{r4, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	2300      	movs	r3, #0
{
 8000f4c:	b094      	sub	sp, #80	@ 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f52:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000f56:	e9cd 3305 	strd	r3, r3, [sp, #20]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4925      	ldr	r1, [pc, #148]	@ (8000ff0 <System_Clock_Init+0xa8>)
 8000f5c:	9301      	str	r3, [sp, #4]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	930c      	str	r3, [sp, #48]	@ 0x30
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	9307      	str	r3, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	6c08      	ldr	r0, [r1, #64]	@ 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	4a23      	ldr	r2, [pc, #140]	@ (8000ff4 <System_Clock_Init+0xac>)
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000f6a:	6408      	str	r0, [r1, #64]	@ 0x40
 8000f6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000f6e:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000f72:	9101      	str	r1, [sp, #4]
 8000f74:	9901      	ldr	r1, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	6813      	ldr	r3, [r2, #0]
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	6813      	ldr	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f82:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000fe8 <System_Clock_Init+0xa0>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2102      	movs	r1, #2
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	9302      	str	r3, [sp, #8]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f8e:	2001      	movs	r0, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000f94:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	e9cd 010d 	strd	r0, r1, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	930f      	str	r3, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000f9e:	23a8      	movs	r3, #168	@ 0xa8
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fa0:	ed8d 7b08 	vstr	d7, [sp, #32]
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000fa4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa8:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	9c02      	ldr	r4, [sp, #8]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f001 fccd 	bl	800294c <HAL_RCC_OscConfig>
 8000fb2:	b990      	cbnz	r0, 8000fda <System_Clock_Init+0x92>
	Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	210f      	movs	r1, #15
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e9cd 1303 	strd	r1, r3, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2400      	movs	r4, #0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fbe:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fc6:	a803      	add	r0, sp, #12
 8000fc8:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fca:	e9cd 4205 	strd	r4, r2, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fce:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd0:	f001 fed2 	bl	8002d78 <HAL_RCC_ClockConfig>
 8000fd4:	b920      	cbnz	r0, 8000fe0 <System_Clock_Init+0x98>
	{
	Error_Handler();
	}
}
 8000fd6:	b014      	add	sp, #80	@ 0x50
 8000fd8:	bd10      	pop	{r4, pc}
	Error_Handler();
 8000fda:	f000 fe2f 	bl	8001c3c <Error_Handler>
 8000fde:	e7e9      	b.n	8000fb4 <System_Clock_Init+0x6c>
	Error_Handler();
 8000fe0:	f000 fe2c 	bl	8001c3c <Error_Handler>
}
 8000fe4:	b014      	add	sp, #80	@ 0x50
 8000fe6:	bd10      	pop	{r4, pc}
 8000fe8:	00000009 	.word	0x00000009
 8000fec:	00010000 	.word	0x00010000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <Real_Time_Clock_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void Real_Time_Clock_Init(void)
{
 8000ff8:	b510      	push	{r4, lr}

	   /** Initialize RTC Only
	   */
	   hrtc.Instance = RTC;
 8000ffa:	480a      	ldr	r0, [pc, #40]	@ (8001024 <Real_Time_Clock_Init+0x2c>)
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8001028 <Real_Time_Clock_Init+0x30>)
	   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ffe:	2300      	movs	r3, #0
	   hrtc.Init.AsynchPrediv = 127;
 8001000:	217f      	movs	r1, #127	@ 0x7f
	   hrtc.Init.SynchPrediv = 255;
 8001002:	22ff      	movs	r2, #255	@ 0xff
	   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001004:	e9c0 4300 	strd	r4, r3, [r0]
	   hrtc.Init.SynchPrediv = 255;
 8001008:	e9c0 1202 	strd	r1, r2, [r0, #8]
	   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
	   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800100c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001010:	6183      	str	r3, [r0, #24]
	   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
	   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001012:	f002 f831 	bl	8003078 <HAL_RTC_Init>
 8001016:	b900      	cbnz	r0, 800101a <Real_Time_Clock_Init+0x22>
	     Error_Handler();
	   }



}
 8001018:	bd10      	pop	{r4, pc}
 800101a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	     Error_Handler();
 800101e:	f000 be0d 	b.w	8001c3c <Error_Handler>
 8001022:	bf00      	nop
 8001024:	20000108 	.word	0x20000108
 8001028:	40002800 	.word	0x40002800

0800102c <System_Init>:
 */


#include"config/config.h"

void System_Init(void){
 800102c:	b508      	push	{r3, lr}
HAL_Init();
 800102e:	f000 fe55 	bl	8001cdc <HAL_Init>
System_Clock_Init();
 8001032:	f7ff ff89 	bl	8000f48 <System_Clock_Init>
GPIO_Init();
 8001036:	f000 f873 	bl	8001120 <GPIO_Init>
DMA_Init();
 800103a:	f000 f857 	bl	80010ec <DMA_Init>
Real_Time_Clock_Init();
 800103e:	f7ff ffdb 	bl	8000ff8 <Real_Time_Clock_Init>
TIM_Init();
 8001042:	f000 f8c1 	bl	80011c8 <TIM_Init>
ADC_Init();
 8001046:	f7ff ff1b 	bl	8000e80 <ADC_Init>
DAC_Init();

}
 800104a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
DAC_Init();
 800104e:	f000 b80b 	b.w	8001068 <DAC_Init>
 8001052:	bf00      	nop

08001054 <System_Start>:

void System_Start(void){
 8001054:	b508      	push	{r3, lr}
TIM_Start();
 8001056:	f000 f957 	bl	8001308 <TIM_Start>
DAC_Start();
}
 800105a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
DAC_Start();
 800105e:	f000 b837 	b.w	80010d0 <DAC_Start>
 8001062:	bf00      	nop
 8001064:	0000      	movs	r0, r0
	...

08001068 <DAC_Init>:
static void DAC_Out_Init(void);

DAC_HandleTypeDef hdac;


void DAC_Init(void){
 8001068:	b500      	push	{lr}
	  DAC_ChannelConfTypeDef sConfig = {0};


	  /** DAC Initialization
	  */
	  hdac.Instance = DAC;
 800106a:	4817      	ldr	r0, [pc, #92]	@ (80010c8 <DAC_Init+0x60>)
 800106c:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <DAC_Init+0x64>)
 800106e:	6002      	str	r2, [r0, #0]
void DAC_Init(void){
 8001070:	b083      	sub	sp, #12
	  DAC_ChannelConfTypeDef sConfig = {0};
 8001072:	2300      	movs	r3, #0
 8001074:	e9cd 3300 	strd	r3, r3, [sp]
	  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001078:	f001 f920 	bl	80022bc <HAL_DAC_Init>
 800107c:	b990      	cbnz	r0, 80010a4 <DAC_Init+0x3c>
	    Error_Handler();
	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800107e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80010c0 <DAC_Init+0x58>
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
	  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001082:	4811      	ldr	r0, [pc, #68]	@ (80010c8 <DAC_Init+0x60>)
 8001084:	2200      	movs	r2, #0
 8001086:	4669      	mov	r1, sp
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001088:	ed8d 7b00 	vstr	d7, [sp]
	  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800108c:	f001 f960 	bl	8002350 <HAL_DAC_ConfigChannel>
 8001090:	b980      	cbnz	r0, 80010b4 <DAC_Init+0x4c>
	    Error_Handler();
	  }

	  /** DAC channel OUT2 config
	  */
	  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001092:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <DAC_Init+0x60>)
 8001094:	2210      	movs	r2, #16
 8001096:	4669      	mov	r1, sp
 8001098:	f001 f95a 	bl	8002350 <HAL_DAC_ConfigChannel>
 800109c:	b928      	cbnz	r0, 80010aa <DAC_Init+0x42>
}
 800109e:	b003      	add	sp, #12
 80010a0:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 80010a4:	f000 fdca 	bl	8001c3c <Error_Handler>
 80010a8:	e7e9      	b.n	800107e <DAC_Init+0x16>
	  {
	    Error_Handler();
 80010aa:	f000 fdc7 	bl	8001c3c <Error_Handler>
}
 80010ae:	b003      	add	sp, #12
 80010b0:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 80010b4:	f000 fdc2 	bl	8001c3c <Error_Handler>
 80010b8:	e7eb      	b.n	8001092 <DAC_Init+0x2a>
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
	...
 80010c8:	20000128 	.word	0x20000128
 80010cc:	40007400 	.word	0x40007400

080010d0 <DAC_Start>:
void DAC_Start(void){
 80010d0:	b510      	push	{r4, lr}
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80010d2:	4c05      	ldr	r4, [pc, #20]	@ (80010e8 <DAC_Start+0x18>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4620      	mov	r0, r4
 80010d8:	f001 f906 	bl	80022e8 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80010dc:	4620      	mov	r0, r4
 80010de:	2110      	movs	r1, #16
}
 80010e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80010e4:	f001 b900 	b.w	80022e8 <HAL_DAC_Start>
 80010e8:	20000128 	.word	0x20000128

080010ec <DMA_Init>:
#include "config/dma_config.h"

DMA_HandleTypeDef hdma_adc1;

void DMA_Init(void)
{
 80010ec:	b500      	push	{lr}
 80010ee:	b083      	sub	sp, #12

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 80010f0:	2200      	movs	r2, #0
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <DMA_Init+0x30>)
 80010f4:	9201      	str	r2, [sp, #4]
 80010f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010f8:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 80010fc:	6319      	str	r1, [r3, #48]	@ 0x30
 80010fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001104:	9301      	str	r3, [sp, #4]

	  /* DMA interrupt init */
	  /* DMA2_Stream0_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001106:	2038      	movs	r0, #56	@ 0x38
 8001108:	4611      	mov	r1, r2
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800110a:	9b01      	ldr	r3, [sp, #4]
	  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800110c:	f001 f872 	bl	80021f4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001110:	2038      	movs	r0, #56	@ 0x38

}
 8001112:	b003      	add	sp, #12
 8001114:	f85d eb04 	ldr.w	lr, [sp], #4
	  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001118:	f001 b8a8 	b.w	800226c <HAL_NVIC_EnableIRQ>
 800111c:	40023800 	.word	0x40023800

08001120 <GPIO_Init>:


#include"config/gpio_config.h"

void GPIO_Init(void)
{
 8001120:	b510      	push	{r4, lr}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	2200      	movs	r2, #0
{
 8001124:	b08c      	sub	sp, #48	@ 0x30
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	e9cd 2206 	strd	r2, r2, [sp, #24]
 800112a:	e9cd 2208 	strd	r2, r2, [sp, #32]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112e:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <GPIO_Init+0x9c>)
 8001130:	9201      	str	r2, [sp, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	920a      	str	r2, [sp, #40]	@ 0x28
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001134:	6b19      	ldr	r1, [r3, #48]	@ 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();
	  __HAL_RCC_GPIOE_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001136:	4c22      	ldr	r4, [pc, #136]	@ (80011c0 <GPIO_Init+0xa0>)
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001138:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800113c:	6319      	str	r1, [r3, #48]	@ 0x30
 800113e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001140:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8001144:	9101      	str	r1, [sp, #4]
 8001146:	9901      	ldr	r1, [sp, #4]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	9202      	str	r2, [sp, #8]
 800114a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800114c:	f041 0104 	orr.w	r1, r1, #4
 8001150:	6319      	str	r1, [r3, #48]	@ 0x30
 8001152:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001154:	f001 0104 	and.w	r1, r1, #4
 8001158:	9102      	str	r1, [sp, #8]
 800115a:	9902      	ldr	r1, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	9203      	str	r2, [sp, #12]
 800115e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001160:	f041 0101 	orr.w	r1, r1, #1
 8001164:	6319      	str	r1, [r3, #48]	@ 0x30
 8001166:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001168:	f001 0101 	and.w	r1, r1, #1
 800116c:	9103      	str	r1, [sp, #12]
 800116e:	9903      	ldr	r1, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	9204      	str	r2, [sp, #16]
 8001172:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001174:	f041 0102 	orr.w	r1, r1, #2
 8001178:	6319      	str	r1, [r3, #48]	@ 0x30
 800117a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800117c:	f001 0102 	and.w	r1, r1, #2
 8001180:	9104      	str	r1, [sp, #16]
 8001182:	9904      	ldr	r1, [sp, #16]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001184:	9205      	str	r2, [sp, #20]
 8001186:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001188:	f041 0110 	orr.w	r1, r1, #16
 800118c:	6319      	str	r1, [r3, #48]	@ 0x30
 800118e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	9305      	str	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001196:	4620      	mov	r0, r4
 8001198:	2108      	movs	r1, #8
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	9b05      	ldr	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800119c:	f001 fbc8 	bl	8002930 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PC3 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011a0:	2208      	movs	r2, #8
 80011a2:	2301      	movs	r3, #1
 80011a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	a906      	add	r1, sp, #24
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011aa:	2200      	movs	r2, #0
 80011ac:	2300      	movs	r3, #0
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	4620      	mov	r0, r4
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f001 fa9e 	bl	80026f4 <HAL_GPIO_Init>

}
 80011b8:	b00c      	add	sp, #48	@ 0x30
 80011ba:	bd10      	pop	{r4, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020800 	.word	0x40020800
 80011c4:	00000000 	.word	0x00000000

080011c8 <TIM_Init>:

/* Private Functions ----------------------------------------------------------*/
static void TIM1_Init(void);
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void TIM_Init(void){
 80011c8:	b510      	push	{r4, lr}



static void TIM1_Init(void)
{
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	2400      	movs	r4, #0
void TIM_Init(void){
 80011cc:	b096      	sub	sp, #88	@ 0x58
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
	  TIM_OC_InitTypeDef sConfigOC = {0};
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ce:	2220      	movs	r2, #32
 80011d0:	4621      	mov	r1, r4
 80011d2:	a80e      	add	r0, sp, #56	@ 0x38
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d4:	e9cd 4403 	strd	r4, r4, [sp, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80011dc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 80011e0:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e4:	9402      	str	r4, [sp, #8]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e6:	9400      	str	r4, [sp, #0]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e8:	9406      	str	r4, [sp, #24]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	9405      	str	r4, [sp, #20]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	9401      	str	r4, [sp, #4]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ee:	f002 fd11 	bl	8003c14 <memset>

	  htim1.Instance = TIM1;
 80011f2:	4843      	ldr	r0, [pc, #268]	@ (8001300 <TIM_Init+0x138>)
 80011f4:	4a43      	ldr	r2, [pc, #268]	@ (8001304 <TIM_Init+0x13c>)
	  htim1.Init.Prescaler = 0;
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim1.Init.Period = 8400-1;
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  htim1.Init.RepetitionCounter = 0;
 80011f6:	6184      	str	r4, [r0, #24]
	  htim1.Init.Period = 8400-1;
 80011f8:	f242 03cf 	movw	r3, #8399	@ 0x20cf
	  htim1.Init.Prescaler = 0;
 80011fc:	e9c0 2400 	strd	r2, r4, [r0]
	  htim1.Init.Period = 8400-1;
 8001200:	e9c0 4302 	strd	r4, r3, [r0, #8]
	  htim1.Init.RepetitionCounter = 0;
 8001204:	e9c0 4404 	strd	r4, r4, [r0, #16]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001208:	f002 fae8 	bl	80037dc <HAL_TIM_Base_Init>
 800120c:	2800      	cmp	r0, #0
 800120e:	d156      	bne.n	80012be <TIM_Init+0xf6>
	  {
	    Error_Handler();
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001214:	483a      	ldr	r0, [pc, #232]	@ (8001300 <TIM_Init+0x138>)
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	9302      	str	r3, [sp, #8]
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001218:	a902      	add	r1, sp, #8
 800121a:	f002 f921 	bl	8003460 <HAL_TIM_ConfigClockSource>
 800121e:	2800      	cmp	r0, #0
 8001220:	d165      	bne.n	80012ee <TIM_Init+0x126>
	  {
	    Error_Handler();
	  }
	  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001222:	4837      	ldr	r0, [pc, #220]	@ (8001300 <TIM_Init+0x138>)
 8001224:	f002 fb08 	bl	8003838 <HAL_TIM_OC_Init>
 8001228:	2800      	cmp	r0, #0
 800122a:	d15d      	bne.n	80012e8 <TIM_Init+0x120>
	  {
	    Error_Handler();
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800122c:	4834      	ldr	r0, [pc, #208]	@ (8001300 <TIM_Init+0x138>)
 800122e:	f002 fb31 	bl	8003894 <HAL_TIM_PWM_Init>
 8001232:	2800      	cmp	r0, #0
 8001234:	d155      	bne.n	80012e2 <TIM_Init+0x11a>
	  {
	    Error_Handler();
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2200      	movs	r2, #0
 8001238:	2300      	movs	r3, #0
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800123a:	4831      	ldr	r0, [pc, #196]	@ (8001300 <TIM_Init+0x138>)
 800123c:	4669      	mov	r1, sp
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	e9cd 2300 	strd	r2, r3, [sp]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001242:	f002 fc79 	bl	8003b38 <HAL_TIMEx_MasterConfigSynchronization>
 8001246:	2800      	cmp	r0, #0
 8001248:	d148      	bne.n	80012dc <TIM_Init+0x114>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_TIMING;
	  sConfigOC.Pulse = 0;
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2000      	movs	r0, #0
 800124c:	2100      	movs	r1, #0
	  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800124e:	2200      	movs	r2, #0
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001250:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001254:	482a      	ldr	r0, [pc, #168]	@ (8001300 <TIM_Init+0x138>)
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001256:	920c      	str	r2, [sp, #48]	@ 0x30
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001258:	a906      	add	r1, sp, #24
	  sConfigOC.Pulse = 0;
 800125a:	e9cd 2206 	strd	r2, r2, [sp, #24]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800125e:	e9cd 2208 	strd	r2, r2, [sp, #32]
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	f002 fb77 	bl	8003954 <HAL_TIM_OC_ConfigChannel>
 8001266:	2800      	cmp	r0, #0
 8001268:	d135      	bne.n	80012d6 <TIM_Init+0x10e>
	  {
	    Error_Handler();
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126a:	2360      	movs	r3, #96	@ 0x60
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800126c:	4824      	ldr	r0, [pc, #144]	@ (8001300 <TIM_Init+0x138>)
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126e:	9306      	str	r3, [sp, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001270:	2204      	movs	r2, #4
 8001272:	a906      	add	r1, sp, #24
 8001274:	f002 fb9a 	bl	80039ac <HAL_TIM_PWM_ConfigChannel>
 8001278:	bb50      	cbnz	r0, 80012d0 <TIM_Init+0x108>
	  {
	    Error_Handler();
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800127a:	4821      	ldr	r0, [pc, #132]	@ (8001300 <TIM_Init+0x138>)
 800127c:	2208      	movs	r2, #8
 800127e:	a906      	add	r1, sp, #24
 8001280:	f002 fb94 	bl	80039ac <HAL_TIM_PWM_ConfigChannel>
 8001284:	bb08      	cbnz	r0, 80012ca <TIM_Init+0x102>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	  sBreakDeadTimeConfig.DeadTime = 51;
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001286:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80012f8 <TIM_Init+0x130>
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800128a:	2300      	movs	r3, #0
	  sBreakDeadTimeConfig.DeadTime = 51;
 800128c:	2233      	movs	r2, #51	@ 0x33
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800128e:	481c      	ldr	r0, [pc, #112]	@ (8001300 <TIM_Init+0x138>)
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001290:	9315      	str	r3, [sp, #84]	@ 0x54
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001292:	a90e      	add	r1, sp, #56	@ 0x38
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001294:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
	  sBreakDeadTimeConfig.DeadTime = 51;
 8001298:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800129c:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012a0:	f002 fc8a 	bl	8003bb8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012a4:	b970      	cbnz	r0, 80012c4 <TIM_Init+0xfc>
	  {
	    Error_Handler();
	  }
	  HAL_TIM_MspPostInit(&htim1);
 80012a6:	4816      	ldr	r0, [pc, #88]	@ (8001300 <TIM_Init+0x138>)
 80012a8:	f000 f9e4 	bl	8001674 <HAL_TIM_MspPostInit>
	TIM1->CCR1=2500;
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <TIM_Init+0x13c>)
 80012ae:	f640 11c4 	movw	r1, #2500	@ 0x9c4
	TIM1->CCR2=5000;
 80012b2:	f241 3288 	movw	r2, #5000	@ 0x1388
	TIM1->CCR1=2500;
 80012b6:	6359      	str	r1, [r3, #52]	@ 0x34
	TIM1->CCR2=5000;
 80012b8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80012ba:	b016      	add	sp, #88	@ 0x58
 80012bc:	bd10      	pop	{r4, pc}
	    Error_Handler();
 80012be:	f000 fcbd 	bl	8001c3c <Error_Handler>
 80012c2:	e7a5      	b.n	8001210 <TIM_Init+0x48>
	    Error_Handler();
 80012c4:	f000 fcba 	bl	8001c3c <Error_Handler>
 80012c8:	e7ed      	b.n	80012a6 <TIM_Init+0xde>
	    Error_Handler();
 80012ca:	f000 fcb7 	bl	8001c3c <Error_Handler>
 80012ce:	e7da      	b.n	8001286 <TIM_Init+0xbe>
	    Error_Handler();
 80012d0:	f000 fcb4 	bl	8001c3c <Error_Handler>
 80012d4:	e7d1      	b.n	800127a <TIM_Init+0xb2>
	    Error_Handler();
 80012d6:	f000 fcb1 	bl	8001c3c <Error_Handler>
 80012da:	e7c6      	b.n	800126a <TIM_Init+0xa2>
	    Error_Handler();
 80012dc:	f000 fcae 	bl	8001c3c <Error_Handler>
 80012e0:	e7b3      	b.n	800124a <TIM_Init+0x82>
	    Error_Handler();
 80012e2:	f000 fcab 	bl	8001c3c <Error_Handler>
 80012e6:	e7a6      	b.n	8001236 <TIM_Init+0x6e>
	    Error_Handler();
 80012e8:	f000 fca8 	bl	8001c3c <Error_Handler>
 80012ec:	e79e      	b.n	800122c <TIM_Init+0x64>
	    Error_Handler();
 80012ee:	f000 fca5 	bl	8001c3c <Error_Handler>
 80012f2:	e796      	b.n	8001222 <TIM_Init+0x5a>
 80012f4:	f3af 8000 	nop.w
 80012f8:	00000000 	.word	0x00000000
 80012fc:	00002000 	.word	0x00002000
 8001300:	200001a0 	.word	0x200001a0
 8001304:	40010000 	.word	0x40010000

08001308 <TIM_Start>:
void TIM_Start(void){
 8001308:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start_IT(&htim1);
 800130a:	4c0d      	ldr	r4, [pc, #52]	@ (8001340 <TIM_Start+0x38>)
 800130c:	4620      	mov	r0, r4
 800130e:	f001 ff87 	bl	8003220 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001312:	2104      	movs	r1, #4
 8001314:	4620      	mov	r0, r4
 8001316:	f002 f8a1 	bl	800345c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800131a:	2104      	movs	r1, #4
 800131c:	4620      	mov	r0, r4
 800131e:	f002 fc09 	bl	8003b34 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001322:	2108      	movs	r1, #8
 8001324:	4620      	mov	r0, r4
 8001326:	f002 f899 	bl	800345c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800132a:	2108      	movs	r1, #8
 800132c:	4620      	mov	r0, r4
 800132e:	f002 fc01 	bl	8003b34 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001332:	4620      	mov	r0, r4
 8001334:	2100      	movs	r1, #0
}
 8001336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800133a:	f002 b813 	b.w	8003364 <HAL_TIM_OC_Start_IT>
 800133e:	bf00      	nop
 8001340:	200001a0 	.word	0x200001a0

08001344 <init_pid_controller>:
 		sin_V_ref[i]=(V_REF_MAX*sin(i*2*PI/(N_ECH)));
 	}
}
#endif

void init_pid_controller(){
 8001344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 		sin_V_ref[i]=(V_REF_MAX*sin(i*2*PI/(N_ECH)));
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <init_pid_controller+0x68>)
 800134a:	4f19      	ldr	r7, [pc, #100]	@ (80013b0 <init_pid_controller+0x6c>)
 800134c:	461c      	mov	r4, r3
 800134e:	2200      	movs	r2, #0
void init_pid_controller(){
 8001350:	ed2d 8b02 	vpush	{d8}
 		sin_V_ref[i]=(V_REF_MAX*sin(i*2*PI/(N_ECH)));
 8001354:	eddf 8a17 	vldr	s17, [pc, #92]	@ 80013b4 <init_pid_controller+0x70>
 8001358:	ed9f 8a17 	vldr	s16, [pc, #92]	@ 80013b8 <init_pid_controller+0x74>
 800135c:	f844 2b04 	str.w	r2, [r4], #4
 8001360:	2600      	movs	r6, #0
 8001362:	f203 6844 	addw	r8, r3, #1604	@ 0x644
 8001366:	2502      	movs	r5, #2
 8001368:	ee07 5a90 	vmov	s15, r5
 800136c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 	for ( int i=0;i<=N_ECH;i++){
 8001370:	3502      	adds	r5, #2
 		sin_V_ref[i]=(V_REF_MAX*sin(i*2*PI/(N_ECH)));
 8001372:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8001376:	eec7 7a88 	vdiv.f32	s15, s15, s16
 800137a:	ee17 0a90 	vmov	r0, s15
 800137e:	f7ff f887 	bl	8000490 <__aeabi_f2d>
 8001382:	ec41 0b10 	vmov	d0, r0, r1
 8001386:	f002 fca3 	bl	8003cd0 <sin>
 800138a:	4632      	mov	r2, r6
 800138c:	ec51 0b10 	vmov	r0, r1, d0
 8001390:	463b      	mov	r3, r7
 8001392:	f7ff f8d5 	bl	8000540 <__aeabi_dmul>
 8001396:	f7ff fbab 	bl	8000af0 <__aeabi_d2f>
 800139a:	f844 0b04 	str.w	r0, [r4], #4
 	for ( int i=0;i<=N_ECH;i++){
 800139e:	45a0      	cmp	r8, r4
 80013a0:	d1e2      	bne.n	8001368 <init_pid_controller+0x24>

#ifdef DEVELOPMENT_MODE
	init_sin_V_ref();
#endif

}
 80013a2:	ecbd 8b02 	vpop	{d8}
 80013a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013aa:	bf00      	nop
 80013ac:	200001e8 	.word	0x200001e8
 80013b0:	403e0000 	.word	0x403e0000
 80013b4:	40490ff9 	.word	0x40490ff9
 80013b8:	43c80000 	.word	0x43c80000

080013bc <EnableTiming>:

static int Debug_ITMDebug = 0;
/* USER CODE END PD */
void EnableTiming(void)
{
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <EnableTiming+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	07db      	lsls	r3, r3, #31
{
 80013c4:	b430      	push	{r4, r5}
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 80013c6:	d502      	bpl.n	80013ce <EnableTiming+0x12>
 80013c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <EnableTiming+0x44>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
    Debug_ITMDebug = 1;

  *SCB_DEMCR |= 0x01000000;
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <EnableTiming+0x48>)
  *DWT_LAR = 0xC5ACCE55; // enable access
 80013d0:	4c0d      	ldr	r4, [pc, #52]	@ (8001408 <EnableTiming+0x4c>)
  *SCB_DEMCR |= 0x01000000;
 80013d2:	6819      	ldr	r1, [r3, #0]
  *DWT_CYCCNT = 0; // reset the counter
 80013d4:	480d      	ldr	r0, [pc, #52]	@ (800140c <EnableTiming+0x50>)
  *SCB_DEMCR |= 0x01000000;
 80013d6:	680b      	ldr	r3, [r1, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <EnableTiming+0x54>)
  *DWT_LAR = 0xC5ACCE55; // enable access
 80013da:	6824      	ldr	r4, [r4, #0]
  *DWT_CYCCNT = 0; // reset the counter
 80013dc:	6800      	ldr	r0, [r0, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 80013de:	6812      	ldr	r2, [r2, #0]
  *DWT_LAR = 0xC5ACCE55; // enable access
 80013e0:	4d0c      	ldr	r5, [pc, #48]	@ (8001414 <EnableTiming+0x58>)
  *SCB_DEMCR |= 0x01000000;
 80013e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013e6:	600b      	str	r3, [r1, #0]
  *DWT_CYCCNT = 0; // reset the counter
 80013e8:	2300      	movs	r3, #0
  *DWT_LAR = 0xC5ACCE55; // enable access
 80013ea:	6025      	str	r5, [r4, #0]
  *DWT_CYCCNT = 0; // reset the counter
 80013ec:	6003      	str	r3, [r0, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 80013ee:	6813      	ldr	r3, [r2, #0]
 80013f0:	f043 0301 	orr.w	r3, r3, #1
}
 80013f4:	bc30      	pop	{r4, r5}
  *DWT_CONTROL |= 1 ; // enable the counter
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000000 	.word	0x20000000
 8001404:	20000004 	.word	0x20000004
 8001408:	2000000c 	.word	0x2000000c
 800140c:	20000014 	.word	0x20000014
 8001410:	20000010 	.word	0x20000010
 8001414:	c5acce55 	.word	0xc5acce55

08001418 <set_start_adc>:

/* USER CODE BEGIN PFP */

volatile bool start_adc = false;
void set_start_adc (bool adc){
	start_adc=adc;
 8001418:	4b01      	ldr	r3, [pc, #4]	@ (8001420 <set_start_adc+0x8>)
 800141a:	7018      	strb	r0, [r3, #0]
}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000828 	.word	0x20000828

08001424 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001424:	b508      	push	{r3, lr}
	PWM_Generate();
 8001426:	f000 f9a1 	bl	800176c <PWM_Generate>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);

}
 800142a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800142e:	4802      	ldr	r0, [pc, #8]	@ (8001438 <HAL_ADC_ConvCpltCallback+0x14>)
 8001430:	2108      	movs	r1, #8
 8001432:	f001 ba81 	b.w	8002938 <HAL_GPIO_TogglePin>
 8001436:	bf00      	nop
 8001438:	40020800 	.word	0x40020800

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b508      	push	{r3, lr}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  System_Init();
 800143e:	f7ff fdf5 	bl	800102c <System_Init>
  PWM_Model_Init();
 8001442:	f000 fbf9 	bl	8001c38 <PWM_Model_Init>
  init_pid_controller();
 8001446:	f7ff ff7d 	bl	8001344 <init_pid_controller>
  System_Start();
 800144a:	f7ff fe03 	bl	8001054 <System_Start>
#ifdef DEVELOPMENT_MODE
  EnableTiming();
 800144e:	f7ff ffb5 	bl	80013bc <EnableTiming>
  *DWT_CYCCNT = 0;
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <main+0x40>)
#endif
  TIM1->CCR1= 0;
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <main+0x44>)
  *DWT_CYCCNT = 0;
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	4c0a      	ldr	r4, [pc, #40]	@ (8001484 <main+0x48>)
 800145a:	2500      	movs	r5, #0
 800145c:	6015      	str	r5, [r2, #0]
  TIM1->CCR1= 0;
 800145e:	635d      	str	r5, [r3, #52]	@ 0x34





  PWM_Generate();
 8001460:	f000 f984 	bl	800176c <PWM_Generate>
  PWM_Generate();
 8001464:	f000 f982 	bl	800176c <PWM_Generate>
  PWM_Generate();
 8001468:	f000 f980 	bl	800176c <PWM_Generate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(start_adc){
 800146c:	7823      	ldrb	r3, [r4, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0fc      	beq.n	800146c <main+0x30>
		  start_adc=false;
 8001472:	7025      	strb	r5, [r4, #0]
		  ADC_Start();
 8001474:	f7ff fd5e 	bl	8000f34 <ADC_Start>
 8001478:	e7f8      	b.n	800146c <main+0x30>
 800147a:	bf00      	nop
 800147c:	20000014 	.word	0x20000014
 8001480:	40010000 	.word	0x40010000
 8001484:	20000828 	.word	0x20000828

08001488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_MspInit+0x34>)
 800148c:	2100      	movs	r1, #0
 800148e:	9100      	str	r1, [sp, #0]
 8001490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001492:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001496:	645a      	str	r2, [r3, #68]	@ 0x44
 8001498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800149a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800149e:	9200      	str	r2, [sp, #0]
 80014a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	9101      	str	r1, [sp, #4]
 80014a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014a6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80014aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	b002      	add	sp, #8
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80014c2:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <HAL_ADC_MspInit+0x94>)
 80014c4:	6802      	ldr	r2, [r0, #0]
{
 80014c6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80014ca:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80014d0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80014d4:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 80014d6:	d001      	beq.n	80014dc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014d8:	b008      	add	sp, #32
 80014da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014dc:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 80014e0:	9400      	str	r4, [sp, #0]
 80014e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 80014e4:	4e1c      	ldr	r6, [pc, #112]	@ (8001558 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80014ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80014ee:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	9401      	str	r4, [sp, #4]
 80014f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8001508:	2246      	movs	r2, #70	@ 0x46
 800150a:	2303      	movs	r3, #3
 800150c:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	a902      	add	r1, sp, #8
 8001510:	4812      	ldr	r0, [pc, #72]	@ (800155c <HAL_ADC_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8001512:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f001 f8ec 	bl	80026f4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800151c:	4a10      	ldr	r2, [pc, #64]	@ (8001560 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800151e:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001520:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001524:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001528:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800152a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800152e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001532:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001538:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800153c:	e9c6 4407 	strd	r4, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001540:	f000 ff30 	bl	80023a4 <HAL_DMA_Init>
 8001544:	b918      	cbnz	r0, 800154e <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001546:	63ae      	str	r6, [r5, #56]	@ 0x38
 8001548:	63b5      	str	r5, [r6, #56]	@ 0x38
}
 800154a:	b008      	add	sp, #32
 800154c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800154e:	f000 fb75 	bl	8001c3c <Error_Handler>
 8001552:	e7f8      	b.n	8001546 <HAL_ADC_MspInit+0x86>
 8001554:	40012000 	.word	0x40012000
 8001558:	2000013c 	.word	0x2000013c
 800155c:	40020000 	.word	0x40020000
 8001560:	40026410 	.word	0x40026410
 8001564:	00000000 	.word	0x00000000

08001568 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001568:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 800156a:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <HAL_DAC_MspInit+0x68>)
 800156c:	6801      	ldr	r1, [r0, #0]
{
 800156e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8001572:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001578:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800157c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 800157e:	d002      	beq.n	8001586 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001580:	b009      	add	sp, #36	@ 0x24
 8001582:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC_CLK_ENABLE();
 8001586:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 800158e:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
 8001592:	6410      	str	r0, [r2, #64]	@ 0x40
 8001594:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8001596:	f000 5000 	and.w	r0, r0, #536870912	@ 0x20000000
 800159a:	9000      	str	r0, [sp, #0]
 800159c:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <HAL_DAC_MspInit+0x6c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015ac:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 80015c8 <HAL_DAC_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015b8:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f001 f899 	bl	80026f4 <HAL_GPIO_Init>
}
 80015c2:	b009      	add	sp, #36	@ 0x24
 80015c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80015c8:	00000030 	.word	0x00000030
 80015cc:	00000003 	.word	0x00000003
 80015d0:	40007400 	.word	0x40007400
 80015d4:	40020000 	.word	0x40020000

080015d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015d8:	b500      	push	{lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(hrtc->Instance==RTC)
 80015da:	4a0f      	ldr	r2, [pc, #60]	@ (8001618 <HAL_RTC_MspInit+0x40>)
 80015dc:	6801      	ldr	r1, [r0, #0]
{
 80015de:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e0:	2300      	movs	r3, #0
  if(hrtc->Instance==RTC)
 80015e2:	4291      	cmp	r1, r2
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if(hrtc->Instance==RTC)
 80015e8:	d002      	beq.n	80015f0 <HAL_RTC_MspInit+0x18>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015ea:	b005      	add	sp, #20
 80015ec:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015f0:	2202      	movs	r2, #2
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f6:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015f8:	9200      	str	r2, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015fa:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fc:	f001 fc5a 	bl	8002eb4 <HAL_RCCEx_PeriphCLKConfig>
 8001600:	b930      	cbnz	r0, 8001610 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_RTC_MspInit+0x44>)
 8001604:	2201      	movs	r2, #1
 8001606:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 800160a:	b005      	add	sp, #20
 800160c:	f85d fb04 	ldr.w	pc, [sp], #4
      Error_Handler();
 8001610:	f000 fb14 	bl	8001c3c <Error_Handler>
 8001614:	e7f5      	b.n	8001602 <HAL_RTC_MspInit+0x2a>
 8001616:	bf00      	nop
 8001618:	40002800 	.word	0x40002800
 800161c:	42470000 	.word	0x42470000

08001620 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <HAL_TIM_Base_MspInit+0x50>)
 8001622:	6802      	ldr	r2, [r0, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d000      	beq.n	800162a <HAL_TIM_Base_MspInit+0xa>
 8001628:	4770      	bx	lr
{
 800162a:	b510      	push	{r4, lr}
 800162c:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800162e:	2400      	movs	r4, #0
 8001630:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8001634:	9401      	str	r4, [sp, #4]
 8001636:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001638:	f041 0101 	orr.w	r1, r1, #1
 800163c:	6459      	str	r1, [r3, #68]	@ 0x44
 800163e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001640:	f003 0301 	and.w	r3, r3, #1
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001644:	4622      	mov	r2, r4
 8001646:	4621      	mov	r1, r4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001648:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800164a:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 800164c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800164e:	f000 fdd1 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001652:	2019      	movs	r0, #25
 8001654:	f000 fe0a 	bl	800226c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001658:	4622      	mov	r2, r4
 800165a:	4621      	mov	r1, r4
 800165c:	201b      	movs	r0, #27
 800165e:	f000 fdc9 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001662:	201b      	movs	r0, #27
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001664:	b002      	add	sp, #8
 8001666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800166a:	f000 bdff 	b.w	800226c <HAL_NVIC_EnableIRQ>
 800166e:	bf00      	nop
 8001670:	40010000 	.word	0x40010000

08001674 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001674:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8001676:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <HAL_TIM_MspPostInit+0x78>)
 8001678:	6802      	ldr	r2, [r0, #0]
{
 800167a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	2400      	movs	r4, #0
  if(htim->Instance==TIM1)
 800167e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001684:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001688:	9406      	str	r4, [sp, #24]
  if(htim->Instance==TIM1)
 800168a:	d001      	beq.n	8001690 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800168c:	b009      	add	sp, #36	@ 0x24
 800168e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8001694:	9400      	str	r4, [sp, #0]
 8001696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	4815      	ldr	r0, [pc, #84]	@ (80016f0 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	f042 0202 	orr.w	r2, r2, #2
 800169e:	631a      	str	r2, [r3, #48]	@ 0x30
 80016a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016a2:	f002 0202 	and.w	r2, r2, #2
 80016a6:	9200      	str	r2, [sp, #0]
 80016a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016aa:	9401      	str	r4, [sp, #4]
 80016ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016ae:	f042 0210 	orr.w	r2, r2, #16
 80016b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016bc:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016c0:	2203      	movs	r2, #3
 80016c2:	2302      	movs	r3, #2
 80016c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016c8:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ca:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f001 f812 	bl	80026f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80016d0:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d6:	4807      	ldr	r0, [pc, #28]	@ (80016f4 <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016d8:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016da:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e4:	f001 f806 	bl	80026f4 <HAL_GPIO_Init>
}
 80016e8:	b009      	add	sp, #36	@ 0x24
 80016ea:	bd30      	pop	{r4, r5, pc}
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40021000 	.word	0x40021000

080016f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler>
 80016fa:	bf00      	nop

080016fc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <HardFault_Handler>
 80016fe:	bf00      	nop

08001700 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler>
 8001702:	bf00      	nop

08001704 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <BusFault_Handler>
 8001706:	bf00      	nop

08001708 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler>
 800170a:	bf00      	nop

0800170c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop

08001718 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 bafa 	b.w	8001d10 <HAL_IncTick>

0800171c <TIM1_UP_TIM10_IRQHandler>:
//	TIM1->CCR1 = (uint16_t)pwm/2;
//	pwm=TIM1->CCR2;


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800171c:	4801      	ldr	r0, [pc, #4]	@ (8001724 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800171e:	f001 bf53 	b.w	80035c8 <HAL_TIM_IRQHandler>
 8001722:	bf00      	nop
 8001724:	200001a0 	.word	0x200001a0

08001728 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001728:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800172a:	4806      	ldr	r0, [pc, #24]	@ (8001744 <TIM1_CC_IRQHandler+0x1c>)
 800172c:	2108      	movs	r1, #8
 800172e:	f001 f903 	bl	8002938 <HAL_GPIO_TogglePin>
	set_start_adc (true);
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff fe70 	bl	8001418 <set_start_adc>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <TIM1_CC_IRQHandler+0x20>)
 800173e:	f001 bf43 	b.w	80035c8 <HAL_TIM_IRQHandler>
 8001742:	bf00      	nop
 8001744:	40020800 	.word	0x40020800
 8001748:	200001a0 	.word	0x200001a0

0800174c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800174c:	4801      	ldr	r0, [pc, #4]	@ (8001754 <DMA2_Stream0_IRQHandler+0x8>)
 800174e:	f000 befb 	b.w	8002548 <HAL_DMA_IRQHandler>
 8001752:	bf00      	nop
 8001754:	2000013c 	.word	0x2000013c

08001758 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4a03      	ldr	r2, [pc, #12]	@ (8001768 <SystemInit+0x10>)
 800175a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800175e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001762:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <PWM_Generate>:
float pIoMoy=0;
float kp_i=6.2831;
float t=0;
float I_ref=0;
float a=1;
void PWM_Generate(void){
 800176c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static int i =0;
	static float sum_error =0.0f;

/*	acquisition	*/
#ifdef LABO_SENSORS
	If= 0.0375f * buffer_adc[0] - 19.01f;
 8001770:	4bb5      	ldr	r3, [pc, #724]	@ (8001a48 <PWM_Generate+0x2dc>)
	Io= 0.036f* buffer_adc[1] - 18.603f;
	Vo=  0.9406f*buffer_adc[2] - 484.61f;
 8001772:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8001a4c <PWM_Generate+0x2e0>
 8001776:	889a      	ldrh	r2, [r3, #4]

	If_calman = x[0];


/*	PID controller	*/
		float V_error = (sin_V_ref[i])-Vo;
 8001778:	48b5      	ldr	r0, [pc, #724]	@ (8001a50 <PWM_Generate+0x2e4>)
	Vo=  0.9406f*buffer_adc[2] - 484.61f;
 800177a:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8001a54 <PWM_Generate+0x2e8>
	Io= 0.036f* buffer_adc[1] - 18.603f;
 800177e:	eddf 5ab6 	vldr	s11, [pc, #728]	@ 8001a58 <PWM_Generate+0x2ec>
		float V_error = (sin_V_ref[i])-Vo;
 8001782:	49b6      	ldr	r1, [pc, #728]	@ (8001a5c <PWM_Generate+0x2f0>)
	If= 0.0375f * buffer_adc[0] - 19.01f;
 8001784:	ed9f 4ab6 	vldr	s8, [pc, #728]	@ 8001a60 <PWM_Generate+0x2f4>
 8001788:	4cb6      	ldr	r4, [pc, #728]	@ (8001a64 <PWM_Generate+0x2f8>)
	Vo=  0.9406f*buffer_adc[2] - 484.61f;
 800178a:	ee07 2a90 	vmov	s15, r2
	Io= 0.036f* buffer_adc[1] - 18.603f;
 800178e:	885a      	ldrh	r2, [r3, #2]
	If= 0.0375f * buffer_adc[0] - 19.01f;
 8001790:	881b      	ldrh	r3, [r3, #0]
	Io= 0.036f* buffer_adc[1] - 18.603f;
 8001792:	ee06 2a10 	vmov	s12, r2
	Vo=  0.9406f*buffer_adc[2] - 484.61f;
 8001796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Io= 0.036f* buffer_adc[1] - 18.603f;
 800179a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	Vo=  0.9406f*buffer_adc[2] - 484.61f;
 800179e:	eea7 7aa6 	vfma.f32	s14, s15, s13
		float V_error = (sin_V_ref[i])-Vo;
 80017a2:	6802      	ldr	r2, [r0, #0]
	Io= 0.036f* buffer_adc[1] - 18.603f;
 80017a4:	eddf 6ab0 	vldr	s13, [pc, #704]	@ 8001a68 <PWM_Generate+0x2fc>
		float V_error = (sin_V_ref[i])-Vo;
 80017a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	Io= 0.036f* buffer_adc[1] - 18.603f;
 80017ac:	eee6 6a25 	vfma.f32	s13, s12, s11
		float V_error = (sin_V_ref[i])-Vo;
 80017b0:	edd1 7a00 	vldr	s15, [r1]
		sum_error +=V_error;
		float I_ref =Io +  kP_E*V_error + kI_E*TS*sum_error;
 80017b4:	ed9f 6aad 	vldr	s12, [pc, #692]	@ 8001a6c <PWM_Generate+0x300>
		V_ref =(Vo + kp_i*(I_ref - If));
 80017b8:	49ad      	ldr	r1, [pc, #692]	@ (8001a70 <PWM_Generate+0x304>)
		float V_error = (sin_V_ref[i])-Vo;
 80017ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
	If= 0.0375f * buffer_adc[0] - 19.01f;
 80017be:	ee05 3a10 	vmov	s10, r3
		sum_error +=V_error;
 80017c2:	4bac      	ldr	r3, [pc, #688]	@ (8001a74 <PWM_Generate+0x308>)
		float I_ref =Io +  kP_E*V_error + kI_E*TS*sum_error;
 80017c4:	eef0 5a66 	vmov.f32	s11, s13
		sum_error +=V_error;
 80017c8:	edd3 4a00 	vldr	s9, [r3]
		float I_ref =Io +  kP_E*V_error + kI_E*TS*sum_error;
 80017cc:	eee7 5a86 	vfma.f32	s11, s15, s12
	If= 0.0375f * buffer_adc[0] - 19.01f;
 80017d0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
		sum_error +=V_error;
 80017d4:	ee77 7aa4 	vadd.f32	s15, s15, s9
	If= 0.0375f * buffer_adc[0] - 19.01f;
 80017d8:	ed9f 6aa7 	vldr	s12, [pc, #668]	@ 8001a78 <PWM_Generate+0x30c>
		float I_ref =Io +  kP_E*V_error + kI_E*TS*sum_error;
 80017dc:	eddf 4aa7 	vldr	s9, [pc, #668]	@ 8001a7c <PWM_Generate+0x310>
	If= 0.0375f * buffer_adc[0] - 19.01f;
 80017e0:	eea5 6a04 	vfma.f32	s12, s10, s8
		float I_ref =Io +  kP_E*V_error + kI_E*TS*sum_error;
 80017e4:	eee7 5aa4 	vfma.f32	s11, s15, s9
		V_ref =(Vo + kp_i*(I_ref - If));
 80017e8:	ed91 4a00 	vldr	s8, [r1]
		int16_t duty_cycle = V_ref*(PWM_TIM_period)/V_IN;
 80017ec:	ed9f 5aa4 	vldr	s10, [pc, #656]	@ 8001a80 <PWM_Generate+0x314>
 80017f0:	eddf 4aa4 	vldr	s9, [pc, #656]	@ 8001a84 <PWM_Generate+0x318>
	If_calman = x[0];
 80017f4:	49a4      	ldr	r1, [pc, #656]	@ (8001a88 <PWM_Generate+0x31c>)
		V_ref =(Vo + kp_i*(I_ref - If));
 80017f6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80017fa:	eef0 0a47 	vmov.f32	s1, s14
 80017fe:	eee5 0a84 	vfma.f32	s1, s11, s8
void PWM_Generate(void){
 8001802:	ed2d 8b08 	vpush	{d8-d11}
		int16_t duty_cycle = V_ref*(PWM_TIM_period)/V_IN;
 8001806:	ee60 5a85 	vmul.f32	s11, s1, s10
		sum_error +=V_error;
 800180a:	edc3 7a00 	vstr	s15, [r3]
		int16_t duty_cycle = V_ref*(PWM_TIM_period)/V_IN;
 800180e:	eec5 7aa4 	vdiv.f32	s15, s11, s9
	Vo=  0.9406f*buffer_adc[2] - 484.61f;
 8001812:	4b9e      	ldr	r3, [pc, #632]	@ (8001a8c <PWM_Generate+0x320>)
 8001814:	ed83 7a00 	vstr	s14, [r3]
		int16_t duty_cycle = V_ref*(PWM_TIM_period)/V_IN;
 8001818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		V_ref =(Vo + kp_i*(I_ref - If));
 800181c:	4b9c      	ldr	r3, [pc, #624]	@ (8001a90 <PWM_Generate+0x324>)
	If= 0.0375f * buffer_adc[0] - 19.01f;
 800181e:	ed84 6a00 	vstr	s12, [r4]
		V_ref =(Vo + kp_i*(I_ref - If));
 8001822:	edc3 0a00 	vstr	s1, [r3]
	Io= 0.036f* buffer_adc[1] - 18.603f;
 8001826:	4c9b      	ldr	r4, [pc, #620]	@ (8001a94 <PWM_Generate+0x328>)
	If_calman = x[0];
 8001828:	ed91 0a00 	vldr	s0, [r1]
	Io= 0.036f* buffer_adc[1] - 18.603f;
 800182c:	edc4 6a00 	vstr	s13, [r4]
		int16_t duty_cycle = V_ref*(PWM_TIM_period)/V_IN;
 8001830:	ee17 3a90 	vmov	r3, s15
	If_calman = x[0];
 8001834:	4c98      	ldr	r4, [pc, #608]	@ (8001a98 <PWM_Generate+0x32c>)
		int16_t duty_cycle = V_ref*(PWM_TIM_period)/V_IN;
 8001836:	b21b      	sxth	r3, r3
//		int16_t duty_cycle = (PWM_TIM_period)*sin_V_ref[i]/V_IN;
//		int16_t duty_cycle = pwm;
//		DAC_SetVoltage(1.65f+sin_V_ref[i]/30,DAC_CHANNEL_1);
//		DAC_SetVoltage(1.65f+sin_V_ref[i]/30,DAC_CHANNEL_2);
/*	Generate PWM signal	*/
		if(duty_cycle>0){
 8001838:	2b00      	cmp	r3, #0
	If_calman = x[0];
 800183a:	ed84 0a00 	vstr	s0, [r4]
			TIM1->CCR2= duty_cycle;
 800183e:	4c97      	ldr	r4, [pc, #604]	@ (8001a9c <PWM_Generate+0x330>)
		if(duty_cycle>0){
 8001840:	f340 80fc 	ble.w	8001a3c <PWM_Generate+0x2d0>
			TIM1->CCR2= duty_cycle;
 8001844:	63a3      	str	r3, [r4, #56]	@ 0x38
			TIM1->CCR3= 0;
 8001846:	2300      	movs	r3, #0
 8001848:	63e3      	str	r3, [r4, #60]	@ 0x3c
		/* calculate X' */
		y[0]=A11*x[0]+A12*x[1]+B11*V_ref;
		y[1]=A21*x[0]+ x[1]+B22*Io;
		/* calculate P' */

		b[0][0]=(A11*p[0][0]+A12*p[1][0])*A11+(A11*p[0][1]+A12*p[1][1])*A12+1;
 800184a:	4b95      	ldr	r3, [pc, #596]	@ (8001aa0 <PWM_Generate+0x334>)
		y[1]=A21*x[0]+ x[1]+B22*Io;
 800184c:	eddf 1a95 	vldr	s3, [pc, #596]	@ 8001aa4 <PWM_Generate+0x338>
		b[0][0]=(A11*p[0][0]+A12*p[1][0])*A11+(A11*p[0][1]+A12*p[1][1])*A12+1;
 8001850:	edd3 7a03 	vldr	s15, [r3, #12]
 8001854:	edd3 5a01 	vldr	s11, [r3, #4]
 8001858:	edd3 3a02 	vldr	s7, [r3, #8]
 800185c:	edd3 4a00 	vldr	s9, [r3]
		y[0]=A11*x[0]+A12*x[1]+B11*V_ref;
 8001860:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 8001aa8 <PWM_Generate+0x33c>
 8001864:	eddf 2a91 	vldr	s5, [pc, #580]	@ 8001aac <PWM_Generate+0x340>
 8001868:	eddf 8a91 	vldr	s17, [pc, #580]	@ 8001ab0 <PWM_Generate+0x344>
		i=(i+1)%400;
 800186c:	4c91      	ldr	r4, [pc, #580]	@ (8001ab4 <PWM_Generate+0x348>)
		p[1][0]=b[1][0]*(1-k[1]);
		p[1][1]=b[1][1]*(1-k[1]);


/*	calculation	*/
		vRms=vRms+Vo*Vo;
 800186e:	f8df 9278 	ldr.w	r9, [pc, #632]	@ 8001ae8 <PWM_Generate+0x37c>
		vMoy+=Vo;

		IRms=IRms+If*If;
		IMoy+=If;

		IoRms=IoRms+Io*Io;
 8001872:	4f91      	ldr	r7, [pc, #580]	@ (8001ab8 <PWM_Generate+0x34c>)
		vMoy+=Vo;
 8001874:	f8df a274 	ldr.w	sl, [pc, #628]	@ 8001aec <PWM_Generate+0x380>
		IoRms=IoRms+Io*Io;
 8001878:	edd7 9a00 	vldr	s19, [r7]
		IMoy+=If;
 800187c:	4e8f      	ldr	r6, [pc, #572]	@ (8001abc <PWM_Generate+0x350>)
				IoMoy+=Io;
 800187e:	f8df 8270 	ldr.w	r8, [pc, #624]	@ 8001af0 <PWM_Generate+0x384>
		vMoy+=Vo;
 8001882:	ed9a aa00 	vldr	s20, [sl]
				IoMoy+=Io;
 8001886:	ed98 9a00 	vldr	s18, [r8]

		if(IoMax<Io)
		{
			IoMax=Io;
		}
		if(IoMax2>Io)
 800188a:	f8df b268 	ldr.w	fp, [pc, #616]	@ 8001af4 <PWM_Generate+0x388>
		b[1][0]=(A21*p[0][0]+ p[1][0])*A11+(A21*p[0][1]+ p[1][1])*A12;
 800188e:	eeb0 5a67 	vmov.f32	s10, s15
 8001892:	eea5 5aa1 	vfma.f32	s10, s11, s3
		i=(i+1)%400;
 8001896:	3201      	adds	r2, #1
 8001898:	fb84 5402 	smull	r5, r4, r4, r2
		b[1][0]=(A21*p[0][0]+ p[1][0])*A11+(A21*p[0][1]+ p[1][1])*A12;
 800189c:	eeb0 8a63 	vmov.f32	s16, s7
 80018a0:	eea4 8aa1 	vfma.f32	s16, s9, s3
		IRms=IRms+If*If;
 80018a4:	4d86      	ldr	r5, [pc, #536]	@ (8001ac0 <PWM_Generate+0x354>)
		b[0][0]=(A11*p[0][0]+A12*p[1][0])*A11+(A11*p[0][1]+A12*p[1][1])*A12+1;
 80018a6:	ee63 3a82 	vmul.f32	s7, s7, s4
 80018aa:	ee67 7a82 	vmul.f32	s15, s15, s4
 80018ae:	eee4 3aa2 	vfma.f32	s7, s9, s5
 80018b2:	eee5 7aa2 	vfma.f32	s15, s11, s5
		b[1][1]=(A21*p[0][0]+ p[1][0])*A21+(A21*p[0][1]+ p[1][1]) +1;
 80018b6:	eef0 4a45 	vmov.f32	s9, s10
		y[0]=A11*x[0]+A12*x[1]+B11*V_ref;
 80018ba:	edd1 5a01 	vldr	s11, [r1, #4]
		b[1][1]=(A21*p[0][0]+ p[1][0])*A21+(A21*p[0][1]+ p[1][1]) +1;
 80018be:	eee8 4a21 	vfma.f32	s9, s16, s3
		y[1]=A21*x[0]+ x[1]+B22*Io;
 80018c2:	eeb0 3a65 	vmov.f32	s6, s11
		b[0][0]=(A11*p[0][0]+A12*p[1][0])*A11+(A11*p[0][1]+A12*p[1][1])*A12+1;
 80018c6:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
		y[1]=A21*x[0]+ x[1]+B22*Io;
 80018ca:	eea0 3a21 	vfma.f32	s6, s0, s3
		b[0][1]=(A11*p[0][0]+A12*p[1][0])*A21+(A11*p[0][1]+A12*p[1][1]) ;
 80018ce:	eeb0 1a67 	vmov.f32	s2, s15
		b[1][1]=(A21*p[0][0]+ p[1][0])*A21+(A21*p[0][1]+ p[1][1]) +1;
 80018d2:	ee74 4a84 	vadd.f32	s9, s9, s8
		b[0][1]=(A11*p[0][0]+A12*p[1][0])*A21+(A11*p[0][1]+A12*p[1][1]) ;
 80018d6:	eea3 1aa1 	vfma.f32	s2, s7, s3
		y[0]=A11*x[0]+A12*x[1]+B11*V_ref;
 80018da:	ee65 5a82 	vmul.f32	s11, s11, s4
		b[0][0]=(A11*p[0][0]+A12*p[1][0])*A11+(A11*p[0][1]+A12*p[1][1])*A12+1;
 80018de:	ee67 7a82 	vmul.f32	s15, s15, s4
		b[1][0]=(A21*p[0][0]+ p[1][0])*A11+(A21*p[0][1]+ p[1][1])*A12;
 80018e2:	ee25 5a02 	vmul.f32	s10, s10, s4
		b[0][0]=(A11*p[0][0]+A12*p[1][0])*A11+(A11*p[0][1]+A12*p[1][1])*A12+1;
 80018e6:	eee3 7aa2 	vfma.f32	s15, s7, s5
		b[1][0]=(A21*p[0][0]+ p[1][0])*A11+(A21*p[0][1]+ p[1][1])*A12;
 80018ea:	eea8 5a22 	vfma.f32	s10, s16, s5
		y[0]=A11*x[0]+A12*x[1]+B11*V_ref;
 80018ee:	eee0 5a22 	vfma.f32	s11, s0, s5
		y[1]=A21*x[0]+ x[1]+B22*Io;
 80018f2:	ed9f 2a74 	vldr	s4, [pc, #464]	@ 8001ac4 <PWM_Generate+0x358>
		t=i+0.1f;
 80018f6:	eddf 1a74 	vldr	s3, [pc, #464]	@ 8001ac8 <PWM_Generate+0x35c>
		IMoy+=If;
 80018fa:	ed96 8a00 	vldr	s16, [r6]
		k[0]=b[0][1]/(b[1][1]+1);
 80018fe:	ee74 2a84 	vadd.f32	s5, s9, s8
		y[1]=A21*x[0]+ x[1]+B22*Io;
 8001902:	eef0 3a43 	vmov.f32	s7, s6
 8001906:	eee6 3a82 	vfma.f32	s7, s13, s4
		k[0]=b[0][1]/(b[1][1]+1);
 800190a:	ee81 3a22 	vdiv.f32	s6, s2, s5
		k[1]=b[1][1]/(b[1][1]+1);
 800190e:	ee84 2aa2 	vdiv.f32	s4, s9, s5
		y[0]=A11*x[0]+A12*x[1]+B11*V_ref;
 8001912:	eee0 5aa8 	vfma.f32	s11, s1, s17
		b[0][0]=(A11*p[0][0]+A12*p[1][0])*A11+(A11*p[0][1]+A12*p[1][1])*A12+1;
 8001916:	ee77 7a84 	vadd.f32	s15, s15, s8
		x[0]=y[0]+k[0]*(Vo-y[1]);
 800191a:	ee77 2a63 	vsub.f32	s5, s14, s7
		p[0][0]=b[0][0]-(k[0]*b[1][0]);
 800191e:	eee5 7a43 	vfms.f32	s15, s10, s6
		p[0][1]=+b[0][1]-(k[0]*b[1][1]);
 8001922:	eea4 1ac3 	vfms.f32	s2, s9, s6
		p[1][0]=b[1][0]*(1-k[1]);
 8001926:	ee34 4a42 	vsub.f32	s8, s8, s4
		x[0]=y[0]+k[0]*(Vo-y[1]);
 800192a:	eee3 5a22 	vfma.f32	s11, s6, s5
		x[1]=y[1]+k[1]*(Vo-y[1]);
 800192e:	eee2 3a22 	vfma.f32	s7, s4, s5
		p[1][0]=b[1][0]*(1-k[1]);
 8001932:	ee25 5a04 	vmul.f32	s10, s10, s8
		p[1][1]=b[1][1]*(1-k[1]);
 8001936:	ee64 4a84 	vmul.f32	s9, s9, s8
		p[0][0]=b[0][0]-(k[0]*b[1][0]);
 800193a:	edc3 7a00 	vstr	s15, [r3]
		p[1][0]=b[1][0]*(1-k[1]);
 800193e:	ed83 5a02 	vstr	s10, [r3, #8]
		p[0][1]=+b[0][1]-(k[0]*b[1][1]);
 8001942:	ed83 1a01 	vstr	s2, [r3, #4]
		p[1][1]=b[1][1]*(1-k[1]);
 8001946:	edc3 4a03 	vstr	s9, [r3, #12]
		i=(i+1)%400;
 800194a:	17d3      	asrs	r3, r2, #31
		x[0]=y[0]+k[0]*(Vo-y[1]);
 800194c:	edc1 5a00 	vstr	s11, [r1]
		x[1]=y[1]+k[1]*(Vo-y[1]);
 8001950:	edc1 3a01 	vstr	s7, [r1, #4]
		i=(i+1)%400;
 8001954:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
 8001958:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800195c:	fb01 2313 	mls	r3, r1, r3, r2
		t=i+0.1f;
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001968:	4a58      	ldr	r2, [pc, #352]	@ (8001acc <PWM_Generate+0x360>)
		i=(i+1)%400;
 800196a:	6003      	str	r3, [r0, #0]
		t=i+0.1f;
 800196c:	ee77 7aa1 	vadd.f32	s15, s15, s3
		if(vMax<Vo)
 8001970:	4b57      	ldr	r3, [pc, #348]	@ (8001ad0 <PWM_Generate+0x364>)
		t=i+0.1f;
 8001972:	edc2 7a00 	vstr	s15, [r2]
		if(vMax2>Vo)
 8001976:	4a57      	ldr	r2, [pc, #348]	@ (8001ad4 <PWM_Generate+0x368>)
		if(vMax<Vo)
 8001978:	ed93 5a00 	vldr	s10, [r3]
		if(vMax2>Vo)
 800197c:	edd2 7a00 	vldr	s15, [r2]
		vRms=vRms+Vo*Vo;
 8001980:	edd9 5a00 	vldr	s11, [r9]
		IRms=IRms+If*If;
 8001984:	edd5 8a00 	vldr	s17, [r5]
		if(IoMax<Io)
 8001988:	4853      	ldr	r0, [pc, #332]	@ (8001ad8 <PWM_Generate+0x36c>)
		iRms++;
 800198a:	4c54      	ldr	r4, [pc, #336]	@ (8001adc <PWM_Generate+0x370>)
		if(vMax<Vo)
 800198c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		vRms=vRms+Vo*Vo;
 8001994:	eee7 5a07 	vfma.f32	s11, s14, s14
		iRms++;
 8001998:	6821      	ldr	r1, [r4, #0]
		if(vMax2>Vo)
 800199a:	eeb4 7ae7 	vcmpe.f32	s14, s15
		IRms=IRms+If*If;
 800199e:	eee6 8a06 	vfma.f32	s17, s12, s12
		iRms++;
 80019a2:	f101 0101 	add.w	r1, r1, #1
 80019a6:	6021      	str	r1, [r4, #0]
		if(IoMax<Io)
 80019a8:	edd0 7a00 	vldr	s15, [r0]
			vMax=Vo;
 80019ac:	bfc8      	it	gt
 80019ae:	ed83 7a00 	vstrgt	s14, [r3]
		IoRms=IoRms+Io*Io;
 80019b2:	eee6 9aa6 	vfma.f32	s19, s13, s13
		if(vMax2>Vo)
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		vMoy+=Vo;
 80019ba:	ee37 aa0a 	vadd.f32	s20, s14, s20
		if(IoMax<Io)
 80019be:	eef4 6ae7 	vcmpe.f32	s13, s15
		IMoy+=If;
 80019c2:	ee36 8a08 	vadd.f32	s16, s12, s16
				IoMoy+=Io;
 80019c6:	ee36 9a89 	vadd.f32	s18, s13, s18
			vMax2=Vo;
 80019ca:	bf48      	it	mi
 80019cc:	ed82 7a00 	vstrmi	s14, [r2]
		if(IoMax<Io)
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		vRms=vRms+Vo*Vo;
 80019d4:	edc9 5a00 	vstr	s11, [r9]
		vMoy+=Vo;
 80019d8:	ed8a aa00 	vstr	s20, [sl]
		IRms=IRms+If*If;
 80019dc:	edc5 8a00 	vstr	s17, [r5]
		IoRms=IoRms+Io*Io;
 80019e0:	edc7 9a00 	vstr	s19, [r7]
		IMoy+=If;
 80019e4:	ed86 8a00 	vstr	s16, [r6]
				IoMoy+=Io;
 80019e8:	ed88 9a00 	vstr	s18, [r8]
			IoMax=Io;
 80019ec:	bfc8      	it	gt
 80019ee:	edc0 6a00 	vstrgt	s13, [r0]
		if(IoMax2>Io)
 80019f2:	eddb 7a00 	vldr	s15, [fp]
			IoMax2=Io;
			}



		if(IMax<If)
 80019f6:	483a      	ldr	r0, [pc, #232]	@ (8001ae0 <PWM_Generate+0x374>)
		if(IoMax2>Io)
 80019f8:	eef4 6ae7 	vcmpe.f32	s13, s15
		if(IMax<If)
 80019fc:	edd0 7a00 	vldr	s15, [r0]
		if(IoMax2>Io)
 8001a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(IMax<If)
 8001a04:	eeb4 6ae7 	vcmpe.f32	s12, s15
			IoMax2=Io;
 8001a08:	bf48      	it	mi
 8001a0a:	edcb 6a00 	vstrmi	s13, [fp]
		if(IMax<If)
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			IMax=If;
 8001a12:	bfc8      	it	gt
 8001a14:	ed80 6a00 	vstrgt	s12, [r0]
		}
		if(IMax2>If)
 8001a18:	4832      	ldr	r0, [pc, #200]	@ (8001ae4 <PWM_Generate+0x378>)
 8001a1a:	edd0 7a00 	vldr	s15, [r0]
 8001a1e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			{
			IMax2=If;
 8001a26:	bf48      	it	mi
 8001a28:	ed80 6a00 	vstrmi	s12, [r0]
			}

		if(iRms==399){
 8001a2c:	f240 108f 	movw	r0, #399	@ 0x18f
 8001a30:	4281      	cmp	r1, r0
 8001a32:	d065      	beq.n	8001b00 <PWM_Generate+0x394>
		}
//	data = Start_Data_Conversion();
//	float V_ref = calculate_PID_V_ref(data.If,data.Io,data.Vo);
//	float duty_cycle = calculate_Duty_Cycle(V_ref);
//	PWM_Genearte_GPIO(duty_cycle);
}
 8001a34:	ecbd 8b08 	vpop	{d8-d11}
 8001a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			TIM1->CCR3= -duty_cycle;
 8001a3c:	425b      	negs	r3, r3
			TIM1->CCR2= 0;
 8001a3e:	2500      	movs	r5, #0
 8001a40:	63a5      	str	r5, [r4, #56]	@ 0x38
			TIM1->CCR3= -duty_cycle;
 8001a42:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001a44:	e701      	b.n	800184a <PWM_Generate+0xde>
 8001a46:	bf00      	nop
 8001a48:	20000100 	.word	0x20000100
 8001a4c:	3f70cb29 	.word	0x3f70cb29
 8001a50:	20000830 	.word	0x20000830
 8001a54:	c3f24e14 	.word	0xc3f24e14
 8001a58:	3d1374bc 	.word	0x3d1374bc
 8001a5c:	200001e8 	.word	0x200001e8
 8001a60:	3d19999a 	.word	0x3d19999a
 8001a64:	200008ac 	.word	0x200008ac
 8001a68:	c194d2f2 	.word	0xc194d2f2
 8001a6c:	3e3c5048 	.word	0x3e3c5048
 8001a70:	2000002c 	.word	0x2000002c
 8001a74:	2000082c 	.word	0x2000082c
 8001a78:	c198147b 	.word	0xc198147b
 8001a7c:	3c16a07b 	.word	0x3c16a07b
 8001a80:	46033c00 	.word	0x46033c00
 8001a84:	42700000 	.word	0x42700000
 8001a88:	20000834 	.word	0x20000834
 8001a8c:	200008a4 	.word	0x200008a4
 8001a90:	200008b4 	.word	0x200008b4
 8001a94:	200008b0 	.word	0x200008b0
 8001a98:	200008a8 	.word	0x200008a8
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	2000001c 	.word	0x2000001c
 8001aa4:	400b212d 	.word	0x400b212d
 8001aa8:	bccccccd 	.word	0xbccccccd
 8001aac:	3f79999a 	.word	0x3f79999a
 8001ab0:	3ccccccd 	.word	0x3ccccccd
 8001ab4:	51eb851f 	.word	0x51eb851f
 8001ab8:	2000084c 	.word	0x2000084c
 8001abc:	20000864 	.word	0x20000864
 8001ac0:	2000086c 	.word	0x2000086c
 8001ac4:	c00b212d 	.word	0xc00b212d
 8001ac8:	3dcccccd 	.word	0x3dcccccd
 8001acc:	2000083c 	.word	0x2000083c
 8001ad0:	200008a0 	.word	0x200008a0
 8001ad4:	2000089c 	.word	0x2000089c
 8001ad8:	2000085c 	.word	0x2000085c
 8001adc:	2000088c 	.word	0x2000088c
 8001ae0:	2000087c 	.word	0x2000087c
 8001ae4:	20000878 	.word	0x20000878
 8001ae8:	20000890 	.word	0x20000890
 8001aec:	20000884 	.word	0x20000884
 8001af0:	20000844 	.word	0x20000844
 8001af4:	20000858 	.word	0x20000858
 8001af8:	43c78000 	.word	0x43c78000
 8001afc:	00000000 	.word	0x00000000
			pvRms=sqrt(vRms/iRms);
 8001b00:	ed1f ba03 	vldr	s22, [pc, #-12]	@ 8001af8 <PWM_Generate+0x38c>
			vMax=0;
 8001b04:	ed5f aa03 	vldr	s21, [pc, #-12]	@ 8001afc <PWM_Generate+0x390>
			pvRms=sqrt(vRms/iRms);
 8001b08:	eec5 7a8b 	vdiv.f32	s15, s11, s22
 8001b0c:	ee17 0a90 	vmov	r0, s15
 8001b10:	f7fe fcbe 	bl	8000490 <__aeabi_f2d>
 8001b14:	ec41 0b10 	vmov	d0, r0, r1
 8001b18:	f002 f8ae 	bl	8003c78 <sqrt>
 8001b1c:	ec51 0b10 	vmov	r0, r1, d0
 8001b20:	f7fe ffe6 	bl	8000af0 <__aeabi_d2f>
			pvMoy=vMoy/iRms;
 8001b24:	eeca 7a0b 	vdiv.f32	s15, s20, s22
			pMax2=vMax2;
 8001b28:	4a32      	ldr	r2, [pc, #200]	@ (8001bf4 <PWM_Generate+0x488>)
			pMax=vMax;
 8001b2a:	4b33      	ldr	r3, [pc, #204]	@ (8001bf8 <PWM_Generate+0x48c>)
			pMax2=vMax2;
 8001b2c:	6811      	ldr	r1, [r2, #0]
			vMax2=0;
 8001b2e:	edc2 aa00 	vstr	s21, [r2]
			pMax=vMax;
 8001b32:	681a      	ldr	r2, [r3, #0]
			vMax=0;
 8001b34:	edc3 aa00 	vstr	s21, [r3]
			pvRms=sqrt(vRms/iRms);
 8001b38:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <PWM_Generate+0x490>)
			vMoy=0;
 8001b3a:	edca aa00 	vstr	s21, [sl]
			pvRms=sqrt(vRms/iRms);
 8001b3e:	6018      	str	r0, [r3, #0]
			pvMoy=vMoy/iRms;
 8001b40:	4b2f      	ldr	r3, [pc, #188]	@ (8001c00 <PWM_Generate+0x494>)
			vRms=0;
 8001b42:	edc9 aa00 	vstr	s21, [r9]
			pvMoy=vMoy/iRms;
 8001b46:	edc3 7a00 	vstr	s15, [r3]
			pIoRms=sqrt(IoRms/iRms);
 8001b4a:	eec9 7a8b 	vdiv.f32	s15, s19, s22
			pMax2=vMax2;
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <PWM_Generate+0x498>)
 8001b50:	6019      	str	r1, [r3, #0]
			pMax=vMax;
 8001b52:	4b2d      	ldr	r3, [pc, #180]	@ (8001c08 <PWM_Generate+0x49c>)
 8001b54:	601a      	str	r2, [r3, #0]
			pIoRms=sqrt(IoRms/iRms);
 8001b56:	ee17 0a90 	vmov	r0, s15
 8001b5a:	f7fe fc99 	bl	8000490 <__aeabi_f2d>
 8001b5e:	ec41 0b10 	vmov	d0, r0, r1
 8001b62:	f002 f889 	bl	8003c78 <sqrt>
 8001b66:	ec51 0b10 	vmov	r0, r1, d0
 8001b6a:	f7fe ffc1 	bl	8000af0 <__aeabi_d2f>
			pIoMoy=IoMoy/iRms;
 8001b6e:	eec9 7a0b 	vdiv.f32	s15, s18, s22
			IopMax=IoMax;
 8001b72:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <PWM_Generate+0x4a0>)
			IopMax2=IoMax2;
 8001b74:	f8db 1000 	ldr.w	r1, [fp]
			IopMax=IoMax;
 8001b78:	681a      	ldr	r2, [r3, #0]
			IoMax=0;
 8001b7a:	edc3 aa00 	vstr	s21, [r3]
			pIoRms=sqrt(IoRms/iRms);
 8001b7e:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <PWM_Generate+0x4a4>)
			IoMoy=0;
 8001b80:	edc8 aa00 	vstr	s21, [r8]
			pIoRms=sqrt(IoRms/iRms);
 8001b84:	6018      	str	r0, [r3, #0]
			pIoMoy=IoMoy/iRms;
 8001b86:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <PWM_Generate+0x4a8>)
			IoRms=0;
 8001b88:	edc7 aa00 	vstr	s21, [r7]
			pIoMoy=IoMoy/iRms;
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
			pIRms=sqrt(IRms/iRms);
 8001b90:	eec8 7a8b 	vdiv.f32	s15, s17, s22
			IopMax2=IoMax2;
 8001b94:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <PWM_Generate+0x4ac>)
 8001b96:	6019      	str	r1, [r3, #0]
			IopMax=IoMax;
 8001b98:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <PWM_Generate+0x4b0>)
 8001b9a:	601a      	str	r2, [r3, #0]
			IoMax2=0;
 8001b9c:	edcb aa00 	vstr	s21, [fp]
			pIRms=sqrt(IRms/iRms);
 8001ba0:	ee17 0a90 	vmov	r0, s15
 8001ba4:	f7fe fc74 	bl	8000490 <__aeabi_f2d>
 8001ba8:	ec41 0b10 	vmov	d0, r0, r1
 8001bac:	f002 f864 	bl	8003c78 <sqrt>
 8001bb0:	ec51 0b10 	vmov	r0, r1, d0
 8001bb4:	f7fe ff9c 	bl	8000af0 <__aeabi_d2f>
			pIMoy=IMoy/iRms;
 8001bb8:	eec8 7a0b 	vdiv.f32	s15, s16, s22
			IpMax2=IMax2;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <PWM_Generate+0x4b4>)
			IpMax=IMax;
 8001bbe:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <PWM_Generate+0x4b8>)
			IRms=0;
 8001bc0:	edc5 aa00 	vstr	s21, [r5]
			IpMax2=IMax2;
 8001bc4:	681d      	ldr	r5, [r3, #0]
			IMax2=0;
 8001bc6:	edc3 aa00 	vstr	s21, [r3]
			IpMax=IMax;
 8001bca:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <PWM_Generate+0x4bc>)
			IMoy=0;
 8001bcc:	edc6 aa00 	vstr	s21, [r6]
			IpMax=IMax;
 8001bd0:	6819      	ldr	r1, [r3, #0]
			IMax=0;
 8001bd2:	edc3 aa00 	vstr	s21, [r3]
			iRms=0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	ecbd 8b08 	vpop	{d8-d11}
			iRms=0;
 8001bdc:	6023      	str	r3, [r4, #0]
			pIRms=sqrt(IRms/iRms);
 8001bde:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <PWM_Generate+0x4c0>)
			IpMax=IMax;
 8001be0:	6011      	str	r1, [r2, #0]
			pIRms=sqrt(IRms/iRms);
 8001be2:	6018      	str	r0, [r3, #0]
			pIMoy=IMoy/iRms;
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <PWM_Generate+0x4c4>)
			IpMax2=IMax2;
 8001be6:	4813      	ldr	r0, [pc, #76]	@ (8001c34 <PWM_Generate+0x4c8>)
			pIMoy=IMoy/iRms;
 8001be8:	edc3 7a00 	vstr	s15, [r3]
			IpMax2=IMax2;
 8001bec:	6005      	str	r5, [r0, #0]
}
 8001bee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000089c 	.word	0x2000089c
 8001bf8:	200008a0 	.word	0x200008a0
 8001bfc:	20000888 	.word	0x20000888
 8001c00:	20000880 	.word	0x20000880
 8001c04:	20000894 	.word	0x20000894
 8001c08:	20000898 	.word	0x20000898
 8001c0c:	2000085c 	.word	0x2000085c
 8001c10:	20000848 	.word	0x20000848
 8001c14:	20000840 	.word	0x20000840
 8001c18:	20000850 	.word	0x20000850
 8001c1c:	20000854 	.word	0x20000854
 8001c20:	20000878 	.word	0x20000878
 8001c24:	20000874 	.word	0x20000874
 8001c28:	2000087c 	.word	0x2000087c
 8001c2c:	20000868 	.word	0x20000868
 8001c30:	20000860 	.word	0x20000860
 8001c34:	20000870 	.word	0x20000870

08001c38 <PWM_Model_Init>:

void PWM_Model_Init(void){
	init_pid_controller();
 8001c38:	f7ff bb84 	b.w	8001344 <init_pid_controller>

08001c3c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <Error_Handler+0x2>

08001c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c44:	480d      	ldr	r0, [pc, #52]	@ (8001c7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c46:	490e      	ldr	r1, [pc, #56]	@ (8001c80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c48:	4a0e      	ldr	r2, [pc, #56]	@ (8001c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c5c:	4c0b      	ldr	r4, [pc, #44]	@ (8001c8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c6a:	f7ff fd75 	bl	8001758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f001 ffdf 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff fbe3 	bl	800143c <main>
  bx  lr    
 8001c76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c80:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001c84:	08005100 	.word	0x08005100
  ldr r2, =_sbss
 8001c88:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001c8c:	200009f4 	.word	0x200009f4

08001c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC_IRQHandler>
	...

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c96:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd0 <HAL_InitTick+0x3c>)
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <HAL_InitTick+0x40>)
 8001c9a:	7812      	ldrb	r2, [r2, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
{
 8001c9e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ca4:	fbb0 f0f2 	udiv	r0, r0, r2
 8001ca8:	fbb3 f0f0 	udiv	r0, r3, r0
 8001cac:	f000 faec 	bl	8002288 <HAL_SYSTICK_Config>
 8001cb0:	b908      	cbnz	r0, 8001cb6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	2d0f      	cmp	r5, #15
 8001cb4:	d901      	bls.n	8001cba <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001cb6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001cb8:	bd38      	pop	{r3, r4, r5, pc}
 8001cba:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 fa96 	bl	80021f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	@ (8001cd8 <HAL_InitTick+0x44>)
 8001cca:	4620      	mov	r0, r4
 8001ccc:	601d      	str	r5, [r3, #0]
}
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
 8001cd0:	20000030 	.word	0x20000030
 8001cd4:	20000018 	.word	0x20000018
 8001cd8:	20000034 	.word	0x20000034

08001cdc <HAL_Init>:
{
 8001cdc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_Init+0x30>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001cee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cf6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf8:	2003      	movs	r0, #3
 8001cfa:	f000 fa69 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfe:	200f      	movs	r0, #15
 8001d00:	f7ff ffc8 	bl	8001c94 <HAL_InitTick>
  HAL_MspInit();
 8001d04:	f7ff fbc0 	bl	8001488 <HAL_MspInit>
}
 8001d08:	2000      	movs	r0, #0
 8001d0a:	bd08      	pop	{r3, pc}
 8001d0c:	40023c00 	.word	0x40023c00

08001d10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d10:	4a03      	ldr	r2, [pc, #12]	@ (8001d20 <HAL_IncTick+0x10>)
 8001d12:	4b04      	ldr	r3, [pc, #16]	@ (8001d24 <HAL_IncTick+0x14>)
 8001d14:	6811      	ldr	r1, [r2, #0]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	440b      	add	r3, r1
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	200008b8 	.word	0x200008b8
 8001d24:	20000030 	.word	0x20000030

08001d28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d28:	4b01      	ldr	r3, [pc, #4]	@ (8001d30 <HAL_GetTick+0x8>)
 8001d2a:	6818      	ldr	r0, [r3, #0]
}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200008b8 	.word	0x200008b8

08001d34 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d34:	2800      	cmp	r0, #0
 8001d36:	f000 809e 	beq.w	8001e76 <HAL_ADC_Init+0x142>
{
 8001d3a:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d3c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001d3e:	4604      	mov	r4, r0
 8001d40:	b13d      	cbz	r5, 8001d52 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d44:	06db      	lsls	r3, r3, #27
 8001d46:	d50c      	bpl.n	8001d62 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8001d4e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8001d50:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001d52:	f7ff fbb5 	bl	80014c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001d56:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001d5a:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d5e:	06db      	lsls	r3, r3, #27
 8001d60:	d4f2      	bmi.n	8001d48 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001d62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d64:	4a47      	ldr	r2, [pc, #284]	@ (8001e84 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8001d66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d6a:	f023 0302 	bic.w	r3, r3, #2
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d74:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d76:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d78:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8001d7c:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d7e:	6851      	ldr	r1, [r2, #4]
 8001d80:	6860      	ldr	r0, [r4, #4]
 8001d82:	4301      	orrs	r1, r0
 8001d84:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d86:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d88:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d8a:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001d98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d9a:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d9c:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d9e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001da2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001daa:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dac:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	4302      	orrs	r2, r0
 8001db8:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dba:	4a33      	ldr	r2, [pc, #204]	@ (8001e88 <HAL_ADC_Init+0x154>)
 8001dbc:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dbe:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc0:	d051      	beq.n	8001e66 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dc2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dc6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4311      	orrs	r1, r2
 8001dce:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	4302      	orrs	r2, r0
 8001ddc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	f022 0202 	bic.w	r2, r2, #2
 8001de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	7e21      	ldrb	r1, [r4, #24]
 8001dea:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001dee:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001df0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001df4:	2a00      	cmp	r2, #0
 8001df6:	d040      	beq.n	8001e7a <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001df8:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dfa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e00:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e08:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	3901      	subs	r1, #1
 8001e0e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e12:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e16:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e18:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e20:	3901      	subs	r1, #1
 8001e22:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e28:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e2a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8001e38:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8001e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e46:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001e48:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e4a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001e4e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001e50:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001e52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e54:	f023 0303 	bic.w	r3, r3, #3
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001e64:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e66:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	e7b3      	b.n	8001dde <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
}
 8001e78:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	e7c7      	b.n	8001e14 <HAL_ADC_Init+0xe0>
 8001e84:	40012300 	.word	0x40012300
 8001e88:	0f000001 	.word	0x0f000001

08001e8c <HAL_ADC_Start_DMA>:
{
 8001e8c:	b570      	push	{r4, r5, r6, lr}
 8001e8e:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001e90:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
{
 8001e94:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001e96:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001e98:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0U;
 8001e9a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001e9c:	f000 808d 	beq.w	8001fba <HAL_ADC_Start_DMA+0x12e>
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ea0:	682e      	ldr	r6, [r5, #0]
 8001ea2:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eaa:	68b2      	ldr	r2, [r6, #8]
 8001eac:	07d4      	lsls	r4, r2, #31
 8001eae:	d414      	bmi.n	8001eda <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8001eb0:	68b2      	ldr	r2, [r6, #8]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb8:	4a43      	ldr	r2, [pc, #268]	@ (8001fc8 <HAL_ADC_Start_DMA+0x13c>)
 8001eba:	6810      	ldr	r0, [r2, #0]
 8001ebc:	4a43      	ldr	r2, [pc, #268]	@ (8001fcc <HAL_ADC_Start_DMA+0x140>)
 8001ebe:	fba2 2000 	umull	r2, r0, r2, r0
 8001ec2:	0c80      	lsrs	r0, r0, #18
 8001ec4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001ec8:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8001eca:	9a01      	ldr	r2, [sp, #4]
 8001ecc:	b12a      	cbz	r2, 8001eda <HAL_ADC_Start_DMA+0x4e>
      counter--;
 8001ece:	9c01      	ldr	r4, [sp, #4]
 8001ed0:	3c01      	subs	r4, #1
 8001ed2:	9401      	str	r4, [sp, #4]
    while (counter != 0U)
 8001ed4:	9801      	ldr	r0, [sp, #4]
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	d1f9      	bne.n	8001ece <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001eda:	68b2      	ldr	r2, [r6, #8]
 8001edc:	05d0      	lsls	r0, r2, #23
 8001ede:	d503      	bpl.n	8001ee8 <HAL_ADC_Start_DMA+0x5c>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ee0:	68b2      	ldr	r2, [r6, #8]
 8001ee2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ee6:	60b2      	str	r2, [r6, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ee8:	68b2      	ldr	r2, [r6, #8]
 8001eea:	07d2      	lsls	r2, r2, #31
 8001eec:	d54d      	bpl.n	8001f8a <HAL_ADC_Start_DMA+0xfe>
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 8001ef0:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8001ef4:	f020 0001 	bic.w	r0, r0, #1
 8001ef8:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8001efc:	6428      	str	r0, [r5, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001efe:	6872      	ldr	r2, [r6, #4]
 8001f00:	0554      	lsls	r4, r2, #21
 8001f02:	d505      	bpl.n	8001f10 <HAL_ADC_Start_DMA+0x84>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f04:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001f06:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8001f0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001f0e:	642a      	str	r2, [r5, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f10:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f12:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f18:	bf1c      	itt	ne
 8001f1a:	6c6a      	ldrne	r2, [r5, #68]	@ 0x44
 8001f1c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001f20:	646a      	str	r2, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f28:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f2a:	4929      	ldr	r1, [pc, #164]	@ (8001fd0 <HAL_ADC_Start_DMA+0x144>)
 8001f2c:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f2e:	4929      	ldr	r1, [pc, #164]	@ (8001fd4 <HAL_ADC_Start_DMA+0x148>)
 8001f30:	6401      	str	r1, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f32:	4929      	ldr	r1, [pc, #164]	@ (8001fd8 <HAL_ADC_Start_DMA+0x14c>)
 8001f34:	64c1      	str	r1, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f36:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 8001f3a:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f3c:	6871      	ldr	r1, [r6, #4]
 8001f3e:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8001f42:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f44:	68b1      	ldr	r1, [r6, #8]
 8001f46:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001f4a:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f4c:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 8001f50:	f000 fabe 	bl	80024d0 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f54:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <HAL_ADC_Start_DMA+0x150>)
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	06d0      	lsls	r0, r2, #27
 8001f5a:	d121      	bne.n	8001fa0 <HAL_ADC_Start_DMA+0x114>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f5c:	682a      	ldr	r2, [r5, #0]
 8001f5e:	4920      	ldr	r1, [pc, #128]	@ (8001fe0 <HAL_ADC_Start_DMA+0x154>)
 8001f60:	428a      	cmp	r2, r1
 8001f62:	d009      	beq.n	8001f78 <HAL_ADC_Start_DMA+0xec>
 8001f64:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8001f68:	428a      	cmp	r2, r1
 8001f6a:	d029      	beq.n	8001fc0 <HAL_ADC_Start_DMA+0x134>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f6c:	491d      	ldr	r1, [pc, #116]	@ (8001fe4 <HAL_ADC_Start_DMA+0x158>)
 8001f6e:	428a      	cmp	r2, r1
 8001f70:	d113      	bne.n	8001f9a <HAL_ADC_Start_DMA+0x10e>
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	06db      	lsls	r3, r3, #27
 8001f76:	d410      	bmi.n	8001f9a <HAL_ADC_Start_DMA+0x10e>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f78:	6893      	ldr	r3, [r2, #8]
 8001f7a:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
 8001f7e:	d10c      	bne.n	8001f9a <HAL_ADC_Start_DMA+0x10e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f80:	6893      	ldr	r3, [r2, #8]
 8001f82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f86:	6093      	str	r3, [r2, #8]
 8001f88:	e007      	b.n	8001f9a <HAL_ADC_Start_DMA+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001f8c:	f043 0310 	orr.w	r3, r3, #16
 8001f90:	642b      	str	r3, [r5, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f92:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	646b      	str	r3, [r5, #68]	@ 0x44
  return HAL_OK;
 8001f9a:	2000      	movs	r0, #0
}
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd70      	pop	{r4, r5, r6, pc}
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <HAL_ADC_Start_DMA+0x154>)
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d1f8      	bne.n	8001f9a <HAL_ADC_Start_DMA+0x10e>
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001fae:	d1f4      	bne.n	8001f9a <HAL_ADC_Start_DMA+0x10e>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	e7ef      	b.n	8001f9a <HAL_ADC_Start_DMA+0x10e>
  __HAL_LOCK(hadc);
 8001fba:	2002      	movs	r0, #2
}
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	06d9      	lsls	r1, r3, #27
 8001fc4:	d0d8      	beq.n	8001f78 <HAL_ADC_Start_DMA+0xec>
 8001fc6:	e7e8      	b.n	8001f9a <HAL_ADC_Start_DMA+0x10e>
 8001fc8:	20000018 	.word	0x20000018
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	08002015 	.word	0x08002015
 8001fd4:	08001fed 	.word	0x08001fed
 8001fd8:	08001ffd 	.word	0x08001ffd
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	40012000 	.word	0x40012000
 8001fe4:	40012200 	.word	0x40012200

08001fe8 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fec:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fee:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001ff0:	f7ff fffa 	bl	8001fe8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ff4:	bd08      	pop	{r3, pc}
 8001ff6:	bf00      	nop

08001ff8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop

08001ffc <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ffc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001ffe:	b508      	push	{r3, lr}
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002000:	2340      	movs	r3, #64	@ 0x40
 8002002:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002004:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800200c:	f7ff fff4 	bl	8001ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002010:	bd08      	pop	{r3, pc}
 8002012:	bf00      	nop

08002014 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002014:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002018:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 800201c:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002020:	d123      	bne.n	800206a <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002026:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002028:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800202a:	688a      	ldr	r2, [r1, #8]
 800202c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002030:	d117      	bne.n	8002062 <ADC_DMAConvCplt+0x4e>
 8002032:	7e1a      	ldrb	r2, [r3, #24]
 8002034:	b9aa      	cbnz	r2, 8002062 <ADC_DMAConvCplt+0x4e>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002036:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002038:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 800203c:	d002      	beq.n	8002044 <ADC_DMAConvCplt+0x30>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800203e:	688a      	ldr	r2, [r1, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002040:	0550      	lsls	r0, r2, #21
 8002042:	d40e      	bmi.n	8002062 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002044:	684a      	ldr	r2, [r1, #4]
 8002046:	f022 0220 	bic.w	r2, r2, #32
 800204a:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800204c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800204e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002054:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002056:	04d1      	lsls	r1, r2, #19
 8002058:	d403      	bmi.n	8002062 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800205a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f9de 	bl	8001424 <HAL_ADC_ConvCpltCallback>
}
 8002068:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800206a:	06d2      	lsls	r2, r2, #27
 800206c:	d404      	bmi.n	8002078 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800206e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8002070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ffbd 	bl	8001ff8 <HAL_ADC_ErrorCallback>
}
 800207e:	bd10      	pop	{r4, pc}

08002080 <HAL_ADC_ConfigChannel>:
{
 8002080:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8002082:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8002086:	b082      	sub	sp, #8
 8002088:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 800208a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800208c:	f04f 0000 	mov.w	r0, #0
 8002090:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002092:	f000 8093 	beq.w	80021bc <HAL_ADC_ConfigChannel+0x13c>
 8002096:	2301      	movs	r3, #1
 8002098:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800209c:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800209e:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020a0:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020a2:	2d09      	cmp	r5, #9
 80020a4:	b2a8      	uxth	r0, r5
 80020a6:	d828      	bhi.n	80020fa <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020a8:	691e      	ldr	r6, [r3, #16]
 80020aa:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80020ae:	f04f 0c07 	mov.w	ip, #7
 80020b2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80020b6:	ea26 060c 	bic.w	r6, r6, ip
 80020ba:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020bc:	691e      	ldr	r6, [r3, #16]
 80020be:	fa04 f40e 	lsl.w	r4, r4, lr
 80020c2:	4334      	orrs	r4, r6
 80020c4:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 80020c6:	684c      	ldr	r4, [r1, #4]
 80020c8:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ca:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 80020ce:	d82a      	bhi.n	8002126 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020d0:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80020d2:	3905      	subs	r1, #5
 80020d4:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020d8:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020da:	fa0c f101 	lsl.w	r1, ip, r1
 80020de:	ea24 0101 	bic.w	r1, r4, r1
 80020e2:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020e6:	4308      	orrs	r0, r1
 80020e8:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ea:	4936      	ldr	r1, [pc, #216]	@ (80021c4 <HAL_ADC_ConfigChannel+0x144>)
 80020ec:	428b      	cmp	r3, r1
 80020ee:	d02b      	beq.n	8002148 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 80020f6:	b002      	add	sp, #8
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020fa:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80020fe:	68de      	ldr	r6, [r3, #12]
 8002100:	f1ac 0c1e 	sub.w	ip, ip, #30
 8002104:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002108:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800210c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002110:	ea26 060c 	bic.w	r6, r6, ip
 8002114:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002116:	68de      	ldr	r6, [r3, #12]
 8002118:	4334      	orrs	r4, r6
 800211a:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 800211c:	684c      	ldr	r4, [r1, #4]
 800211e:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002120:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8002124:	d9d4      	bls.n	80020d0 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8002126:	2c0c      	cmp	r4, #12
 8002128:	d834      	bhi.n	8002194 <HAL_ADC_ConfigChannel+0x114>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800212a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800212c:	3923      	subs	r1, #35	@ 0x23
 800212e:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002130:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002132:	fa06 f101 	lsl.w	r1, r6, r1
 8002136:	ea24 0101 	bic.w	r1, r4, r1
 800213a:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800213c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800213e:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002140:	4920      	ldr	r1, [pc, #128]	@ (80021c4 <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002142:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002144:	428b      	cmp	r3, r1
 8002146:	d1d3      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x70>
 8002148:	2d12      	cmp	r5, #18
 800214a:	d030      	beq.n	80021ae <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800214c:	f1a5 0310 	sub.w	r3, r5, #16
 8002150:	2b01      	cmp	r3, #1
 8002152:	d8cd      	bhi.n	80020f0 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002154:	491c      	ldr	r1, [pc, #112]	@ (80021c8 <HAL_ADC_ConfigChannel+0x148>)
 8002156:	684b      	ldr	r3, [r1, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002158:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800215a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800215e:	604b      	str	r3, [r1, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002160:	d1c6      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_ADC_ConfigChannel+0x14c>)
 8002164:	f101 7146 	add.w	r1, r1, #51904512	@ 0x3180000
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f501 312e 	add.w	r1, r1, #178176	@ 0x2b800
 800216e:	f201 3183 	addw	r1, r1, #899	@ 0x383
 8002172:	fba1 1303 	umull	r1, r3, r1, r3
 8002176:	0c9b      	lsrs	r3, r3, #18
 8002178:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8002180:	9b01      	ldr	r3, [sp, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0b4      	beq.n	80020f0 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8002186:	9b01      	ldr	r3, [sp, #4]
 8002188:	3b01      	subs	r3, #1
 800218a:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 800218c:	9b01      	ldr	r3, [sp, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f9      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x106>
 8002192:	e7ad      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002194:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002196:	3941      	subs	r1, #65	@ 0x41
 8002198:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800219a:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800219c:	fa06 f101 	lsl.w	r1, r6, r1
 80021a0:	ea24 0101 	bic.w	r1, r4, r1
 80021a4:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021a8:	4308      	orrs	r0, r1
 80021aa:	62d8      	str	r0, [r3, #44]	@ 0x2c
 80021ac:	e79d      	b.n	80020ea <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021ae:	f8d1 3304 	ldr.w	r3, [r1, #772]	@ 0x304
 80021b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021b6:	f8c1 3304 	str.w	r3, [r1, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021ba:	e799      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80021bc:	2002      	movs	r0, #2
}
 80021be:	b002      	add	sp, #8
 80021c0:	bd70      	pop	{r4, r5, r6, pc}
 80021c2:	bf00      	nop
 80021c4:	40012000 	.word	0x40012000
 80021c8:	40012300 	.word	0x40012300
 80021cc:	20000018 	.word	0x20000018

080021d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4907      	ldr	r1, [pc, #28]	@ (80021f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80021d2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80021ea:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_NVIC_SetPriority+0x70>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fe:	f1c3 0e07 	rsb	lr, r3, #7
 8002202:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220a:	bf28      	it	cs
 800220c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002210:	f1bc 0f06 	cmp.w	ip, #6
 8002214:	d91c      	bls.n	8002250 <HAL_NVIC_SetPriority+0x5c>
 8002216:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002222:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	fa03 f30e 	lsl.w	r3, r3, lr
 800222e:	ea21 0303 	bic.w	r3, r1, r3
 8002232:	fa03 f30c 	lsl.w	r3, r3, ip
 8002236:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800223a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800223e:	db0a      	blt.n	8002256 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002240:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002244:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002248:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800224c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002250:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	4694      	mov	ip, r2
 8002254:	e7e7      	b.n	8002226 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <HAL_NVIC_SetPriority+0x74>)
 8002258:	f000 000f 	and.w	r0, r0, #15
 800225c:	4402      	add	r2, r0
 800225e:	7613      	strb	r3, [r2, #24]
 8002260:	f85d fb04 	ldr.w	pc, [sp], #4
 8002264:	e000ed00 	.word	0xe000ed00
 8002268:	e000ecfc 	.word	0xe000ecfc

0800226c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800226c:	2800      	cmp	r0, #0
 800226e:	db07      	blt.n	8002280 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_NVIC_EnableIRQ+0x18>)
 8002272:	0941      	lsrs	r1, r0, #5
 8002274:	2301      	movs	r3, #1
 8002276:	f000 001f 	and.w	r0, r0, #31
 800227a:	4083      	lsls	r3, r0
 800227c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100

08002288 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	3801      	subs	r0, #1
 800228a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800228e:	d301      	bcc.n	8002294 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002290:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002292:	4770      	bx	lr
{
 8002294:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	4c07      	ldr	r4, [pc, #28]	@ (80022b8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80022a2:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022aa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	619a      	str	r2, [r3, #24]
}
 80022ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	6119      	str	r1, [r3, #16]
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022bc:	b188      	cbz	r0, 80022e2 <HAL_DAC_Init+0x26>
{
 80022be:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022c0:	7903      	ldrb	r3, [r0, #4]
 80022c2:	4604      	mov	r4, r0
 80022c4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80022c8:	b13b      	cbz	r3, 80022da <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022ca:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80022cc:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022ce:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80022d0:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022d2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80022d4:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80022d6:	4618      	mov	r0, r3
}
 80022d8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80022da:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80022dc:	f7ff f944 	bl	8001568 <HAL_DAC_MspInit>
 80022e0:	e7f3      	b.n	80022ca <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80022e2:	2001      	movs	r0, #1
}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop

080022e8 <HAL_DAC_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022e8:	b368      	cbz	r0, 8002346 <HAL_DAC_Start+0x5e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022ea:	7942      	ldrb	r2, [r0, #5]
 80022ec:	2a01      	cmp	r2, #1
 80022ee:	4603      	mov	r3, r0
 80022f0:	d02b      	beq.n	800234a <HAL_DAC_Start+0x62>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80022f2:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80022f4:	2202      	movs	r2, #2
{
 80022f6:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 80022f8:	711a      	strb	r2, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80022fa:	6804      	ldr	r4, [r0, #0]
 80022fc:	f001 0c10 	and.w	ip, r1, #16
 8002300:	2201      	movs	r2, #1
 8002302:	fa02 f20c 	lsl.w	r2, r2, ip
 8002306:	4322      	orrs	r2, r4
 8002308:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 800230a:	b979      	cbnz	r1, 800232c <HAL_DAC_Start+0x44>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800230c:	6802      	ldr	r2, [r0, #0]
 800230e:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 8002312:	2a3c      	cmp	r2, #60	@ 0x3c
 8002314:	d103      	bne.n	800231e <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002316:	6842      	ldr	r2, [r0, #4]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800231e:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002320:	2201      	movs	r2, #1
 8002322:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 8002324:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 8002326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800232a:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800232c:	6801      	ldr	r1, [r0, #0]
 800232e:	223c      	movs	r2, #60	@ 0x3c
 8002330:	f401 1170 	and.w	r1, r1, #3932160	@ 0x3c0000
 8002334:	fa02 f20c 	lsl.w	r2, r2, ip
 8002338:	4291      	cmp	r1, r2
 800233a:	d1f0      	bne.n	800231e <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800233c:	6842      	ldr	r2, [r0, #4]
 800233e:	f042 0202 	orr.w	r2, r2, #2
 8002342:	6042      	str	r2, [r0, #4]
 8002344:	e7eb      	b.n	800231e <HAL_DAC_Start+0x36>
    return HAL_ERROR;
 8002346:	2001      	movs	r0, #1
 8002348:	4770      	bx	lr
  __HAL_LOCK(hdac);
 800234a:	2002      	movs	r0, #2
}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop

08002350 <HAL_DAC_ConfigChannel>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002350:	b320      	cbz	r0, 800239c <HAL_DAC_ConfigChannel+0x4c>
 8002352:	b319      	cbz	r1, 800239c <HAL_DAC_ConfigChannel+0x4c>
 8002354:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002356:	7940      	ldrb	r0, [r0, #5]
 8002358:	2801      	cmp	r0, #1
 800235a:	d021      	beq.n	80023a0 <HAL_DAC_ConfigChannel+0x50>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800235c:	2002      	movs	r0, #2
{
 800235e:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 8002360:	7118      	strb	r0, [r3, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002362:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 8002366:	681c      	ldr	r4, [r3, #0]
               << (Channel & 0x10UL));
 8002368:	f002 0210 	and.w	r2, r2, #16
  tmpreg1 = hdac->Instance->CR;
 800236c:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800236e:	4301      	orrs	r1, r0
               << (Channel & 0x10UL));
 8002370:	f640 70fe 	movw	r0, #4094	@ 0xffe
 8002374:	4090      	lsls	r0, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002376:	ea25 0000 	bic.w	r0, r5, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800237a:	4091      	lsls	r1, r2
 800237c:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800237e:	6021      	str	r1, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002380:	6821      	ldr	r1, [r4, #0]
 8002382:	20c0      	movs	r0, #192	@ 0xc0
 8002384:	fa00 f202 	lsl.w	r2, r0, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002388:	2500      	movs	r5, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800238a:	ea21 0202 	bic.w	r2, r1, r2
  hdac->State = HAL_DAC_STATE_READY;
 800238e:	2101      	movs	r1, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002390:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002392:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8002394:	715d      	strb	r5, [r3, #5]

  /* Return function status */
  return status;
 8002396:	4628      	mov	r0, r5
}
 8002398:	bc30      	pop	{r4, r5}
 800239a:	4770      	bx	lr
    return HAL_ERROR;
 800239c:	2001      	movs	r0, #1
 800239e:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80023a0:	2002      	movs	r0, #2
}
 80023a2:	4770      	bx	lr

080023a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a4:	b538      	push	{r3, r4, r5, lr}
 80023a6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff fcbe 	bl	8001d28 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ac:	2c00      	cmp	r4, #0
 80023ae:	d075      	beq.n	800249c <HAL_DMA_Init+0xf8>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023b0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80023b2:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b4:	2102      	movs	r1, #2
 80023b6:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80023ba:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	4605      	mov	r5, r0
 80023c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c8:	e005      	b.n	80023d6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ca:	f7ff fcad 	bl	8001d28 <HAL_GetTick>
 80023ce:	1b43      	subs	r3, r0, r5
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d839      	bhi.n	8002448 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	07d1      	lsls	r1, r2, #31
 80023da:	d4f6      	bmi.n	80023ca <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023dc:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80023e0:	68e1      	ldr	r1, [r4, #12]
 80023e2:	4302      	orrs	r2, r0
 80023e4:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e6:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ea:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ec:	432a      	orrs	r2, r5
 80023ee:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f0:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80023f2:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f4:	4302      	orrs	r2, r0
 80023f6:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f8:	4932      	ldr	r1, [pc, #200]	@ (80024c4 <HAL_DMA_Init+0x120>)
 80023fa:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fc:	6a25      	ldr	r5, [r4, #32]
 80023fe:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002400:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002402:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002404:	2904      	cmp	r1, #4
 8002406:	d026      	beq.n	8002456 <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002408:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800240a:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800240c:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002410:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002412:	b2d8      	uxtb	r0, r3
 8002414:	4a2c      	ldr	r2, [pc, #176]	@ (80024c8 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 8002416:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002418:	3810      	subs	r0, #16
 800241a:	fba2 5200 	umull	r5, r2, r2, r0
 800241e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002420:	492a      	ldr	r1, [pc, #168]	@ (80024cc <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002422:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002426:	5c89      	ldrb	r1, [r1, r2]
 8002428:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800242a:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 800242e:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002430:	bf88      	it	hi
 8002432:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002434:	223f      	movs	r2, #63	@ 0x3f
 8002436:	408a      	lsls	r2, r1
 8002438:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243a:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243c:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800243e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002440:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002442:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8002446:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002448:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800244a:	2220      	movs	r2, #32
 800244c:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8002452:	4618      	mov	r0, r3
}
 8002454:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002456:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 800245a:	4329      	orrs	r1, r5
 800245c:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 800245e:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002460:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8002462:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002464:	f021 0107 	bic.w	r1, r1, #7
 8002468:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800246a:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800246e:	2d00      	cmp	r5, #0
 8002470:	d0cf      	beq.n	8002412 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002472:	b928      	cbnz	r0, 8002480 <HAL_DMA_Init+0xdc>
  {
    switch (tmp)
 8002474:	2a01      	cmp	r2, #1
 8002476:	d021      	beq.n	80024bc <HAL_DMA_Init+0x118>
 8002478:	f032 0202 	bics.w	r2, r2, #2
 800247c:	d1c9      	bne.n	8002412 <HAL_DMA_Init+0x6e>
 800247e:	e006      	b.n	800248e <HAL_DMA_Init+0xea>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002480:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8002484:	d00c      	beq.n	80024a0 <HAL_DMA_Init+0xfc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002486:	2a02      	cmp	r2, #2
 8002488:	d903      	bls.n	8002492 <HAL_DMA_Init+0xee>
 800248a:	2a03      	cmp	r2, #3
 800248c:	d1c1      	bne.n	8002412 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800248e:	01ea      	lsls	r2, r5, #7
 8002490:	d5bf      	bpl.n	8002412 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002492:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002494:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002496:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002498:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 800249c:	2001      	movs	r0, #1
}
 800249e:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80024a0:	2a03      	cmp	r2, #3
 80024a2:	d8b6      	bhi.n	8002412 <HAL_DMA_Init+0x6e>
 80024a4:	a001      	add	r0, pc, #4	@ (adr r0, 80024ac <HAL_DMA_Init+0x108>)
 80024a6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	08002493 	.word	0x08002493
 80024b0:	0800248f 	.word	0x0800248f
 80024b4:	08002493 	.word	0x08002493
 80024b8:	080024bd 	.word	0x080024bd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024bc:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80024c0:	d1a7      	bne.n	8002412 <HAL_DMA_Init+0x6e>
 80024c2:	e7e6      	b.n	8002492 <HAL_DMA_Init+0xee>
 80024c4:	f010803f 	.word	0xf010803f
 80024c8:	aaaaaaab 	.word	0xaaaaaaab
 80024cc:	08004f10 	.word	0x08004f10

080024d0 <HAL_DMA_Start_IT>:
{
 80024d0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80024d2:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024d6:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80024d8:	2c01      	cmp	r4, #1
 80024da:	d00a      	beq.n	80024f2 <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 80024dc:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
  __HAL_LOCK(hdma);
 80024e0:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80024e4:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 80024e6:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ea:	d005      	beq.n	80024f8 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80024ec:	2300      	movs	r3, #0
 80024ee:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 80024f2:	2002      	movs	r0, #2
}
 80024f4:	bc70      	pop	{r4, r5, r6}
 80024f6:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	2602      	movs	r6, #2
 80024fa:	f880 6035 	strb.w	r6, [r0, #53]	@ 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024fe:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002500:	2600      	movs	r6, #0
 8002502:	6546      	str	r6, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002504:	6826      	ldr	r6, [r4, #0]
 8002506:	f426 2680 	bic.w	r6, r6, #262144	@ 0x40000
 800250a:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800250c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800250e:	6883      	ldr	r3, [r0, #8]
 8002510:	2b40      	cmp	r3, #64	@ 0x40
    hdma->Instance->PAR = DstAddress;
 8002512:	bf0e      	itee	eq
 8002514:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002516:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002518:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800251c:	bf08      	it	eq
 800251e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002520:	233f      	movs	r3, #63	@ 0x3f
 8002522:	4093      	lsls	r3, r2
 8002524:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002526:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002528:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800252a:	f043 0316 	orr.w	r3, r3, #22
 800252e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002530:	b11a      	cbz	r2, 800253a <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002542:	6023      	str	r3, [r4, #0]
}
 8002544:	bc70      	pop	{r4, r5, r6}
 8002546:	4770      	bx	lr

08002548 <HAL_DMA_IRQHandler>:
{
 8002548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254a:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 800254c:	4a67      	ldr	r2, [pc, #412]	@ (80026ec <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800254e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002550:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002556:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8002558:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800255a:	2208      	movs	r2, #8
 800255c:	409a      	lsls	r2, r3
 800255e:	422a      	tst	r2, r5
{
 8002560:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002562:	d003      	beq.n	800256c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002564:	6801      	ldr	r1, [r0, #0]
 8002566:	6808      	ldr	r0, [r1, #0]
 8002568:	0740      	lsls	r0, r0, #29
 800256a:	d478      	bmi.n	800265e <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800256c:	2201      	movs	r2, #1
 800256e:	409a      	lsls	r2, r3
 8002570:	422a      	tst	r2, r5
 8002572:	d003      	beq.n	800257c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002574:	6821      	ldr	r1, [r4, #0]
 8002576:	6949      	ldr	r1, [r1, #20]
 8002578:	0608      	lsls	r0, r1, #24
 800257a:	d46a      	bmi.n	8002652 <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800257c:	2204      	movs	r2, #4
 800257e:	409a      	lsls	r2, r3
 8002580:	422a      	tst	r2, r5
 8002582:	d003      	beq.n	800258c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002584:	6821      	ldr	r1, [r4, #0]
 8002586:	6809      	ldr	r1, [r1, #0]
 8002588:	0789      	lsls	r1, r1, #30
 800258a:	d45c      	bmi.n	8002646 <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800258c:	2210      	movs	r2, #16
 800258e:	409a      	lsls	r2, r3
 8002590:	422a      	tst	r2, r5
 8002592:	d003      	beq.n	800259c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002594:	6821      	ldr	r1, [r4, #0]
 8002596:	6808      	ldr	r0, [r1, #0]
 8002598:	0700      	lsls	r0, r0, #28
 800259a:	d441      	bmi.n	8002620 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800259c:	2220      	movs	r2, #32
 800259e:	409a      	lsls	r2, r3
 80025a0:	422a      	tst	r2, r5
 80025a2:	d014      	beq.n	80025ce <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025a4:	6821      	ldr	r1, [r4, #0]
 80025a6:	6808      	ldr	r0, [r1, #0]
 80025a8:	06c0      	lsls	r0, r0, #27
 80025aa:	d510      	bpl.n	80025ce <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ac:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ae:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 80025b2:	2a05      	cmp	r2, #5
 80025b4:	d063      	beq.n	800267e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025b6:	680b      	ldr	r3, [r1, #0]
 80025b8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025bc:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025be:	d07e      	beq.n	80026be <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c0:	0319      	lsls	r1, r3, #12
 80025c2:	f140 8089 	bpl.w	80026d8 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 80025c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80025c8:	b10b      	cbz	r3, 80025ce <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 80025ca:	4620      	mov	r0, r4
 80025cc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025ce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80025d0:	b323      	cbz	r3, 800261c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80025d4:	07da      	lsls	r2, r3, #31
 80025d6:	d51a      	bpl.n	800260e <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 80025d8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025da:	4945      	ldr	r1, [pc, #276]	@ (80026f0 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80025dc:	2305      	movs	r3, #5
 80025de:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80025e2:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025e4:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 80025e8:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80025ec:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e002      	b.n	80025f8 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025f2:	6813      	ldr	r3, [r2, #0]
 80025f4:	07db      	lsls	r3, r3, #31
 80025f6:	d504      	bpl.n	8002602 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80025f8:	9b01      	ldr	r3, [sp, #4]
 80025fa:	3301      	adds	r3, #1
 80025fc:	42b3      	cmp	r3, r6
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	d9f7      	bls.n	80025f2 <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8002602:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002604:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002606:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800260a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800260e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002610:	b123      	cbz	r3, 800261c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8002612:	4620      	mov	r0, r4
}
 8002614:	b003      	add	sp, #12
 8002616:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800261a:	4718      	bx	r3
}
 800261c:	b003      	add	sp, #12
 800261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002620:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002622:	680a      	ldr	r2, [r1, #0]
 8002624:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002628:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800262a:	d122      	bne.n	8002672 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800262c:	05d2      	lsls	r2, r2, #23
 800262e:	d403      	bmi.n	8002638 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002630:	680a      	ldr	r2, [r1, #0]
 8002632:	f022 0208 	bic.w	r2, r2, #8
 8002636:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002638:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800263a:	2a00      	cmp	r2, #0
 800263c:	d0ae      	beq.n	800259c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800263e:	4620      	mov	r0, r4
 8002640:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002642:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002644:	e7aa      	b.n	800259c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002646:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002648:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800264a:	f042 0204 	orr.w	r2, r2, #4
 800264e:	6562      	str	r2, [r4, #84]	@ 0x54
 8002650:	e79c      	b.n	800258c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002652:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002656:	f042 0202 	orr.w	r2, r2, #2
 800265a:	6562      	str	r2, [r4, #84]	@ 0x54
 800265c:	e78e      	b.n	800257c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800265e:	6808      	ldr	r0, [r1, #0]
 8002660:	f020 0004 	bic.w	r0, r0, #4
 8002664:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002666:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002668:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	6562      	str	r2, [r4, #84]	@ 0x54
 8002670:	e77c      	b.n	800256c <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002672:	0311      	lsls	r1, r2, #12
 8002674:	d5e0      	bpl.n	8002638 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002676:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002678:	2a00      	cmp	r2, #0
 800267a:	d1e0      	bne.n	800263e <HAL_DMA_IRQHandler+0xf6>
 800267c:	e78e      	b.n	800259c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800267e:	680a      	ldr	r2, [r1, #0]
 8002680:	f022 0216 	bic.w	r2, r2, #22
 8002684:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002686:	694a      	ldr	r2, [r1, #20]
 8002688:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800268c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800268e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002690:	b33a      	cbz	r2, 80026e2 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002692:	680a      	ldr	r2, [r1, #0]
 8002694:	f022 0208 	bic.w	r2, r2, #8
 8002698:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269a:	223f      	movs	r2, #63	@ 0x3f
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80026a0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a2:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80026a4:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80026a6:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80026a8:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80026ac:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80026b0:	2900      	cmp	r1, #0
 80026b2:	d0b3      	beq.n	800261c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80026b4:	4620      	mov	r0, r4
}
 80026b6:	b003      	add	sp, #12
 80026b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80026bc:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026be:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 80026c2:	d180      	bne.n	80025c6 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026c4:	680a      	ldr	r2, [r1, #0]
 80026c6:	f022 0210 	bic.w	r2, r2, #16
 80026ca:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80026cc:	2201      	movs	r2, #1
 80026ce:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80026d2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80026d6:	e776      	b.n	80025c6 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80026d8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f47f af75 	bne.w	80025ca <HAL_DMA_IRQHandler+0x82>
 80026e0:	e775      	b.n	80025ce <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d1d4      	bne.n	8002692 <HAL_DMA_IRQHandler+0x14a>
 80026e8:	e7d7      	b.n	800269a <HAL_DMA_IRQHandler+0x152>
 80026ea:	bf00      	nop
 80026ec:	20000018 	.word	0x20000018
 80026f0:	1b4e81b5 	.word	0x1b4e81b5

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f8:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fa:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fc:	f8df a218 	ldr.w	sl, [pc, #536]	@ 8002918 <HAL_GPIO_Init+0x224>
{
 8002700:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8002702:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002706:	4689      	mov	r9, r1
 8002708:	e003      	b.n	8002712 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	3301      	adds	r3, #1
 800270c:	2b10      	cmp	r3, #16
 800270e:	f000 8091 	beq.w	8002834 <HAL_GPIO_Init+0x140>
    ioposition = 0x01U << position;
 8002712:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002716:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 800271a:	43a2      	bics	r2, r4
 800271c:	d1f5      	bne.n	800270a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002722:	f001 0203 	and.w	r2, r1, #3
 8002726:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800272a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800272e:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002734:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002738:	d97f      	bls.n	800283a <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273a:	2a03      	cmp	r2, #3
 800273c:	f040 80b6 	bne.w	80028ac <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->MODER;
 8002740:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002742:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002746:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002748:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800274a:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800274e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002750:	d0db      	beq.n	800270a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002752:	2200      	movs	r2, #0
 8002754:	9203      	str	r2, [sp, #12]
 8002756:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800275a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800275e:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8002762:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8002766:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800276a:	9203      	str	r2, [sp, #12]
 800276c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002776:	f003 0703 	and.w	r7, r3, #3
 800277a:	260f      	movs	r6, #15
 800277c:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8002780:	00bf      	lsls	r7, r7, #2
 8002782:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002786:	4e61      	ldr	r6, [pc, #388]	@ (800290c <HAL_GPIO_Init+0x218>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8002788:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800278c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002790:	d027      	beq.n	80027e2 <HAL_GPIO_Init+0xee>
 8002792:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002796:	42b0      	cmp	r0, r6
 8002798:	f000 8093 	beq.w	80028c2 <HAL_GPIO_Init+0x1ce>
 800279c:	4e5c      	ldr	r6, [pc, #368]	@ (8002910 <HAL_GPIO_Init+0x21c>)
 800279e:	42b0      	cmp	r0, r6
 80027a0:	f000 8095 	beq.w	80028ce <HAL_GPIO_Init+0x1da>
 80027a4:	f8df c174 	ldr.w	ip, [pc, #372]	@ 800291c <HAL_GPIO_Init+0x228>
 80027a8:	4560      	cmp	r0, ip
 80027aa:	f000 8096 	beq.w	80028da <HAL_GPIO_Init+0x1e6>
 80027ae:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8002920 <HAL_GPIO_Init+0x22c>
 80027b2:	4560      	cmp	r0, ip
 80027b4:	f000 8097 	beq.w	80028e6 <HAL_GPIO_Init+0x1f2>
 80027b8:	f8df c168 	ldr.w	ip, [pc, #360]	@ 8002924 <HAL_GPIO_Init+0x230>
 80027bc:	4560      	cmp	r0, ip
 80027be:	f000 8098 	beq.w	80028f2 <HAL_GPIO_Init+0x1fe>
 80027c2:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8002928 <HAL_GPIO_Init+0x234>
 80027c6:	4560      	cmp	r0, ip
 80027c8:	f000 8099 	beq.w	80028fe <HAL_GPIO_Init+0x20a>
 80027cc:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 800292c <HAL_GPIO_Init+0x238>
 80027d0:	4560      	cmp	r0, ip
 80027d2:	bf0c      	ite	eq
 80027d4:	f04f 0c07 	moveq.w	ip, #7
 80027d8:	f04f 0c08 	movne.w	ip, #8
 80027dc:	fa0c f707 	lsl.w	r7, ip, r7
 80027e0:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e2:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002914 <HAL_GPIO_Init+0x220>)
 80027e6:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e8:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80027ea:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80027ee:	4e49      	ldr	r6, [pc, #292]	@ (8002914 <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 80027f0:	bf54      	ite	pl
 80027f2:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80027f4:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80027f8:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80027fa:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80027fc:	4e45      	ldr	r6, [pc, #276]	@ (8002914 <HAL_GPIO_Init+0x220>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027fe:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8002800:	bf54      	ite	pl
 8002802:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002804:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8002808:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 800280a:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280c:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800280e:	4e41      	ldr	r6, [pc, #260]	@ (8002914 <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 8002810:	bf54      	ite	pl
 8002812:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002814:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8002818:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281a:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800281c:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281e:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002822:	493c      	ldr	r1, [pc, #240]	@ (8002914 <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 8002824:	bf54      	ite	pl
 8002826:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002828:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282c:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 800282e:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002830:	f47f af6f 	bne.w	8002712 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8002834:	b005      	add	sp, #20
 8002836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800283a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800283c:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002840:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8002844:	fa07 f70c 	lsl.w	r7, r7, ip
 8002848:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800284c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800284e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002850:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002854:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8002858:	409f      	lsls	r7, r3
 800285a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800285e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002860:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002862:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002866:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800286a:	fa07 f70c 	lsl.w	r7, r7, ip
 800286e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002874:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002876:	f47f af63 	bne.w	8002740 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 800287a:	08df      	lsrs	r7, r3, #3
 800287c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002880:	9701      	str	r7, [sp, #4]
 8002882:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002884:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8002888:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800288a:	f003 0e07 	and.w	lr, r3, #7
 800288e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002892:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002894:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002898:	fa06 fe0e 	lsl.w	lr, r6, lr
 800289c:	9e00      	ldr	r6, [sp, #0]
 800289e:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80028a2:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028a4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80028a8:	6237      	str	r7, [r6, #32]
 80028aa:	e749      	b.n	8002740 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 80028ac:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ae:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b2:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80028b6:	fa07 f70c 	lsl.w	r7, r7, ip
 80028ba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80028be:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c0:	e73e      	b.n	8002740 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c2:	f04f 0c01 	mov.w	ip, #1
 80028c6:	fa0c f707 	lsl.w	r7, ip, r7
 80028ca:	433d      	orrs	r5, r7
 80028cc:	e789      	b.n	80027e2 <HAL_GPIO_Init+0xee>
 80028ce:	f04f 0c02 	mov.w	ip, #2
 80028d2:	fa0c f707 	lsl.w	r7, ip, r7
 80028d6:	433d      	orrs	r5, r7
 80028d8:	e783      	b.n	80027e2 <HAL_GPIO_Init+0xee>
 80028da:	f04f 0c03 	mov.w	ip, #3
 80028de:	fa0c f707 	lsl.w	r7, ip, r7
 80028e2:	433d      	orrs	r5, r7
 80028e4:	e77d      	b.n	80027e2 <HAL_GPIO_Init+0xee>
 80028e6:	f04f 0c04 	mov.w	ip, #4
 80028ea:	fa0c f707 	lsl.w	r7, ip, r7
 80028ee:	433d      	orrs	r5, r7
 80028f0:	e777      	b.n	80027e2 <HAL_GPIO_Init+0xee>
 80028f2:	f04f 0c05 	mov.w	ip, #5
 80028f6:	fa0c f707 	lsl.w	r7, ip, r7
 80028fa:	433d      	orrs	r5, r7
 80028fc:	e771      	b.n	80027e2 <HAL_GPIO_Init+0xee>
 80028fe:	f04f 0c06 	mov.w	ip, #6
 8002902:	fa0c f707 	lsl.w	r7, ip, r7
 8002906:	433d      	orrs	r5, r7
 8002908:	e76b      	b.n	80027e2 <HAL_GPIO_Init+0xee>
 800290a:	bf00      	nop
 800290c:	40020000 	.word	0x40020000
 8002910:	40020800 	.word	0x40020800
 8002914:	40013c00 	.word	0x40013c00
 8002918:	40023800 	.word	0x40023800
 800291c:	40020c00 	.word	0x40020c00
 8002920:	40021000 	.word	0x40021000
 8002924:	40021400 	.word	0x40021400
 8002928:	40021800 	.word	0x40021800
 800292c:	40021c00 	.word	0x40021c00

08002930 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002930:	b902      	cbnz	r2, 8002934 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002932:	0409      	lsls	r1, r1, #16
 8002934:	6181      	str	r1, [r0, #24]
  }
}
 8002936:	4770      	bx	lr

08002938 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002938:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800293a:	ea01 0203 	and.w	r2, r1, r3
 800293e:	ea21 0103 	bic.w	r1, r1, r3
 8002942:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002946:	6181      	str	r1, [r0, #24]
}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800294c:	2800      	cmp	r0, #0
 800294e:	f000 81d8 	beq.w	8002d02 <HAL_RCC_OscConfig+0x3b6>
{
 8002952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	6803      	ldr	r3, [r0, #0]
 8002958:	07dd      	lsls	r5, r3, #31
{
 800295a:	b082      	sub	sp, #8
 800295c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	d52f      	bpl.n	80029c0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002960:	499d      	ldr	r1, [pc, #628]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 8002962:	688a      	ldr	r2, [r1, #8]
 8002964:	f002 020c 	and.w	r2, r2, #12
 8002968:	2a04      	cmp	r2, #4
 800296a:	f000 80ec 	beq.w	8002b46 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296e:	688a      	ldr	r2, [r1, #8]
 8002970:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002974:	2a08      	cmp	r2, #8
 8002976:	f000 80e2 	beq.w	8002b3e <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297a:	6863      	ldr	r3, [r4, #4]
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002980:	f000 80eb 	beq.w	8002b5a <HAL_RCC_OscConfig+0x20e>
 8002984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002988:	f000 8173 	beq.w	8002c72 <HAL_RCC_OscConfig+0x326>
 800298c:	4d92      	ldr	r5, [pc, #584]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 800298e:	682a      	ldr	r2, [r5, #0]
 8002990:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002994:	602a      	str	r2, [r5, #0]
 8002996:	682a      	ldr	r2, [r5, #0]
 8002998:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800299c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 80e0 	bne.w	8002b64 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff f9c0 	bl	8001d28 <HAL_GetTick>
 80029a8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e005      	b.n	80029b8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff f9bc 	bl	8001d28 <HAL_GetTick>
 80029b0:	1b80      	subs	r0, r0, r6
 80029b2:	2864      	cmp	r0, #100	@ 0x64
 80029b4:	f200 8100 	bhi.w	8002bb8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b8:	682b      	ldr	r3, [r5, #0]
 80029ba:	039f      	lsls	r7, r3, #14
 80029bc:	d4f6      	bmi.n	80029ac <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	079d      	lsls	r5, r3, #30
 80029c2:	d528      	bpl.n	8002a16 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c4:	4a84      	ldr	r2, [pc, #528]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 80029c6:	6891      	ldr	r1, [r2, #8]
 80029c8:	f011 0f0c 	tst.w	r1, #12
 80029cc:	f000 809b 	beq.w	8002b06 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d0:	6891      	ldr	r1, [r2, #8]
 80029d2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d6:	2908      	cmp	r1, #8
 80029d8:	f000 8091 	beq.w	8002afe <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029dc:	68e3      	ldr	r3, [r4, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 810c 	beq.w	8002bfc <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b7d      	ldr	r3, [pc, #500]	@ (8002bdc <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	4e7c      	ldr	r6, [pc, #496]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029ec:	f7ff f99c 	bl	8001d28 <HAL_GetTick>
 80029f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	e005      	b.n	8002a00 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f4:	f7ff f998 	bl	8001d28 <HAL_GetTick>
 80029f8:	1b40      	subs	r0, r0, r5
 80029fa:	2802      	cmp	r0, #2
 80029fc:	f200 80dc 	bhi.w	8002bb8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a00:	6833      	ldr	r3, [r6, #0]
 8002a02:	079f      	lsls	r7, r3, #30
 8002a04:	d5f6      	bpl.n	80029f4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a06:	6833      	ldr	r3, [r6, #0]
 8002a08:	6922      	ldr	r2, [r4, #16]
 8002a0a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002a0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002a12:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	071a      	lsls	r2, r3, #28
 8002a18:	d45c      	bmi.n	8002ad4 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1a:	075d      	lsls	r5, r3, #29
 8002a1c:	d53a      	bpl.n	8002a94 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 8002a20:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002a22:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	f040 8088 	bne.w	8002b3a <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a34:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a3e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	4e67      	ldr	r6, [pc, #412]	@ (8002be0 <HAL_RCC_OscConfig+0x294>)
 8002a42:	6833      	ldr	r3, [r6, #0]
 8002a44:	05d8      	lsls	r0, r3, #23
 8002a46:	f140 80a7 	bpl.w	8002b98 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4a:	68a3      	ldr	r3, [r4, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	f000 80b7 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x274>
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	f000 811d 	beq.w	8002c92 <HAL_RCC_OscConfig+0x346>
 8002a58:	4e5f      	ldr	r6, [pc, #380]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 8002a5a:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8002a5c:	f022 0201 	bic.w	r2, r2, #1
 8002a60:	6732      	str	r2, [r6, #112]	@ 0x70
 8002a62:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8002a64:	f022 0204 	bic.w	r2, r2, #4
 8002a68:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f040 80ad 	bne.w	8002bca <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7ff f95a 	bl	8001d28 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002a78:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7a:	e005      	b.n	8002a88 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7ff f954 	bl	8001d28 <HAL_GetTick>
 8002a80:	1bc0      	subs	r0, r0, r7
 8002a82:	4540      	cmp	r0, r8
 8002a84:	f200 8098 	bhi.w	8002bb8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002a8a:	079b      	lsls	r3, r3, #30
 8002a8c:	d4f6      	bmi.n	8002a7c <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a8e:	2d00      	cmp	r5, #0
 8002a90:	f040 80f9 	bne.w	8002c86 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a94:	69a3      	ldr	r3, [r4, #24]
 8002a96:	b1cb      	cbz	r3, 8002acc <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a98:	4d4f      	ldr	r5, [pc, #316]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 8002a9a:	68aa      	ldr	r2, [r5, #8]
 8002a9c:	f002 020c 	and.w	r2, r2, #12
 8002aa0:	2a08      	cmp	r2, #8
 8002aa2:	f000 80bc 	beq.w	8002c1e <HAL_RCC_OscConfig+0x2d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa6:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b4c      	ldr	r3, [pc, #304]	@ (8002bdc <HAL_RCC_OscConfig+0x290>)
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab0:	f000 80f9 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff f938 	bl	8001d28 <HAL_GetTick>
 8002ab8:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	e004      	b.n	8002ac6 <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abc:	f7ff f934 	bl	8001d28 <HAL_GetTick>
 8002ac0:	1b00      	subs	r0, r0, r4
 8002ac2:	2802      	cmp	r0, #2
 8002ac4:	d878      	bhi.n	8002bb8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	682b      	ldr	r3, [r5, #0]
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	d4f7      	bmi.n	8002abc <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002acc:	2000      	movs	r0, #0
}
 8002ace:	b002      	add	sp, #8
 8002ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ad4:	6963      	ldr	r3, [r4, #20]
 8002ad6:	b1fb      	cbz	r3, 8002b18 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8002ad8:	4b40      	ldr	r3, [pc, #256]	@ (8002bdc <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	4e3f      	ldr	r6, [pc, #252]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8002adc:	2201      	movs	r2, #1
 8002ade:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8002ae2:	f7ff f921 	bl	8001d28 <HAL_GetTick>
 8002ae6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae8:	e004      	b.n	8002af4 <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aea:	f7ff f91d 	bl	8001d28 <HAL_GetTick>
 8002aee:	1b40      	subs	r0, r0, r5
 8002af0:	2802      	cmp	r0, #2
 8002af2:	d861      	bhi.n	8002bb8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af4:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002af6:	079b      	lsls	r3, r3, #30
 8002af8:	d5f7      	bpl.n	8002aea <HAL_RCC_OscConfig+0x19e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	e78d      	b.n	8002a1a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	6852      	ldr	r2, [r2, #4]
 8002b00:	0251      	lsls	r1, r2, #9
 8002b02:	f53f af6b 	bmi.w	80029dc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	4a34      	ldr	r2, [pc, #208]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	0792      	lsls	r2, r2, #30
 8002b0c:	d538      	bpl.n	8002b80 <HAL_RCC_OscConfig+0x234>
 8002b0e:	68e2      	ldr	r2, [r4, #12]
 8002b10:	2a01      	cmp	r2, #1
 8002b12:	d035      	beq.n	8002b80 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8002b14:	2001      	movs	r0, #1
 8002b16:	e7da      	b.n	8002ace <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8002b18:	4a30      	ldr	r2, [pc, #192]	@ (8002bdc <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1a:	4e2f      	ldr	r6, [pc, #188]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8002b1c:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8002b20:	f7ff f902 	bl	8001d28 <HAL_GetTick>
 8002b24:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b26:	e004      	b.n	8002b32 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b28:	f7ff f8fe 	bl	8001d28 <HAL_GetTick>
 8002b2c:	1b40      	subs	r0, r0, r5
 8002b2e:	2802      	cmp	r0, #2
 8002b30:	d842      	bhi.n	8002bb8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b32:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002b34:	079f      	lsls	r7, r3, #30
 8002b36:	d4f7      	bmi.n	8002b28 <HAL_RCC_OscConfig+0x1dc>
 8002b38:	e7df      	b.n	8002afa <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8002b3a:	2500      	movs	r5, #0
 8002b3c:	e780      	b.n	8002a40 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3e:	684a      	ldr	r2, [r1, #4]
 8002b40:	0251      	lsls	r1, r2, #9
 8002b42:	f57f af1a 	bpl.w	800297a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b46:	4a24      	ldr	r2, [pc, #144]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	0392      	lsls	r2, r2, #14
 8002b4c:	f57f af38 	bpl.w	80029c0 <HAL_RCC_OscConfig+0x74>
 8002b50:	6862      	ldr	r2, [r4, #4]
 8002b52:	2a00      	cmp	r2, #0
 8002b54:	f47f af34 	bne.w	80029c0 <HAL_RCC_OscConfig+0x74>
 8002b58:	e7dc      	b.n	8002b14 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 8002b5c:	6813      	ldr	r3, [r2, #0]
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b64:	f7ff f8e0 	bl	8001d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b68:	4e1b      	ldr	r6, [pc, #108]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002b6a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6c:	e004      	b.n	8002b78 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6e:	f7ff f8db 	bl	8001d28 <HAL_GetTick>
 8002b72:	1b40      	subs	r0, r0, r5
 8002b74:	2864      	cmp	r0, #100	@ 0x64
 8002b76:	d81f      	bhi.n	8002bb8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b78:	6833      	ldr	r3, [r6, #0]
 8002b7a:	039b      	lsls	r3, r3, #14
 8002b7c:	d5f7      	bpl.n	8002b6e <HAL_RCC_OscConfig+0x222>
 8002b7e:	e71e      	b.n	80029be <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4915      	ldr	r1, [pc, #84]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 8002b82:	6920      	ldr	r0, [r4, #16]
 8002b84:	680a      	ldr	r2, [r1, #0]
 8002b86:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8002b8a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002b8e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b90:	071a      	lsls	r2, r3, #28
 8002b92:	f57f af42 	bpl.w	8002a1a <HAL_RCC_OscConfig+0xce>
 8002b96:	e79d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b98:	6833      	ldr	r3, [r6, #0]
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b9e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002ba0:	f7ff f8c2 	bl	8001d28 <HAL_GetTick>
 8002ba4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba6:	6833      	ldr	r3, [r6, #0]
 8002ba8:	05d9      	lsls	r1, r3, #23
 8002baa:	f53f af4e 	bmi.w	8002a4a <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bae:	f7ff f8bb 	bl	8001d28 <HAL_GetTick>
 8002bb2:	1bc0      	subs	r0, r0, r7
 8002bb4:	2802      	cmp	r0, #2
 8002bb6:	d9f6      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8002bb8:	2003      	movs	r0, #3
}
 8002bba:	b002      	add	sp, #8
 8002bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc0:	4a05      	ldr	r2, [pc, #20]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
 8002bc2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002bca:	f7ff f8ad 	bl	8001d28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bce:	4f02      	ldr	r7, [pc, #8]	@ (8002bd8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002bd0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x2a2>
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	42470000 	.word	0x42470000
 8002be0:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7ff f8a0 	bl	8001d28 <HAL_GetTick>
 8002be8:	1b80      	subs	r0, r0, r6
 8002bea:	4540      	cmp	r0, r8
 8002bec:	d8e4      	bhi.n	8002bb8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bf0:	079a      	lsls	r2, r3, #30
 8002bf2:	d5f7      	bpl.n	8002be4 <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 8002bf4:	2d00      	cmp	r5, #0
 8002bf6:	f43f af4d 	beq.w	8002a94 <HAL_RCC_OscConfig+0x148>
 8002bfa:	e044      	b.n	8002c86 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8002bfc:	4a42      	ldr	r2, [pc, #264]	@ (8002d08 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4e43      	ldr	r6, [pc, #268]	@ (8002d0c <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8002c00:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c02:	f7ff f891 	bl	8001d28 <HAL_GetTick>
 8002c06:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c08:	e004      	b.n	8002c14 <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7ff f88d 	bl	8001d28 <HAL_GetTick>
 8002c0e:	1b40      	subs	r0, r0, r5
 8002c10:	2802      	cmp	r0, #2
 8002c12:	d8d1      	bhi.n	8002bb8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c14:	6833      	ldr	r3, [r6, #0]
 8002c16:	0799      	lsls	r1, r3, #30
 8002c18:	d4f7      	bmi.n	8002c0a <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	e6fb      	b.n	8002a16 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	f43f af78 	beq.w	8002b14 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8002c24:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c26:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c28:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2c:	4291      	cmp	r1, r2
 8002c2e:	f47f af71 	bne.w	8002b14 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c34:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c38:	4291      	cmp	r1, r2
 8002c3a:	f47f af6b 	bne.w	8002b14 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002c40:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002c44:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c46:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002c4a:	f47f af63 	bne.w	8002b14 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002c50:	0852      	lsrs	r2, r2, #1
 8002c52:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002c56:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c58:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002c5c:	f47f af5a 	bne.w	8002b14 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c60:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002c62:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c66:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002c6a:	bf14      	ite	ne
 8002c6c:	2001      	movne	r0, #1
 8002c6e:	2000      	moveq	r0, #0
 8002c70:	e72d      	b.n	8002ace <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c72:	4b26      	ldr	r3, [pc, #152]	@ (8002d0c <HAL_RCC_OscConfig+0x3c0>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c82:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c84:	e76e      	b.n	8002b64 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c86:	4a21      	ldr	r2, [pc, #132]	@ (8002d0c <HAL_RCC_OscConfig+0x3c0>)
 8002c88:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c90:	e700      	b.n	8002a94 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c92:	4b1e      	ldr	r3, [pc, #120]	@ (8002d0c <HAL_RCC_OscConfig+0x3c0>)
 8002c94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c96:	f042 0204 	orr.w	r2, r2, #4
 8002c9a:	671a      	str	r2, [r3, #112]	@ 0x70
 8002c9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca4:	e791      	b.n	8002bca <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8002ca6:	f7ff f83f 	bl	8001d28 <HAL_GetTick>
 8002caa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cac:	e005      	b.n	8002cba <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7ff f83b 	bl	8001d28 <HAL_GetTick>
 8002cb2:	1b80      	subs	r0, r0, r6
 8002cb4:	2802      	cmp	r0, #2
 8002cb6:	f63f af7f 	bhi.w	8002bb8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	682b      	ldr	r3, [r5, #0]
 8002cbc:	0199      	lsls	r1, r3, #6
 8002cbe:	d4f6      	bmi.n	8002cae <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cc0:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002cc4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002ccc:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8002cd0:	0852      	lsrs	r2, r2, #1
 8002cd2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002cd6:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002cd8:	490b      	ldr	r1, [pc, #44]	@ (8002d08 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002cde:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ce2:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002ce4:	f7ff f820 	bl	8001d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce8:	4d08      	ldr	r5, [pc, #32]	@ (8002d0c <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8002cea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cec:	e005      	b.n	8002cfa <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cee:	f7ff f81b 	bl	8001d28 <HAL_GetTick>
 8002cf2:	1b00      	subs	r0, r0, r4
 8002cf4:	2802      	cmp	r0, #2
 8002cf6:	f63f af5f 	bhi.w	8002bb8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	682b      	ldr	r3, [r5, #0]
 8002cfc:	019a      	lsls	r2, r3, #6
 8002cfe:	d5f6      	bpl.n	8002cee <HAL_RCC_OscConfig+0x3a2>
 8002d00:	e6e4      	b.n	8002acc <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8002d02:	2001      	movs	r0, #1
}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	42470000 	.word	0x42470000
 8002d0c:	40023800 	.word	0x40023800

08002d10 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d10:	4916      	ldr	r1, [pc, #88]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002d12:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d14:	688b      	ldr	r3, [r1, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d01b      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x46>
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d117      	bne.n	8002d52 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d22:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d24:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d26:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d28:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d2c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d30:	d113      	bne.n	8002d5a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d32:	480f      	ldr	r0, [pc, #60]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x60>)
 8002d34:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002d38:	fba1 0100 	umull	r0, r1, r1, r0
 8002d3c:	f7fd ff28 	bl	8000b90 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d40:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x5c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d48:	3301      	adds	r3, #1
 8002d4a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002d4c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d50:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002d52:	4807      	ldr	r0, [pc, #28]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002d54:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d56:	4807      	ldr	r0, [pc, #28]	@ (8002d74 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002d58:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5a:	4806      	ldr	r0, [pc, #24]	@ (8002d74 <HAL_RCC_GetSysClockFreq+0x64>)
 8002d5c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002d60:	2300      	movs	r3, #0
 8002d62:	fba1 0100 	umull	r0, r1, r1, r0
 8002d66:	f7fd ff13 	bl	8000b90 <__aeabi_uldivmod>
 8002d6a:	e7e9      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x30>
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	00f42400 	.word	0x00f42400
 8002d74:	007a1200 	.word	0x007a1200

08002d78 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	f000 8087 	beq.w	8002e8c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7e:	4a48      	ldr	r2, [pc, #288]	@ (8002ea0 <HAL_RCC_ClockConfig+0x128>)
 8002d80:	6813      	ldr	r3, [r2, #0]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	428b      	cmp	r3, r1
{
 8002d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d8c:	460d      	mov	r5, r1
 8002d8e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	d209      	bcs.n	8002da6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	b2cb      	uxtb	r3, r1
 8002d94:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	6813      	ldr	r3, [r2, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	428b      	cmp	r3, r1
 8002d9e:	d002      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002da0:	2001      	movs	r0, #1
}
 8002da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	0798      	lsls	r0, r3, #30
 8002daa:	d514      	bpl.n	8002dd6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	0759      	lsls	r1, r3, #29
 8002dae:	d504      	bpl.n	8002dba <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db0:	493c      	ldr	r1, [pc, #240]	@ (8002ea4 <HAL_RCC_ClockConfig+0x12c>)
 8002db2:	688a      	ldr	r2, [r1, #8]
 8002db4:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002db8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	071a      	lsls	r2, r3, #28
 8002dbc:	d504      	bpl.n	8002dc8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dbe:	4939      	ldr	r1, [pc, #228]	@ (8002ea4 <HAL_RCC_ClockConfig+0x12c>)
 8002dc0:	688a      	ldr	r2, [r1, #8]
 8002dc2:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8002dc6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	4936      	ldr	r1, [pc, #216]	@ (8002ea4 <HAL_RCC_ClockConfig+0x12c>)
 8002dca:	68a0      	ldr	r0, [r4, #8]
 8002dcc:	688a      	ldr	r2, [r1, #8]
 8002dce:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002dd2:	4302      	orrs	r2, r0
 8002dd4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	07df      	lsls	r7, r3, #31
 8002dd8:	d521      	bpl.n	8002e1e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dda:	6862      	ldr	r2, [r4, #4]
 8002ddc:	2a01      	cmp	r2, #1
 8002dde:	d057      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de0:	1e93      	subs	r3, r2, #2
 8002de2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea4 <HAL_RCC_ClockConfig+0x12c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de8:	d94d      	bls.n	8002e86 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	0799      	lsls	r1, r3, #30
 8002dec:	d5d8      	bpl.n	8002da0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dee:	4e2d      	ldr	r6, [pc, #180]	@ (8002ea4 <HAL_RCC_ClockConfig+0x12c>)
 8002df0:	68b3      	ldr	r3, [r6, #8]
 8002df2:	f023 0303 	bic.w	r3, r3, #3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002dfa:	f7fe ff95 	bl	8001d28 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfe:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002e02:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e04:	e004      	b.n	8002e10 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e06:	f7fe ff8f 	bl	8001d28 <HAL_GetTick>
 8002e0a:	1bc0      	subs	r0, r0, r7
 8002e0c:	4540      	cmp	r0, r8
 8002e0e:	d844      	bhi.n	8002e9a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e10:	68b3      	ldr	r3, [r6, #8]
 8002e12:	6862      	ldr	r2, [r4, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002e1c:	d1f3      	bne.n	8002e06 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1e:	4a20      	ldr	r2, [pc, #128]	@ (8002ea0 <HAL_RCC_ClockConfig+0x128>)
 8002e20:	6813      	ldr	r3, [r2, #0]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	42ab      	cmp	r3, r5
 8002e28:	d906      	bls.n	8002e38 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	b2eb      	uxtb	r3, r5
 8002e2c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	42ab      	cmp	r3, r5
 8002e36:	d1b3      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	075a      	lsls	r2, r3, #29
 8002e3c:	d506      	bpl.n	8002e4c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3e:	4919      	ldr	r1, [pc, #100]	@ (8002ea4 <HAL_RCC_ClockConfig+0x12c>)
 8002e40:	68e0      	ldr	r0, [r4, #12]
 8002e42:	688a      	ldr	r2, [r1, #8]
 8002e44:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8002e48:	4302      	orrs	r2, r0
 8002e4a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4c:	071b      	lsls	r3, r3, #28
 8002e4e:	d507      	bpl.n	8002e60 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <HAL_RCC_ClockConfig+0x12c>)
 8002e52:	6921      	ldr	r1, [r4, #16]
 8002e54:	6893      	ldr	r3, [r2, #8]
 8002e56:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002e5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e5e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e60:	f7ff ff56 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002e64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea4 <HAL_RCC_ClockConfig+0x12c>)
 8002e66:	4c10      	ldr	r4, [pc, #64]	@ (8002ea8 <HAL_RCC_ClockConfig+0x130>)
 8002e68:	6892      	ldr	r2, [r2, #8]
 8002e6a:	4910      	ldr	r1, [pc, #64]	@ (8002eac <HAL_RCC_ClockConfig+0x134>)
 8002e6c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002e70:	4603      	mov	r3, r0
 8002e72:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002e74:	480e      	ldr	r0, [pc, #56]	@ (8002eb0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e76:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002e78:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e7a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002e7c:	f7fe ff0a 	bl	8001c94 <HAL_InitTick>
  return HAL_OK;
 8002e80:	2000      	movs	r0, #0
}
 8002e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	0198      	lsls	r0, r3, #6
 8002e88:	d4b1      	bmi.n	8002dee <HAL_RCC_ClockConfig+0x76>
 8002e8a:	e789      	b.n	8002da0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002e8c:	2001      	movs	r0, #1
}
 8002e8e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e90:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <HAL_RCC_ClockConfig+0x12c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	039e      	lsls	r6, r3, #14
 8002e96:	d4aa      	bmi.n	8002dee <HAL_RCC_ClockConfig+0x76>
 8002e98:	e782      	b.n	8002da0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002e9a:	2003      	movs	r0, #3
 8002e9c:	e781      	b.n	8002da2 <HAL_RCC_ClockConfig+0x2a>
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	08004f00 	.word	0x08004f00
 8002eac:	20000018 	.word	0x20000018
 8002eb0:	20000034 	.word	0x20000034

08002eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002eb6:	6803      	ldr	r3, [r0, #0]
 8002eb8:	f013 0f05 	tst.w	r3, #5
{
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ec0:	d104      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ec2:	0798      	lsls	r0, r3, #30
 8002ec4:	d43b      	bmi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ec6:	2000      	movs	r0, #0
}
 8002ec8:	b003      	add	sp, #12
 8002eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002ecc:	4b45      	ldr	r3, [pc, #276]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ece:	4e46      	ldr	r6, [pc, #280]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002ed4:	f7fe ff28 	bl	8001d28 <HAL_GetTick>
 8002ed8:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eda:	e004      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x32>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002edc:	f7fe ff24 	bl	8001d28 <HAL_GetTick>
 8002ee0:	1b43      	subs	r3, r0, r5
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d828      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ee6:	6833      	ldr	r3, [r6, #0]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	d4f7      	bmi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002eec:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 8002ef0:	071b      	lsls	r3, r3, #28
 8002ef2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 8002ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ef8:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002efc:	2301      	movs	r3, #1
 8002efe:	6693      	str	r3, [r2, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002f00:	f7fe ff12 	bl	8001d28 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f04:	4e38      	ldr	r6, [pc, #224]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    tickstart = HAL_GetTick();
 8002f06:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f08:	e004      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x60>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f0a:	f7fe ff0d 	bl	8001d28 <HAL_GetTick>
 8002f0e:	1b43      	subs	r3, r0, r5
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d811      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f14:	6833      	ldr	r3, [r6, #0]
 8002f16:	011f      	lsls	r7, r3, #4
 8002f18:	d5f7      	bpl.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	e7d1      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8002f1e:	f7fe ff03 	bl	8001d28 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8002f26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002f2a:	079b      	lsls	r3, r3, #30
 8002f2c:	d43c      	bmi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe fefb 	bl	8001d28 <HAL_GetTick>
 8002f32:	1b80      	subs	r0, r0, r6
 8002f34:	42b8      	cmp	r0, r7
 8002f36:	d9f7      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x74>
        return HAL_TIMEOUT;
 8002f38:	2003      	movs	r0, #3
}
 8002f3a:	b003      	add	sp, #12
 8002f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    PWR->CR |= PWR_CR_DBP;
 8002f40:	4d2a      	ldr	r5, [pc, #168]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x138>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	2200      	movs	r2, #0
 8002f44:	9201      	str	r2, [sp, #4]
 8002f46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f48:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002f4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002f60:	f7fe fee2 	bl	8001d28 <HAL_GetTick>
 8002f64:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f66:	e004      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f68:	f7fe fede 	bl	8001d28 <HAL_GetTick>
 8002f6c:	1b83      	subs	r3, r0, r6
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d8e2      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f72:	682b      	ldr	r3, [r5, #0]
 8002f74:	05d9      	lsls	r1, r3, #23
 8002f76:	d5f7      	bpl.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f78:	4d1b      	ldr	r5, [pc, #108]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f7a:	68e3      	ldr	r3, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f7e:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8002f82:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8002f86:	d012      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002f88:	428a      	cmp	r2, r1
 8002f8a:	d010      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xfa>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f8c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f8e:	4a15      	ldr	r2, [pc, #84]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f90:	2101      	movs	r1, #1
 8002f92:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8002fa0:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fa2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002fa4:	07da      	lsls	r2, r3, #31
 8002fa6:	d4ba      	bmi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa8:	68e3      	ldr	r3, [r4, #12]
 8002faa:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8002fae:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8002fb2:	d00b      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x118>
 8002fb4:	490c      	ldr	r1, [pc, #48]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fb6:	688a      	ldr	r2, [r1, #8]
 8002fb8:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002fbc:	608a      	str	r2, [r1, #8]
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fc0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8002fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fca:	e77c      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x12>
 8002fcc:	4806      	ldr	r0, [pc, #24]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fce:	6882      	ldr	r2, [r0, #8]
 8002fd0:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002fd4:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8002fd8:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	6082      	str	r2, [r0, #8]
 8002fe0:	e7ed      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8002fe2:	bf00      	nop
 8002fe4:	42470000 	.word	0x42470000
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40007000 	.word	0x40007000

08002ff0 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ff0:	6803      	ldr	r3, [r0, #0]
{
 8002ff2:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ff4:	68dc      	ldr	r4, [r3, #12]
 8002ff6:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8002ffa:	d002      	beq.n	8003002 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8002ffc:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8002ffe:	4620      	mov	r0, r4
 8003000:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 800300c:	f7fe fe8c 	bl	8001d28 <HAL_GetTick>
 8003010:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	065b      	lsls	r3, r3, #25
 8003018:	d4f1      	bmi.n	8002ffe <RTC_EnterInitMode+0xe>
 800301a:	2c00      	cmp	r4, #0
 800301c:	d1ef      	bne.n	8002ffe <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800301e:	f7fe fe83 	bl	8001d28 <HAL_GetTick>
 8003022:	1b83      	subs	r3, r0, r6
 8003024:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003028:	d9f3      	bls.n	8003012 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800302a:	2304      	movs	r3, #4
 800302c:	776b      	strb	r3, [r5, #29]
        status = HAL_ERROR;
 800302e:	2401      	movs	r4, #1
 8003030:	e7ef      	b.n	8003012 <RTC_EnterInitMode+0x22>
 8003032:	bf00      	nop

08003034 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003034:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003036:	6803      	ldr	r3, [r0, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800303e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	0692      	lsls	r2, r2, #26
 8003044:	d501      	bpl.n	800304a <RTC_ExitInitMode+0x16>
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8003048:	bd38      	pop	{r3, r4, r5, pc}
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800304a:	4a0a      	ldr	r2, [pc, #40]	@ (8003074 <RTC_ExitInitMode+0x40>)
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8003050:	f7fe fe6a 	bl	8001d28 <HAL_GetTick>
 8003054:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	069b      	lsls	r3, r3, #26
 800305c:	d4f3      	bmi.n	8003046 <RTC_ExitInitMode+0x12>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800305e:	f7fe fe63 	bl	8001d28 <HAL_GetTick>
 8003062:	1b43      	subs	r3, r0, r5
 8003064:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003068:	d9f5      	bls.n	8003056 <RTC_ExitInitMode+0x22>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800306a:	2304      	movs	r3, #4
 800306c:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 800306e:	2001      	movs	r0, #1
}
 8003070:	bd38      	pop	{r3, r4, r5, pc}
 8003072:	bf00      	nop
 8003074:	00017f5f 	.word	0x00017f5f

08003078 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8003078:	2800      	cmp	r0, #0
 800307a:	d045      	beq.n	8003108 <HAL_RTC_Init+0x90>
{
 800307c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800307e:	7f43      	ldrb	r3, [r0, #29]
 8003080:	4604      	mov	r4, r0
 8003082:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003086:	b14b      	cbz	r3, 800309c <HAL_RTC_Init+0x24>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003088:	2202      	movs	r2, #2
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800308a:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800308c:	7762      	strb	r2, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	06d2      	lsls	r2, r2, #27
 8003092:	d507      	bpl.n	80030a4 <HAL_RTC_Init+0x2c>
    hrtc->State = HAL_RTC_STATE_READY;
 8003094:	2301      	movs	r3, #1
 8003096:	7763      	strb	r3, [r4, #29]
 8003098:	2000      	movs	r0, #0
}
 800309a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800309c:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800309e:	f7fe fa9b 	bl	80015d8 <HAL_RTC_MspInit>
 80030a2:	e7f1      	b.n	8003088 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030a4:	21ca      	movs	r1, #202	@ 0xca
 80030a6:	2253      	movs	r2, #83	@ 0x53
 80030a8:	6259      	str	r1, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80030aa:	4620      	mov	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80030ae:	f7ff ff9f 	bl	8002ff0 <RTC_EnterInitMode>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030b2:	6823      	ldr	r3, [r4, #0]
    if (status == HAL_OK)
 80030b4:	b110      	cbz	r0, 80030bc <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b6:	22ff      	movs	r2, #255	@ 0xff
 80030b8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030bc:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030be:	6862      	ldr	r2, [r4, #4]
 80030c0:	6925      	ldr	r5, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030c2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80030c6:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80030ca:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030cc:	6961      	ldr	r1, [r4, #20]
 80030ce:	6898      	ldr	r0, [r3, #8]
 80030d0:	432a      	orrs	r2, r5
 80030d2:	430a      	orrs	r2, r1
 80030d4:	4302      	orrs	r2, r0
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030d6:	68e1      	ldr	r1, [r4, #12]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030d8:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030da:	6119      	str	r1, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68a1      	ldr	r1, [r4, #8]
 80030e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030e4:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80030e6:	4620      	mov	r0, r4
 80030e8:	f7ff ffa4 	bl	8003034 <RTC_ExitInitMode>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80030ec:	6823      	ldr	r3, [r4, #0]
    if (status == HAL_OK)
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d1e1      	bne.n	80030b6 <HAL_RTC_Init+0x3e>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80030f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030f4:	69a0      	ldr	r0, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80030f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030fe:	21ff      	movs	r1, #255	@ 0xff
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003100:	4302      	orrs	r2, r0
 8003102:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003104:	6259      	str	r1, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8003106:	e7c5      	b.n	8003094 <HAL_RTC_Init+0x1c>
    return HAL_ERROR;
 8003108:	2001      	movs	r0, #1
}
 800310a:	4770      	bx	lr

0800310c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310e:	6a02      	ldr	r2, [r0, #32]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	6202      	str	r2, [r0, #32]
{
 8003116:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003118:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800311a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800311c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800311e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003122:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003124:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003126:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800312a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800312c:	4d0e      	ldr	r5, [pc, #56]	@ (8003168 <TIM_OC1_SetConfig+0x5c>)
 800312e:	42a8      	cmp	r0, r5
 8003130:	d00a      	beq.n	8003148 <TIM_OC1_SetConfig+0x3c>
 8003132:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003136:	42a8      	cmp	r0, r5
 8003138:	d006      	beq.n	8003148 <TIM_OC1_SetConfig+0x3c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800313a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800313c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800313e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003140:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8003142:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8003144:	6203      	str	r3, [r0, #32]
}
 8003146:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8003148:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800314a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800314e:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003150:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003154:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003158:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800315c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003160:	ea4c 0404 	orr.w	r4, ip, r4
 8003164:	e7e9      	b.n	800313a <TIM_OC1_SetConfig+0x2e>
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000

0800316c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800316e:	6a02      	ldr	r2, [r0, #32]
 8003170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003174:	6202      	str	r2, [r0, #32]
{
 8003176:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800317a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800317c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800317e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003182:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003184:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003186:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800318a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800318e:	4d0f      	ldr	r5, [pc, #60]	@ (80031cc <TIM_OC3_SetConfig+0x60>)
 8003190:	42a8      	cmp	r0, r5
 8003192:	d00a      	beq.n	80031aa <TIM_OC3_SetConfig+0x3e>
 8003194:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003198:	42a8      	cmp	r0, r5
 800319a:	d006      	beq.n	80031aa <TIM_OC3_SetConfig+0x3e>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800319c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800319e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80031a0:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80031a2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80031a4:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80031a6:	6203      	str	r3, [r0, #32]
}
 80031a8:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031aa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031b0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031b4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031b8:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031bc:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80031c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031c4:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
 80031c8:	e7e8      	b.n	800319c <TIM_OC3_SetConfig+0x30>
 80031ca:	bf00      	nop
 80031cc:	40010000 	.word	0x40010000

080031d0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031d2:	6a02      	ldr	r2, [r0, #32]
 80031d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031d8:	6202      	str	r2, [r0, #32]
{
 80031da:	b430      	push	{r4, r5}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031de:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031e2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031ea:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80031ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031f0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f4:	4d09      	ldr	r5, [pc, #36]	@ (800321c <TIM_OC4_SetConfig+0x4c>)
 80031f6:	42a8      	cmp	r0, r5
 80031f8:	d00a      	beq.n	8003210 <TIM_OC4_SetConfig+0x40>
 80031fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031fe:	42a8      	cmp	r0, r5
 8003200:	d006      	beq.n	8003210 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003202:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003204:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003206:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003208:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 800320a:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 800320c:	6203      	str	r3, [r0, #32]
}
 800320e:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003210:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003212:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003216:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800321a:	e7f2      	b.n	8003202 <TIM_OC4_SetConfig+0x32>
 800321c:	40010000 	.word	0x40010000

08003220 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003220:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003224:	2b01      	cmp	r3, #1
 8003226:	d12f      	bne.n	8003288 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003228:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322a:	4918      	ldr	r1, [pc, #96]	@ (800328c <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	2202      	movs	r2, #2
 800322e:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003232:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003234:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323c:	d019      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x52>
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003242:	d016      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x52>
 8003244:	4a12      	ldr	r2, [pc, #72]	@ (8003290 <HAL_TIM_Base_Start_IT+0x70>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x52>
 800324a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800324e:	4293      	cmp	r3, r2
 8003250:	d00f      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x52>
 8003252:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003256:	4293      	cmp	r3, r2
 8003258:	d00b      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x52>
 800325a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x52>
 8003262:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x52>
 800326a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800326e:	4293      	cmp	r3, r2
 8003270:	d104      	bne.n	800327c <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003278:	2a06      	cmp	r2, #6
 800327a:	d003      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003284:	2000      	movs	r0, #0
 8003286:	4770      	bx	lr
    return HAL_ERROR;
 8003288:	2001      	movs	r0, #1
}
 800328a:	4770      	bx	lr
 800328c:	40010000 	.word	0x40010000
 8003290:	40000400 	.word	0x40000400

08003294 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop

08003298 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003298:	2900      	cmp	r1, #0
 800329a:	d139      	bne.n	8003310 <HAL_TIM_OC_Start+0x78>
 800329c:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d13d      	bne.n	8003320 <HAL_TIM_OC_Start+0x88>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a4:	2302      	movs	r3, #2
 80032a6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032aa:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032ac:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032b0:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032b2:	2201      	movs	r2, #1
 80032b4:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80032b6:	ea20 0002 	bic.w	r0, r0, r2
 80032ba:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032bc:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032be:	4926      	ldr	r1, [pc, #152]	@ (8003358 <HAL_TIM_OC_Start+0xc0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c0:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032c2:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c4:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032c6:	d02d      	beq.n	8003324 <HAL_TIM_OC_Start+0x8c>
 80032c8:	4a24      	ldr	r2, [pc, #144]	@ (800335c <HAL_TIM_OC_Start+0xc4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02a      	beq.n	8003324 <HAL_TIM_OC_Start+0x8c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d2:	d012      	beq.n	80032fa <HAL_TIM_OC_Start+0x62>
 80032d4:	4a22      	ldr	r2, [pc, #136]	@ (8003360 <HAL_TIM_OC_Start+0xc8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00f      	beq.n	80032fa <HAL_TIM_OC_Start+0x62>
 80032da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <HAL_TIM_OC_Start+0x62>
 80032e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <HAL_TIM_OC_Start+0x62>
 80032ea:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_OC_Start+0x62>
 80032f2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d104      	bne.n	8003304 <HAL_TIM_OC_Start+0x6c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003300:	2a06      	cmp	r2, #6
 8003302:	d003      	beq.n	800330c <HAL_TIM_OC_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800330c:	2000      	movs	r0, #0
 800330e:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003310:	2904      	cmp	r1, #4
 8003312:	d010      	beq.n	8003336 <HAL_TIM_OC_Start+0x9e>
 8003314:	2908      	cmp	r1, #8
 8003316:	d016      	beq.n	8003346 <HAL_TIM_OC_Start+0xae>
 8003318:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800331c:	2b01      	cmp	r3, #1
 800331e:	d006      	beq.n	800332e <HAL_TIM_OC_Start+0x96>
    return HAL_ERROR;
 8003320:	2001      	movs	r0, #1
}
 8003322:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8003324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003326:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800332a:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332c:	e7e5      	b.n	80032fa <HAL_TIM_OC_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800332e:	2302      	movs	r3, #2
 8003330:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8003334:	e7b9      	b.n	80032aa <HAL_TIM_OC_Start+0x12>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003336:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800333a:	2b01      	cmp	r3, #1
 800333c:	d1f0      	bne.n	8003320 <HAL_TIM_OC_Start+0x88>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800333e:	2302      	movs	r3, #2
 8003340:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8003344:	e7b1      	b.n	80032aa <HAL_TIM_OC_Start+0x12>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003346:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800334a:	2b01      	cmp	r3, #1
 800334c:	d1e8      	bne.n	8003320 <HAL_TIM_OC_Start+0x88>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800334e:	2302      	movs	r3, #2
 8003350:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8003354:	e7a9      	b.n	80032aa <HAL_TIM_OC_Start+0x12>
 8003356:	bf00      	nop
 8003358:	40010000 	.word	0x40010000
 800335c:	40010400 	.word	0x40010400
 8003360:	40000400 	.word	0x40000400

08003364 <HAL_TIM_OC_Start_IT>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003364:	2900      	cmp	r1, #0
 8003366:	d13d      	bne.n	80033e4 <HAL_TIM_OC_Start_IT+0x80>
 8003368:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800336c:	2b01      	cmp	r3, #1
 800336e:	d146      	bne.n	80033fe <HAL_TIM_OC_Start_IT+0x9a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003370:	6803      	ldr	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003372:	2202      	movs	r2, #2
 8003374:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	f042 0202 	orr.w	r2, r2, #2
 800337e:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8003380:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003382:	f001 011f 	and.w	r1, r1, #31
 8003386:	2201      	movs	r2, #1
 8003388:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 800338a:	ea20 0002 	bic.w	r0, r0, r2
 800338e:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003390:	6a18      	ldr	r0, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003392:	492e      	ldr	r1, [pc, #184]	@ (800344c <HAL_TIM_OC_Start_IT+0xe8>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003394:	4302      	orrs	r2, r0
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003396:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003398:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800339a:	d032      	beq.n	8003402 <HAL_TIM_OC_Start_IT+0x9e>
 800339c:	4a2c      	ldr	r2, [pc, #176]	@ (8003450 <HAL_TIM_OC_Start_IT+0xec>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02f      	beq.n	8003402 <HAL_TIM_OC_Start_IT+0x9e>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a6:	d012      	beq.n	80033ce <HAL_TIM_OC_Start_IT+0x6a>
 80033a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003454 <HAL_TIM_OC_Start_IT+0xf0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00f      	beq.n	80033ce <HAL_TIM_OC_Start_IT+0x6a>
 80033ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <HAL_TIM_OC_Start_IT+0x6a>
 80033b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_TIM_OC_Start_IT+0x6a>
 80033be:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_OC_Start_IT+0x6a>
 80033c6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d104      	bne.n	80033d8 <HAL_TIM_OC_Start_IT+0x74>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	2a06      	cmp	r2, #6
 80033d6:	d003      	beq.n	80033e0 <HAL_TIM_OC_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
{
 80033e0:	2000      	movs	r0, #0
 80033e2:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033e4:	2904      	cmp	r1, #4
 80033e6:	d011      	beq.n	800340c <HAL_TIM_OC_Start_IT+0xa8>
 80033e8:	2908      	cmp	r1, #8
 80033ea:	d01c      	beq.n	8003426 <HAL_TIM_OC_Start_IT+0xc2>
 80033ec:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d104      	bne.n	80033fe <HAL_TIM_OC_Start_IT+0x9a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f4:	2302      	movs	r3, #2
  switch (Channel)
 80033f6:	290c      	cmp	r1, #12
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f8:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  switch (Channel)
 80033fc:	d020      	beq.n	8003440 <HAL_TIM_OC_Start_IT+0xdc>
{
 80033fe:	2001      	movs	r0, #1
}
 8003400:	4770      	bx	lr
      __HAL_TIM_MOE_ENABLE(htim);
 8003402:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003404:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340a:	e7e0      	b.n	80033ce <HAL_TIM_OC_Start_IT+0x6a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800340c:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8003410:	2b01      	cmp	r3, #1
 8003412:	d1f4      	bne.n	80033fe <HAL_TIM_OC_Start_IT+0x9a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003414:	6803      	ldr	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003416:	2202      	movs	r2, #2
 8003418:	f880 203f 	strb.w	r2, [r0, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	f042 0204 	orr.w	r2, r2, #4
 8003422:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8003424:	e7ac      	b.n	8003380 <HAL_TIM_OC_Start_IT+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003426:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800342a:	2b01      	cmp	r3, #1
 800342c:	d1e7      	bne.n	80033fe <HAL_TIM_OC_Start_IT+0x9a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800342e:	6803      	ldr	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003430:	2202      	movs	r2, #2
 8003432:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	f042 0208 	orr.w	r2, r2, #8
 800343c:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 800343e:	e79f      	b.n	8003380 <HAL_TIM_OC_Start_IT+0x1c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003440:	6803      	ldr	r3, [r0, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	f042 0210 	orr.w	r2, r2, #16
 8003448:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 800344a:	e799      	b.n	8003380 <HAL_TIM_OC_Start_IT+0x1c>
 800344c:	40010000 	.word	0x40010000
 8003450:	40010400 	.word	0x40010400
 8003454:	40000400 	.word	0x40000400

08003458 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop

0800345c <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800345c:	f7ff bf1c 	b.w	8003298 <HAL_TIM_OC_Start>

08003460 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003460:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d071      	beq.n	800354c <HAL_TIM_ConfigClockSource+0xec>
 8003468:	4602      	mov	r2, r0
{
 800346a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800346e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8003474:	2001      	movs	r0, #1
 8003476:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800347a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003480:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003484:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003486:	680b      	ldr	r3, [r1, #0]
 8003488:	2b60      	cmp	r3, #96	@ 0x60
 800348a:	d061      	beq.n	8003550 <HAL_TIM_ConfigClockSource+0xf0>
 800348c:	d824      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x78>
 800348e:	2b40      	cmp	r3, #64	@ 0x40
 8003490:	d077      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x122>
 8003492:	d94a      	bls.n	800352a <HAL_TIM_ConfigClockSource+0xca>
 8003494:	2b50      	cmp	r3, #80	@ 0x50
 8003496:	d117      	bne.n	80034c8 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8003498:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800349a:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800349c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800349e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80034a2:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a4:	6a23      	ldr	r3, [r4, #32]
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ac:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80034b6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80034b8:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80034ba:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80034bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c0:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80034c4:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80034ca:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80034d0:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80034d4:	bc30      	pop	{r4, r5}
 80034d6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80034d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034dc:	d0f3      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x66>
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e2:	d110      	bne.n	8003506 <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034e4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80034e8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034ea:	432b      	orrs	r3, r5
 80034ec:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ee:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80034f6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80034f8:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034fa:	68a3      	ldr	r3, [r4, #8]
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003500:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2000      	movs	r0, #0
 8003504:	e7e0      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003506:	2b70      	cmp	r3, #112	@ 0x70
 8003508:	d1de      	bne.n	80034c8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800350a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800350e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003510:	432b      	orrs	r3, r5
 8003512:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003514:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003518:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800351c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800351e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003520:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003522:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003526:	60a3      	str	r3, [r4, #8]
      break;
 8003528:	e7cd      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800352a:	2b20      	cmp	r3, #32
 800352c:	d002      	beq.n	8003534 <HAL_TIM_ConfigClockSource+0xd4>
 800352e:	d909      	bls.n	8003544 <HAL_TIM_ConfigClockSource+0xe4>
 8003530:	2b30      	cmp	r3, #48	@ 0x30
 8003532:	d1c9      	bne.n	80034c8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8003534:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003536:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800353a:	430b      	orrs	r3, r1
 800353c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003540:	60a3      	str	r3, [r4, #8]
}
 8003542:	e7c0      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003544:	f033 0110 	bics.w	r1, r3, #16
 8003548:	d1be      	bne.n	80034c8 <HAL_TIM_ConfigClockSource+0x68>
 800354a:	e7f3      	b.n	8003534 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 800354c:	2002      	movs	r0, #2
}
 800354e:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8003550:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8003552:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003554:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003556:	6a21      	ldr	r1, [r4, #32]
 8003558:	f021 0110 	bic.w	r1, r1, #16
 800355c:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355e:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003560:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003564:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8003568:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800356c:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003570:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8003572:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003574:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357a:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800357e:	60a3      	str	r3, [r4, #8]
}
 8003580:	e7a1      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8003582:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003584:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8003586:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003588:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800358c:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800358e:	6a23      	ldr	r3, [r4, #32]
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003596:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003598:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800359c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80035a0:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80035a2:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80035a4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80035a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035aa:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80035ae:	60a3      	str	r3, [r4, #8]
}
 80035b0:	e789      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x66>
 80035b2:	bf00      	nop

080035b4 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop

080035b8 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop

080035c0 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop

080035c4 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop

080035c8 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80035c8:	6803      	ldr	r3, [r0, #0]
{
 80035ca:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80035cc:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035ce:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035d0:	07a9      	lsls	r1, r5, #30
{
 80035d2:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035d4:	d501      	bpl.n	80035da <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035d6:	07b2      	lsls	r2, r6, #30
 80035d8:	d451      	bmi.n	800367e <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035da:	0769      	lsls	r1, r5, #29
 80035dc:	d501      	bpl.n	80035e2 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035de:	0772      	lsls	r2, r6, #29
 80035e0:	d43a      	bmi.n	8003658 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035e2:	072b      	lsls	r3, r5, #28
 80035e4:	d501      	bpl.n	80035ea <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035e6:	0730      	lsls	r0, r6, #28
 80035e8:	d424      	bmi.n	8003634 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035ea:	06ea      	lsls	r2, r5, #27
 80035ec:	d501      	bpl.n	80035f2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035ee:	06f3      	lsls	r3, r6, #27
 80035f0:	d410      	bmi.n	8003614 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035f2:	07e8      	lsls	r0, r5, #31
 80035f4:	d501      	bpl.n	80035fa <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035f6:	07f1      	lsls	r1, r6, #31
 80035f8:	d457      	bmi.n	80036aa <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035fa:	062a      	lsls	r2, r5, #24
 80035fc:	d501      	bpl.n	8003602 <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035fe:	0633      	lsls	r3, r6, #24
 8003600:	d45b      	bmi.n	80036ba <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003602:	0668      	lsls	r0, r5, #25
 8003604:	d501      	bpl.n	800360a <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003606:	0671      	lsls	r1, r6, #25
 8003608:	d45f      	bmi.n	80036ca <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800360a:	06aa      	lsls	r2, r5, #26
 800360c:	d501      	bpl.n	8003612 <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800360e:	06b3      	lsls	r3, r6, #26
 8003610:	d442      	bmi.n	8003698 <HAL_TIM_IRQHandler+0xd0>
}
 8003612:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	f06f 0210 	mvn.w	r2, #16
 800361a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800361c:	2208      	movs	r2, #8
 800361e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003628:	d063      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	f7ff ffc7 	bl	80035bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	2300      	movs	r3, #0
 8003630:	7723      	strb	r3, [r4, #28]
 8003632:	e7de      	b.n	80035f2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	f06f 0208 	mvn.w	r2, #8
 800363a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800363c:	2204      	movs	r2, #4
 800363e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003644:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003646:	d151      	bne.n	80036ec <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003648:	f7ff ffb6 	bl	80035b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364c:	4620      	mov	r0, r4
 800364e:	f7ff ffb7 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003652:	2300      	movs	r3, #0
 8003654:	7723      	strb	r3, [r4, #28]
 8003656:	e7c8      	b.n	80035ea <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	f06f 0204 	mvn.w	r2, #4
 800365e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003660:	2202      	movs	r2, #2
 8003662:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800366c:	d13b      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	f7ff ffa3 	bl	80035b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003672:	4620      	mov	r0, r4
 8003674:	f7ff ffa4 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003678:	2300      	movs	r3, #0
 800367a:	7723      	strb	r3, [r4, #28]
 800367c:	e7b1      	b.n	80035e2 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800367e:	f06f 0202 	mvn.w	r2, #2
 8003682:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003684:	2201      	movs	r2, #1
 8003686:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	079b      	lsls	r3, r3, #30
 800368c:	d025      	beq.n	80036da <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800368e:	f7ff ff95 	bl	80035bc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	2300      	movs	r3, #0
 8003694:	7723      	strb	r3, [r4, #28]
 8003696:	e7a0      	b.n	80035da <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800369e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036a0:	611a      	str	r2, [r3, #16]
}
 80036a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80036a6:	f000 bab1 	b.w	8003c0c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	f06f 0201 	mvn.w	r2, #1
 80036b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b2:	4620      	mov	r0, r4
 80036b4:	f7ff ff7e 	bl	80035b4 <HAL_TIM_PeriodElapsedCallback>
 80036b8:	e79f      	b.n	80035fa <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80036c2:	4620      	mov	r0, r4
 80036c4:	f000 faa4 	bl	8003c10 <HAL_TIMEx_BreakCallback>
 80036c8:	e79b      	b.n	8003602 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7ff ff76 	bl	80035c4 <HAL_TIM_TriggerCallback>
 80036d8:	e797      	b.n	800360a <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	f7ff ff6d 	bl	80035b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036de:	4620      	mov	r0, r4
 80036e0:	f7ff ff6e 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80036e4:	e7d5      	b.n	8003692 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	f7ff ff69 	bl	80035bc <HAL_TIM_IC_CaptureCallback>
 80036ea:	e7c5      	b.n	8003678 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 80036ec:	f7ff ff66 	bl	80035bc <HAL_TIM_IC_CaptureCallback>
 80036f0:	e7af      	b.n	8003652 <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	f7ff ff61 	bl	80035b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7ff ff62 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80036fc:	e797      	b.n	800362e <HAL_TIM_IRQHandler+0x66>
 80036fe:	bf00      	nop

08003700 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003700:	4a34      	ldr	r2, [pc, #208]	@ (80037d4 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8003702:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	4290      	cmp	r0, r2
{
 8003706:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	d050      	beq.n	80037ac <TIM_Base_SetConfig+0xac>
 800370a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800370e:	d03b      	beq.n	8003788 <TIM_Base_SetConfig+0x88>
 8003710:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003714:	4290      	cmp	r0, r2
 8003716:	d037      	beq.n	8003788 <TIM_Base_SetConfig+0x88>
 8003718:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800371c:	4290      	cmp	r0, r2
 800371e:	d033      	beq.n	8003788 <TIM_Base_SetConfig+0x88>
 8003720:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003724:	4290      	cmp	r0, r2
 8003726:	d02f      	beq.n	8003788 <TIM_Base_SetConfig+0x88>
 8003728:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800372c:	4290      	cmp	r0, r2
 800372e:	d03d      	beq.n	80037ac <TIM_Base_SetConfig+0xac>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003730:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003734:	4290      	cmp	r0, r2
 8003736:	d02b      	beq.n	8003790 <TIM_Base_SetConfig+0x90>
 8003738:	4a27      	ldr	r2, [pc, #156]	@ (80037d8 <TIM_Base_SetConfig+0xd8>)
 800373a:	4290      	cmp	r0, r2
 800373c:	d028      	beq.n	8003790 <TIM_Base_SetConfig+0x90>
 800373e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003742:	4290      	cmp	r0, r2
 8003744:	d024      	beq.n	8003790 <TIM_Base_SetConfig+0x90>
 8003746:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800374a:	4290      	cmp	r0, r2
 800374c:	d020      	beq.n	8003790 <TIM_Base_SetConfig+0x90>
 800374e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003752:	4290      	cmp	r0, r2
 8003754:	d01c      	beq.n	8003790 <TIM_Base_SetConfig+0x90>
 8003756:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800375a:	4290      	cmp	r0, r2
 800375c:	d018      	beq.n	8003790 <TIM_Base_SetConfig+0x90>
  TIMx->PSC = Structure->Prescaler;
 800375e:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003760:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003762:	6949      	ldr	r1, [r1, #20]
 8003764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003768:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800376a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800376c:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800376e:	6282      	str	r2, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003770:	2301      	movs	r3, #1
 8003772:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003774:	6903      	ldr	r3, [r0, #16]
 8003776:	07db      	lsls	r3, r3, #31
 8003778:	d503      	bpl.n	8003782 <TIM_Base_SetConfig+0x82>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800377a:	6903      	ldr	r3, [r0, #16]
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6103      	str	r3, [r0, #16]
}
 8003782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003786:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003788:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800378a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800378e:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003790:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003792:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003798:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800379a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800379e:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a0:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80037a2:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80037a4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a6:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80037a8:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037aa:	e7e1      	b.n	8003770 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= Structure->CounterMode;
 80037ac:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ae:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80037b4:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037bc:	694a      	ldr	r2, [r1, #20]
 80037be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037c2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80037c4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c6:	688b      	ldr	r3, [r1, #8]
 80037c8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80037ca:	680b      	ldr	r3, [r1, #0]
 80037cc:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80037ce:	690b      	ldr	r3, [r1, #16]
 80037d0:	6303      	str	r3, [r0, #48]	@ 0x30
 80037d2:	e7cd      	b.n	8003770 <TIM_Base_SetConfig+0x70>
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40014400 	.word	0x40014400

080037dc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80037dc:	b350      	cbz	r0, 8003834 <HAL_TIM_Base_Init+0x58>
{
 80037de:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80037e0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037e4:	4604      	mov	r4, r0
 80037e6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80037ea:	b1f3      	cbz	r3, 800382a <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ec:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80037ee:	2302      	movs	r3, #2
 80037f0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f4:	f851 0b04 	ldr.w	r0, [r1], #4
 80037f8:	f7ff ff82 	bl	8003700 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003806:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800380a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800380e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003816:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800381a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800381e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003822:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003826:	2000      	movs	r0, #0
}
 8003828:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800382a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800382e:	f7fd fef7 	bl	8001620 <HAL_TIM_Base_MspInit>
 8003832:	e7db      	b.n	80037ec <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003834:	2001      	movs	r0, #1
}
 8003836:	4770      	bx	lr

08003838 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8003838:	b350      	cbz	r0, 8003890 <HAL_TIM_OC_Init+0x58>
{
 800383a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003840:	4604      	mov	r4, r0
 8003842:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003846:	b1f3      	cbz	r3, 8003886 <HAL_TIM_OC_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003848:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003850:	f851 0b04 	ldr.w	r0, [r1], #4
 8003854:	f7ff ff54 	bl	8003700 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003858:	2301      	movs	r3, #1
 800385a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003862:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003866:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800386a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003876:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800387a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800387e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003882:	2000      	movs	r0, #0
}
 8003884:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003886:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 800388a:	f7ff fd03 	bl	8003294 <HAL_TIM_OC_MspInit>
 800388e:	e7db      	b.n	8003848 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 8003890:	2001      	movs	r0, #1
}
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003894:	b350      	cbz	r0, 80038ec <HAL_TIM_PWM_Init+0x58>
{
 8003896:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003898:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800389c:	4604      	mov	r4, r0
 800389e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80038a2:	b1f3      	cbz	r3, 80038e2 <HAL_TIM_PWM_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80038a6:	2302      	movs	r3, #2
 80038a8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80038b0:	f7ff ff26 	bl	8003700 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80038be:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80038c2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80038c6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038d2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80038d6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80038da:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80038de:	2000      	movs	r0, #0
}
 80038e0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80038e2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80038e6:	f7ff fdb7 	bl	8003458 <HAL_TIM_PWM_MspInit>
 80038ea:	e7db      	b.n	80038a4 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80038ec:	2001      	movs	r0, #1
}
 80038ee:	4770      	bx	lr

080038f0 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80038f0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f2:	6a02      	ldr	r2, [r0, #32]
 80038f4:	f022 0210 	bic.w	r2, r2, #16
 80038f8:	6202      	str	r2, [r0, #32]
{
 80038fa:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80038fc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80038fe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003900:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003902:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003906:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800390a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800390c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003910:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003914:	4d0e      	ldr	r5, [pc, #56]	@ (8003950 <TIM_OC2_SetConfig+0x60>)
 8003916:	42a8      	cmp	r0, r5
 8003918:	d00a      	beq.n	8003930 <TIM_OC2_SetConfig+0x40>
 800391a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800391e:	42a8      	cmp	r0, r5
 8003920:	d006      	beq.n	8003930 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8003922:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003924:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003926:	6182      	str	r2, [r0, #24]
}
 8003928:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800392a:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800392c:	6203      	str	r3, [r0, #32]
}
 800392e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003930:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003936:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800393a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800393e:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003942:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8003946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800394a:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 800394e:	e7e8      	b.n	8003922 <TIM_OC2_SetConfig+0x32>
 8003950:	40010000 	.word	0x40010000

08003954 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003954:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d025      	beq.n	80039a8 <HAL_TIM_OC_ConfigChannel+0x54>
{
 800395c:	b510      	push	{r4, lr}
 800395e:	4604      	mov	r4, r0
  switch (Channel)
 8003960:	2a0c      	cmp	r2, #12
 8003962:	d808      	bhi.n	8003976 <HAL_TIM_OC_ConfigChannel+0x22>
 8003964:	e8df f002 	tbb	[pc, r2]
 8003968:	07070714 	.word	0x07070714
 800396c:	07070718 	.word	0x07070718
 8003970:	0707071c 	.word	0x0707071c
 8003974:	0c          	.byte	0x0c
 8003975:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8003976:	2300      	movs	r3, #0
 8003978:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 800397c:	2001      	movs	r0, #1
}
 800397e:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003980:	6800      	ldr	r0, [r0, #0]
 8003982:	f7ff fc25 	bl	80031d0 <TIM_OC4_SetConfig>
  __HAL_UNLOCK(htim);
 8003986:	2300      	movs	r3, #0
 8003988:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2000      	movs	r0, #0
}
 800398e:	bd10      	pop	{r4, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003990:	6800      	ldr	r0, [r0, #0]
 8003992:	f7ff fbbb 	bl	800310c <TIM_OC1_SetConfig>
      break;
 8003996:	e7f6      	b.n	8003986 <HAL_TIM_OC_ConfigChannel+0x32>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003998:	6800      	ldr	r0, [r0, #0]
 800399a:	f7ff ffa9 	bl	80038f0 <TIM_OC2_SetConfig>
      break;
 800399e:	e7f2      	b.n	8003986 <HAL_TIM_OC_ConfigChannel+0x32>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039a0:	6800      	ldr	r0, [r0, #0]
 80039a2:	f7ff fbe3 	bl	800316c <TIM_OC3_SetConfig>
      break;
 80039a6:	e7ee      	b.n	8003986 <HAL_TIM_OC_ConfigChannel+0x32>
  __HAL_LOCK(htim);
 80039a8:	2002      	movs	r0, #2
}
 80039aa:	4770      	bx	lr

080039ac <HAL_TIM_PWM_ConfigChannel>:
{
 80039ac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80039ae:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d057      	beq.n	8003a66 <HAL_TIM_PWM_ConfigChannel+0xba>
 80039b6:	2301      	movs	r3, #1
 80039b8:	4604      	mov	r4, r0
 80039ba:	460d      	mov	r5, r1
 80039bc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80039c0:	2a0c      	cmp	r2, #12
 80039c2:	d808      	bhi.n	80039d6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80039c4:	e8df f002 	tbb	[pc, r2]
 80039c8:	0707071e 	.word	0x0707071e
 80039cc:	0707072e 	.word	0x0707072e
 80039d0:	0707073f 	.word	0x0707073f
 80039d4:	0c          	.byte	0x0c
 80039d5:	00          	.byte	0x00
 80039d6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80039d8:	2300      	movs	r3, #0
 80039da:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80039de:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039e0:	6800      	ldr	r0, [r0, #0]
 80039e2:	f7ff fbf5 	bl	80031d0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e6:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039e8:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039ee:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f0:	69c3      	ldr	r3, [r0, #28]
 80039f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039f6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039f8:	69c3      	ldr	r3, [r0, #28]
 80039fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80039fe:	61c3      	str	r3, [r0, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003a00:	2000      	movs	r0, #0
 8003a02:	e7e9      	b.n	80039d8 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a04:	6800      	ldr	r0, [r0, #0]
 8003a06:	f7ff fb81 	bl	800310c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a0a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a0c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a0e:	f043 0308 	orr.w	r3, r3, #8
 8003a12:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a14:	6983      	ldr	r3, [r0, #24]
 8003a16:	f023 0304 	bic.w	r3, r3, #4
 8003a1a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a1c:	6983      	ldr	r3, [r0, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	6183      	str	r3, [r0, #24]
      break;
 8003a22:	e7ed      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a24:	6800      	ldr	r0, [r0, #0]
 8003a26:	f7ff ff63 	bl	80038f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a2a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a2c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a32:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a34:	6983      	ldr	r3, [r0, #24]
 8003a36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a3a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a3c:	6983      	ldr	r3, [r0, #24]
 8003a3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a42:	6183      	str	r3, [r0, #24]
      break;
 8003a44:	e7dc      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a46:	6800      	ldr	r0, [r0, #0]
 8003a48:	f7ff fb90 	bl	800316c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a4c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a4e:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a50:	f043 0308 	orr.w	r3, r3, #8
 8003a54:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a56:	69c3      	ldr	r3, [r0, #28]
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5e:	69c3      	ldr	r3, [r0, #28]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61c3      	str	r3, [r0, #28]
      break;
 8003a64:	e7cc      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8003a66:	2002      	movs	r0, #2
}
 8003a68:	bd38      	pop	{r3, r4, r5, pc}
 8003a6a:	bf00      	nop

08003a6c <HAL_TIMEx_OCN_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	d13e      	bne.n	8003aee <HAL_TIMEx_OCN_Start+0x82>
 8003a70:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d142      	bne.n	8003afe <HAL_TIMEx_OCN_Start+0x92>
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003a7e:	6803      	ldr	r3, [r0, #0]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003a80:	f001 010f 	and.w	r1, r1, #15

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003a84:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003a86:	2204      	movs	r2, #4
 8003a88:	408a      	lsls	r2, r1
  TIMx->CCER &=  ~tmp;
 8003a8a:	ea20 0002 	bic.w	r0, r0, r2
 8003a8e:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003a90:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a92:	4926      	ldr	r1, [pc, #152]	@ (8003b2c <HAL_TIMEx_OCN_Start+0xc0>)
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003a94:	4302      	orrs	r2, r0
 8003a96:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8003a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9a:	428b      	cmp	r3, r1
  __HAL_TIM_MOE_ENABLE(htim);
 8003a9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aa0:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa2:	d019      	beq.n	8003ad8 <HAL_TIMEx_OCN_Start+0x6c>
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa8:	d016      	beq.n	8003ad8 <HAL_TIMEx_OCN_Start+0x6c>
 8003aaa:	4a21      	ldr	r2, [pc, #132]	@ (8003b30 <HAL_TIMEx_OCN_Start+0xc4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d013      	beq.n	8003ad8 <HAL_TIMEx_OCN_Start+0x6c>
 8003ab0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00f      	beq.n	8003ad8 <HAL_TIMEx_OCN_Start+0x6c>
 8003ab8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00b      	beq.n	8003ad8 <HAL_TIMEx_OCN_Start+0x6c>
 8003ac0:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d007      	beq.n	8003ad8 <HAL_TIMEx_OCN_Start+0x6c>
 8003ac8:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <HAL_TIMEx_OCN_Start+0x6c>
 8003ad0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d104      	bne.n	8003ae2 <HAL_TIMEx_OCN_Start+0x76>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ade:	2a06      	cmp	r2, #6
 8003ae0:	d003      	beq.n	8003aea <HAL_TIMEx_OCN_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003aea:	2000      	movs	r0, #0
 8003aec:	4770      	bx	lr
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aee:	2904      	cmp	r1, #4
 8003af0:	d00b      	beq.n	8003b0a <HAL_TIMEx_OCN_Start+0x9e>
 8003af2:	2908      	cmp	r1, #8
 8003af4:	d011      	beq.n	8003b1a <HAL_TIMEx_OCN_Start+0xae>
 8003af6:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d001      	beq.n	8003b02 <HAL_TIMEx_OCN_Start+0x96>
    return HAL_ERROR;
 8003afe:	2001      	movs	r0, #1
}
 8003b00:	4770      	bx	lr
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b02:	2302      	movs	r3, #2
 8003b04:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
 8003b08:	e7b9      	b.n	8003a7e <HAL_TIMEx_OCN_Start+0x12>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b0a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d1f5      	bne.n	8003afe <HAL_TIMEx_OCN_Start+0x92>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b12:	2302      	movs	r3, #2
 8003b14:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 8003b18:	e7b1      	b.n	8003a7e <HAL_TIMEx_OCN_Start+0x12>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b1a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d1ed      	bne.n	8003afe <HAL_TIMEx_OCN_Start+0x92>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b22:	2302      	movs	r3, #2
 8003b24:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8003b28:	e7a9      	b.n	8003a7e <HAL_TIMEx_OCN_Start+0x12>
 8003b2a:	bf00      	nop
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	40000400 	.word	0x40000400

08003b34 <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8003b34:	f7ff bf9a 	b.w	8003a6c <HAL_TIMEx_OCN_Start>

08003b38 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8003b38:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003b3c:	2a01      	cmp	r2, #1
 8003b3e:	d037      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003b40:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 8003b42:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	2002      	movs	r0, #2
{
 8003b46:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003b4c:	6850      	ldr	r0, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b4e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003b50:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b52:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b56:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8003b58:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5a:	4816      	ldr	r0, [pc, #88]	@ (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8003b5c:	4282      	cmp	r2, r0
 8003b5e:	d01a      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b60:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003b64:	d017      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b66:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003b6a:	4282      	cmp	r2, r0
 8003b6c:	d013      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b6e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003b72:	4282      	cmp	r2, r0
 8003b74:	d00f      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b76:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003b7a:	4282      	cmp	r2, r0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b7e:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8003b82:	4282      	cmp	r2, r0
 8003b84:	d007      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b86:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8003b8a:	4282      	cmp	r2, r0
 8003b8c:	d003      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b8e:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003b92:	4282      	cmp	r2, r0
 8003b94:	d104      	bne.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b96:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b98:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b9c:	430c      	orrs	r4, r1
    htim->Instance->SMCR = tmpsmcr;
 8003b9e:	6094      	str	r4, [r2, #8]
  __HAL_UNLOCK(htim);
 8003ba0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003ba8:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8003bac:	bc30      	pop	{r4, r5}
 8003bae:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003bb0:	2002      	movs	r0, #2
}
 8003bb2:	4770      	bx	lr
 8003bb4:	40010000 	.word	0x40010000

08003bb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8003bb8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d023      	beq.n	8003c08 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8003bc0:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bc2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8003bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bce:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bd0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bd6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bdc:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bde:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003be0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003be4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003be6:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003be8:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  htim->Instance->BDTR = tmpbdtr;
 8003bf4:	6810      	ldr	r0, [r2, #0]
  __HAL_UNLOCK(htim);
 8003bf6:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bf8:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8003bfa:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8003bfc:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c
  return HAL_OK;
 8003c00:	4608      	mov	r0, r1
}
 8003c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c06:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003c08:	2002      	movs	r0, #2
}
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_CommutCallback>:
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop

08003c10 <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop

08003c14 <memset>:
 8003c14:	4402      	add	r2, r0
 8003c16:	4603      	mov	r3, r0
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d100      	bne.n	8003c1e <memset+0xa>
 8003c1c:	4770      	bx	lr
 8003c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c22:	e7f9      	b.n	8003c18 <memset+0x4>

08003c24 <__errno>:
 8003c24:	4b01      	ldr	r3, [pc, #4]	@ (8003c2c <__errno+0x8>)
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000038 	.word	0x20000038

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4d0d      	ldr	r5, [pc, #52]	@ (8003c68 <__libc_init_array+0x38>)
 8003c34:	4c0d      	ldr	r4, [pc, #52]	@ (8003c6c <__libc_init_array+0x3c>)
 8003c36:	1b64      	subs	r4, r4, r5
 8003c38:	10a4      	asrs	r4, r4, #2
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	42a6      	cmp	r6, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	4d0b      	ldr	r5, [pc, #44]	@ (8003c70 <__libc_init_array+0x40>)
 8003c42:	4c0c      	ldr	r4, [pc, #48]	@ (8003c74 <__libc_init_array+0x44>)
 8003c44:	f001 f950 	bl	8004ee8 <_init>
 8003c48:	1b64      	subs	r4, r4, r5
 8003c4a:	10a4      	asrs	r4, r4, #2
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	42a6      	cmp	r6, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c58:	4798      	blx	r3
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c62:	4798      	blx	r3
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	080050f8 	.word	0x080050f8
 8003c6c:	080050f8 	.word	0x080050f8
 8003c70:	080050f8 	.word	0x080050f8
 8003c74:	080050fc 	.word	0x080050fc

08003c78 <sqrt>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	ed2d 8b02 	vpush	{d8}
 8003c7e:	ec55 4b10 	vmov	r4, r5, d0
 8003c82:	f000 f879 	bl	8003d78 <__ieee754_sqrt>
 8003c86:	4622      	mov	r2, r4
 8003c88:	462b      	mov	r3, r5
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8003c92:	eef0 8a60 	vmov.f32	s17, s1
 8003c96:	f7fc feed 	bl	8000a74 <__aeabi_dcmpun>
 8003c9a:	b990      	cbnz	r0, 8003cc2 <sqrt+0x4a>
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	f7fc febe 	bl	8000a24 <__aeabi_dcmplt>
 8003ca8:	b158      	cbz	r0, 8003cc2 <sqrt+0x4a>
 8003caa:	f7ff ffbb 	bl	8003c24 <__errno>
 8003cae:	2321      	movs	r3, #33	@ 0x21
 8003cb0:	6003      	str	r3, [r0, #0]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f7fc fd6b 	bl	8000794 <__aeabi_ddiv>
 8003cbe:	ec41 0b18 	vmov	d8, r0, r1
 8003cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8003cc6:	eef0 0a68 	vmov.f32	s1, s17
 8003cca:	ecbd 8b02 	vpop	{d8}
 8003cce:	bd38      	pop	{r3, r4, r5, pc}

08003cd0 <sin>:
 8003cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cd2:	ec53 2b10 	vmov	r2, r3, d0
 8003cd6:	4826      	ldr	r0, [pc, #152]	@ (8003d70 <sin+0xa0>)
 8003cd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003cdc:	4281      	cmp	r1, r0
 8003cde:	d807      	bhi.n	8003cf0 <sin+0x20>
 8003ce0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003d68 <sin+0x98>
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	b005      	add	sp, #20
 8003ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cec:	f000 b9e8 	b.w	80040c0 <__kernel_sin>
 8003cf0:	4820      	ldr	r0, [pc, #128]	@ (8003d74 <sin+0xa4>)
 8003cf2:	4281      	cmp	r1, r0
 8003cf4:	d908      	bls.n	8003d08 <sin+0x38>
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f7fc fa69 	bl	80001d0 <__aeabi_dsub>
 8003cfe:	ec41 0b10 	vmov	d0, r0, r1
 8003d02:	b005      	add	sp, #20
 8003d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d08:	4668      	mov	r0, sp
 8003d0a:	f000 fa95 	bl	8004238 <__ieee754_rem_pio2>
 8003d0e:	f000 0003 	and.w	r0, r0, #3
 8003d12:	2801      	cmp	r0, #1
 8003d14:	d00c      	beq.n	8003d30 <sin+0x60>
 8003d16:	2802      	cmp	r0, #2
 8003d18:	d011      	beq.n	8003d3e <sin+0x6e>
 8003d1a:	b9e8      	cbnz	r0, 8003d58 <sin+0x88>
 8003d1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d20:	ed9d 0b00 	vldr	d0, [sp]
 8003d24:	2001      	movs	r0, #1
 8003d26:	f000 f9cb 	bl	80040c0 <__kernel_sin>
 8003d2a:	ec51 0b10 	vmov	r0, r1, d0
 8003d2e:	e7e6      	b.n	8003cfe <sin+0x2e>
 8003d30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d34:	ed9d 0b00 	vldr	d0, [sp]
 8003d38:	f000 f8fa 	bl	8003f30 <__kernel_cos>
 8003d3c:	e7f5      	b.n	8003d2a <sin+0x5a>
 8003d3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d42:	ed9d 0b00 	vldr	d0, [sp]
 8003d46:	2001      	movs	r0, #1
 8003d48:	f000 f9ba 	bl	80040c0 <__kernel_sin>
 8003d4c:	ec53 2b10 	vmov	r2, r3, d0
 8003d50:	4610      	mov	r0, r2
 8003d52:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003d56:	e7d2      	b.n	8003cfe <sin+0x2e>
 8003d58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d5c:	ed9d 0b00 	vldr	d0, [sp]
 8003d60:	f000 f8e6 	bl	8003f30 <__kernel_cos>
 8003d64:	e7f2      	b.n	8003d4c <sin+0x7c>
 8003d66:	bf00      	nop
	...
 8003d70:	3fe921fb 	.word	0x3fe921fb
 8003d74:	7fefffff 	.word	0x7fefffff

08003d78 <__ieee754_sqrt>:
 8003d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7c:	4a68      	ldr	r2, [pc, #416]	@ (8003f20 <__ieee754_sqrt+0x1a8>)
 8003d7e:	ec55 4b10 	vmov	r4, r5, d0
 8003d82:	43aa      	bics	r2, r5
 8003d84:	462b      	mov	r3, r5
 8003d86:	4621      	mov	r1, r4
 8003d88:	d110      	bne.n	8003dac <__ieee754_sqrt+0x34>
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	4629      	mov	r1, r5
 8003d90:	f7fc fbd6 	bl	8000540 <__aeabi_dmul>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4620      	mov	r0, r4
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	f7fc fa1a 	bl	80001d4 <__adddf3>
 8003da0:	4604      	mov	r4, r0
 8003da2:	460d      	mov	r5, r1
 8003da4:	ec45 4b10 	vmov	d0, r4, r5
 8003da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	dc0e      	bgt.n	8003dce <__ieee754_sqrt+0x56>
 8003db0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8003db4:	4322      	orrs	r2, r4
 8003db6:	d0f5      	beq.n	8003da4 <__ieee754_sqrt+0x2c>
 8003db8:	b19d      	cbz	r5, 8003de2 <__ieee754_sqrt+0x6a>
 8003dba:	4622      	mov	r2, r4
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	f7fc fa06 	bl	80001d0 <__aeabi_dsub>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	f7fc fce4 	bl	8000794 <__aeabi_ddiv>
 8003dcc:	e7e8      	b.n	8003da0 <__ieee754_sqrt+0x28>
 8003dce:	152a      	asrs	r2, r5, #20
 8003dd0:	d115      	bne.n	8003dfe <__ieee754_sqrt+0x86>
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	e009      	b.n	8003dea <__ieee754_sqrt+0x72>
 8003dd6:	0acb      	lsrs	r3, r1, #11
 8003dd8:	3a15      	subs	r2, #21
 8003dda:	0549      	lsls	r1, r1, #21
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0fa      	beq.n	8003dd6 <__ieee754_sqrt+0x5e>
 8003de0:	e7f7      	b.n	8003dd2 <__ieee754_sqrt+0x5a>
 8003de2:	462a      	mov	r2, r5
 8003de4:	e7fa      	b.n	8003ddc <__ieee754_sqrt+0x64>
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	3001      	adds	r0, #1
 8003dea:	02dc      	lsls	r4, r3, #11
 8003dec:	d5fb      	bpl.n	8003de6 <__ieee754_sqrt+0x6e>
 8003dee:	1e44      	subs	r4, r0, #1
 8003df0:	1b12      	subs	r2, r2, r4
 8003df2:	f1c0 0420 	rsb	r4, r0, #32
 8003df6:	fa21 f404 	lsr.w	r4, r1, r4
 8003dfa:	4323      	orrs	r3, r4
 8003dfc:	4081      	lsls	r1, r0
 8003dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e02:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e0a:	07d2      	lsls	r2, r2, #31
 8003e0c:	bf5c      	itt	pl
 8003e0e:	005b      	lslpl	r3, r3, #1
 8003e10:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8003e14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e18:	bf58      	it	pl
 8003e1a:	0049      	lslpl	r1, r1, #1
 8003e1c:	2600      	movs	r6, #0
 8003e1e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8003e22:	106d      	asrs	r5, r5, #1
 8003e24:	0049      	lsls	r1, r1, #1
 8003e26:	2016      	movs	r0, #22
 8003e28:	4632      	mov	r2, r6
 8003e2a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8003e2e:	1917      	adds	r7, r2, r4
 8003e30:	429f      	cmp	r7, r3
 8003e32:	bfde      	ittt	le
 8003e34:	193a      	addle	r2, r7, r4
 8003e36:	1bdb      	suble	r3, r3, r7
 8003e38:	1936      	addle	r6, r6, r4
 8003e3a:	0fcf      	lsrs	r7, r1, #31
 8003e3c:	3801      	subs	r0, #1
 8003e3e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8003e42:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003e46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003e4a:	d1f0      	bne.n	8003e2e <__ieee754_sqrt+0xb6>
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	2720      	movs	r7, #32
 8003e50:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8003e54:	429a      	cmp	r2, r3
 8003e56:	eb00 0e0c 	add.w	lr, r0, ip
 8003e5a:	db02      	blt.n	8003e62 <__ieee754_sqrt+0xea>
 8003e5c:	d113      	bne.n	8003e86 <__ieee754_sqrt+0x10e>
 8003e5e:	458e      	cmp	lr, r1
 8003e60:	d811      	bhi.n	8003e86 <__ieee754_sqrt+0x10e>
 8003e62:	f1be 0f00 	cmp.w	lr, #0
 8003e66:	eb0e 000c 	add.w	r0, lr, ip
 8003e6a:	da42      	bge.n	8003ef2 <__ieee754_sqrt+0x17a>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	db40      	blt.n	8003ef2 <__ieee754_sqrt+0x17a>
 8003e70:	f102 0801 	add.w	r8, r2, #1
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	458e      	cmp	lr, r1
 8003e78:	bf88      	it	hi
 8003e7a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003e7e:	eba1 010e 	sub.w	r1, r1, lr
 8003e82:	4464      	add	r4, ip
 8003e84:	4642      	mov	r2, r8
 8003e86:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8003e8a:	3f01      	subs	r7, #1
 8003e8c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8003e90:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003e94:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003e98:	d1dc      	bne.n	8003e54 <__ieee754_sqrt+0xdc>
 8003e9a:	4319      	orrs	r1, r3
 8003e9c:	d01b      	beq.n	8003ed6 <__ieee754_sqrt+0x15e>
 8003e9e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8003f24 <__ieee754_sqrt+0x1ac>
 8003ea2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8003f28 <__ieee754_sqrt+0x1b0>
 8003ea6:	e9da 0100 	ldrd	r0, r1, [sl]
 8003eaa:	e9db 2300 	ldrd	r2, r3, [fp]
 8003eae:	f7fc f98f 	bl	80001d0 <__aeabi_dsub>
 8003eb2:	e9da 8900 	ldrd	r8, r9, [sl]
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4640      	mov	r0, r8
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	f7fc fdbb 	bl	8000a38 <__aeabi_dcmple>
 8003ec2:	b140      	cbz	r0, 8003ed6 <__ieee754_sqrt+0x15e>
 8003ec4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003ec8:	e9da 0100 	ldrd	r0, r1, [sl]
 8003ecc:	e9db 2300 	ldrd	r2, r3, [fp]
 8003ed0:	d111      	bne.n	8003ef6 <__ieee754_sqrt+0x17e>
 8003ed2:	3601      	adds	r6, #1
 8003ed4:	463c      	mov	r4, r7
 8003ed6:	1072      	asrs	r2, r6, #1
 8003ed8:	0863      	lsrs	r3, r4, #1
 8003eda:	07f1      	lsls	r1, r6, #31
 8003edc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8003ee0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8003ee4:	bf48      	it	mi
 8003ee6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8003eea:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8003eee:	4618      	mov	r0, r3
 8003ef0:	e756      	b.n	8003da0 <__ieee754_sqrt+0x28>
 8003ef2:	4690      	mov	r8, r2
 8003ef4:	e7be      	b.n	8003e74 <__ieee754_sqrt+0xfc>
 8003ef6:	f7fc f96d 	bl	80001d4 <__adddf3>
 8003efa:	e9da 8900 	ldrd	r8, r9, [sl]
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4640      	mov	r0, r8
 8003f04:	4649      	mov	r1, r9
 8003f06:	f7fc fd8d 	bl	8000a24 <__aeabi_dcmplt>
 8003f0a:	b120      	cbz	r0, 8003f16 <__ieee754_sqrt+0x19e>
 8003f0c:	1ca0      	adds	r0, r4, #2
 8003f0e:	bf08      	it	eq
 8003f10:	3601      	addeq	r6, #1
 8003f12:	3402      	adds	r4, #2
 8003f14:	e7df      	b.n	8003ed6 <__ieee754_sqrt+0x15e>
 8003f16:	1c63      	adds	r3, r4, #1
 8003f18:	f023 0401 	bic.w	r4, r3, #1
 8003f1c:	e7db      	b.n	8003ed6 <__ieee754_sqrt+0x15e>
 8003f1e:	bf00      	nop
 8003f20:	7ff00000 	.word	0x7ff00000
 8003f24:	20000090 	.word	0x20000090
 8003f28:	20000088 	.word	0x20000088
 8003f2c:	00000000 	.word	0x00000000

08003f30 <__kernel_cos>:
 8003f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f34:	ec57 6b10 	vmov	r6, r7, d0
 8003f38:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003f3c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003f40:	ed8d 1b00 	vstr	d1, [sp]
 8003f44:	d206      	bcs.n	8003f54 <__kernel_cos+0x24>
 8003f46:	4630      	mov	r0, r6
 8003f48:	4639      	mov	r1, r7
 8003f4a:	f7fc fda9 	bl	8000aa0 <__aeabi_d2iz>
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	f000 8088 	beq.w	8004064 <__kernel_cos+0x134>
 8003f54:	4632      	mov	r2, r6
 8003f56:	463b      	mov	r3, r7
 8003f58:	4630      	mov	r0, r6
 8003f5a:	4639      	mov	r1, r7
 8003f5c:	f7fc faf0 	bl	8000540 <__aeabi_dmul>
 8003f60:	4b51      	ldr	r3, [pc, #324]	@ (80040a8 <__kernel_cos+0x178>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	4604      	mov	r4, r0
 8003f66:	460d      	mov	r5, r1
 8003f68:	f7fc faea 	bl	8000540 <__aeabi_dmul>
 8003f6c:	a340      	add	r3, pc, #256	@ (adr r3, 8004070 <__kernel_cos+0x140>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	4682      	mov	sl, r0
 8003f74:	468b      	mov	fp, r1
 8003f76:	4620      	mov	r0, r4
 8003f78:	4629      	mov	r1, r5
 8003f7a:	f7fc fae1 	bl	8000540 <__aeabi_dmul>
 8003f7e:	a33e      	add	r3, pc, #248	@ (adr r3, 8004078 <__kernel_cos+0x148>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f7fc f926 	bl	80001d4 <__adddf3>
 8003f88:	4622      	mov	r2, r4
 8003f8a:	462b      	mov	r3, r5
 8003f8c:	f7fc fad8 	bl	8000540 <__aeabi_dmul>
 8003f90:	a33b      	add	r3, pc, #236	@ (adr r3, 8004080 <__kernel_cos+0x150>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc f91b 	bl	80001d0 <__aeabi_dsub>
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	f7fc facf 	bl	8000540 <__aeabi_dmul>
 8003fa2:	a339      	add	r3, pc, #228	@ (adr r3, 8004088 <__kernel_cos+0x158>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc f914 	bl	80001d4 <__adddf3>
 8003fac:	4622      	mov	r2, r4
 8003fae:	462b      	mov	r3, r5
 8003fb0:	f7fc fac6 	bl	8000540 <__aeabi_dmul>
 8003fb4:	a336      	add	r3, pc, #216	@ (adr r3, 8004090 <__kernel_cos+0x160>)
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f7fc f909 	bl	80001d0 <__aeabi_dsub>
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	f7fc fabd 	bl	8000540 <__aeabi_dmul>
 8003fc6:	a334      	add	r3, pc, #208	@ (adr r3, 8004098 <__kernel_cos+0x168>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc f902 	bl	80001d4 <__adddf3>
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	462b      	mov	r3, r5
 8003fd4:	f7fc fab4 	bl	8000540 <__aeabi_dmul>
 8003fd8:	4622      	mov	r2, r4
 8003fda:	462b      	mov	r3, r5
 8003fdc:	f7fc fab0 	bl	8000540 <__aeabi_dmul>
 8003fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	460d      	mov	r5, r1
 8003fe8:	4630      	mov	r0, r6
 8003fea:	4639      	mov	r1, r7
 8003fec:	f7fc faa8 	bl	8000540 <__aeabi_dmul>
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7fc f8ea 	bl	80001d0 <__aeabi_dsub>
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80040ac <__kernel_cos+0x17c>)
 8003ffe:	4598      	cmp	r8, r3
 8004000:	4606      	mov	r6, r0
 8004002:	460f      	mov	r7, r1
 8004004:	d810      	bhi.n	8004028 <__kernel_cos+0xf8>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4650      	mov	r0, sl
 800400c:	4659      	mov	r1, fp
 800400e:	f7fc f8df 	bl	80001d0 <__aeabi_dsub>
 8004012:	460b      	mov	r3, r1
 8004014:	4926      	ldr	r1, [pc, #152]	@ (80040b0 <__kernel_cos+0x180>)
 8004016:	4602      	mov	r2, r0
 8004018:	2000      	movs	r0, #0
 800401a:	f7fc f8d9 	bl	80001d0 <__aeabi_dsub>
 800401e:	ec41 0b10 	vmov	d0, r0, r1
 8004022:	b003      	add	sp, #12
 8004024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004028:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <__kernel_cos+0x184>)
 800402a:	4921      	ldr	r1, [pc, #132]	@ (80040b0 <__kernel_cos+0x180>)
 800402c:	4598      	cmp	r8, r3
 800402e:	bf8c      	ite	hi
 8004030:	4d21      	ldrhi	r5, [pc, #132]	@ (80040b8 <__kernel_cos+0x188>)
 8004032:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004036:	2400      	movs	r4, #0
 8004038:	4622      	mov	r2, r4
 800403a:	462b      	mov	r3, r5
 800403c:	2000      	movs	r0, #0
 800403e:	f7fc f8c7 	bl	80001d0 <__aeabi_dsub>
 8004042:	4622      	mov	r2, r4
 8004044:	4680      	mov	r8, r0
 8004046:	4689      	mov	r9, r1
 8004048:	462b      	mov	r3, r5
 800404a:	4650      	mov	r0, sl
 800404c:	4659      	mov	r1, fp
 800404e:	f7fc f8bf 	bl	80001d0 <__aeabi_dsub>
 8004052:	4632      	mov	r2, r6
 8004054:	463b      	mov	r3, r7
 8004056:	f7fc f8bb 	bl	80001d0 <__aeabi_dsub>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4640      	mov	r0, r8
 8004060:	4649      	mov	r1, r9
 8004062:	e7da      	b.n	800401a <__kernel_cos+0xea>
 8004064:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80040a0 <__kernel_cos+0x170>
 8004068:	e7db      	b.n	8004022 <__kernel_cos+0xf2>
 800406a:	bf00      	nop
 800406c:	f3af 8000 	nop.w
 8004070:	be8838d4 	.word	0xbe8838d4
 8004074:	bda8fae9 	.word	0xbda8fae9
 8004078:	bdb4b1c4 	.word	0xbdb4b1c4
 800407c:	3e21ee9e 	.word	0x3e21ee9e
 8004080:	809c52ad 	.word	0x809c52ad
 8004084:	3e927e4f 	.word	0x3e927e4f
 8004088:	19cb1590 	.word	0x19cb1590
 800408c:	3efa01a0 	.word	0x3efa01a0
 8004090:	16c15177 	.word	0x16c15177
 8004094:	3f56c16c 	.word	0x3f56c16c
 8004098:	5555554c 	.word	0x5555554c
 800409c:	3fa55555 	.word	0x3fa55555
 80040a0:	00000000 	.word	0x00000000
 80040a4:	3ff00000 	.word	0x3ff00000
 80040a8:	3fe00000 	.word	0x3fe00000
 80040ac:	3fd33332 	.word	0x3fd33332
 80040b0:	3ff00000 	.word	0x3ff00000
 80040b4:	3fe90000 	.word	0x3fe90000
 80040b8:	3fd20000 	.word	0x3fd20000
 80040bc:	00000000 	.word	0x00000000

080040c0 <__kernel_sin>:
 80040c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	ec55 4b10 	vmov	r4, r5, d0
 80040c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80040cc:	b085      	sub	sp, #20
 80040ce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80040d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80040d6:	4680      	mov	r8, r0
 80040d8:	d205      	bcs.n	80040e6 <__kernel_sin+0x26>
 80040da:	4620      	mov	r0, r4
 80040dc:	4629      	mov	r1, r5
 80040de:	f7fc fcdf 	bl	8000aa0 <__aeabi_d2iz>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d052      	beq.n	800418c <__kernel_sin+0xcc>
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	4620      	mov	r0, r4
 80040ec:	4629      	mov	r1, r5
 80040ee:	f7fc fa27 	bl	8000540 <__aeabi_dmul>
 80040f2:	4682      	mov	sl, r0
 80040f4:	468b      	mov	fp, r1
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4620      	mov	r0, r4
 80040fc:	4629      	mov	r1, r5
 80040fe:	f7fc fa1f 	bl	8000540 <__aeabi_dmul>
 8004102:	a342      	add	r3, pc, #264	@ (adr r3, 800420c <__kernel_sin+0x14c>)
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	e9cd 0100 	strd	r0, r1, [sp]
 800410c:	4650      	mov	r0, sl
 800410e:	4659      	mov	r1, fp
 8004110:	f7fc fa16 	bl	8000540 <__aeabi_dmul>
 8004114:	a33f      	add	r3, pc, #252	@ (adr r3, 8004214 <__kernel_sin+0x154>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f7fc f859 	bl	80001d0 <__aeabi_dsub>
 800411e:	4652      	mov	r2, sl
 8004120:	465b      	mov	r3, fp
 8004122:	f7fc fa0d 	bl	8000540 <__aeabi_dmul>
 8004126:	a33d      	add	r3, pc, #244	@ (adr r3, 800421c <__kernel_sin+0x15c>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f7fc f852 	bl	80001d4 <__adddf3>
 8004130:	4652      	mov	r2, sl
 8004132:	465b      	mov	r3, fp
 8004134:	f7fc fa04 	bl	8000540 <__aeabi_dmul>
 8004138:	a33a      	add	r3, pc, #232	@ (adr r3, 8004224 <__kernel_sin+0x164>)
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f7fc f847 	bl	80001d0 <__aeabi_dsub>
 8004142:	4652      	mov	r2, sl
 8004144:	465b      	mov	r3, fp
 8004146:	f7fc f9fb 	bl	8000540 <__aeabi_dmul>
 800414a:	a338      	add	r3, pc, #224	@ (adr r3, 800422c <__kernel_sin+0x16c>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f7fc f840 	bl	80001d4 <__adddf3>
 8004154:	4606      	mov	r6, r0
 8004156:	460f      	mov	r7, r1
 8004158:	f1b8 0f00 	cmp.w	r8, #0
 800415c:	d11b      	bne.n	8004196 <__kernel_sin+0xd6>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4650      	mov	r0, sl
 8004164:	4659      	mov	r1, fp
 8004166:	f7fc f9eb 	bl	8000540 <__aeabi_dmul>
 800416a:	a325      	add	r3, pc, #148	@ (adr r3, 8004200 <__kernel_sin+0x140>)
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f7fc f82e 	bl	80001d0 <__aeabi_dsub>
 8004174:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004178:	f7fc f9e2 	bl	8000540 <__aeabi_dmul>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4620      	mov	r0, r4
 8004182:	4629      	mov	r1, r5
 8004184:	f7fc f826 	bl	80001d4 <__adddf3>
 8004188:	4604      	mov	r4, r0
 800418a:	460d      	mov	r5, r1
 800418c:	ec45 4b10 	vmov	d0, r4, r5
 8004190:	b005      	add	sp, #20
 8004192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800419a:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <__kernel_sin+0x148>)
 800419c:	2200      	movs	r2, #0
 800419e:	f7fc f9cf 	bl	8000540 <__aeabi_dmul>
 80041a2:	4632      	mov	r2, r6
 80041a4:	4680      	mov	r8, r0
 80041a6:	4689      	mov	r9, r1
 80041a8:	463b      	mov	r3, r7
 80041aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041ae:	f7fc f9c7 	bl	8000540 <__aeabi_dmul>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4640      	mov	r0, r8
 80041b8:	4649      	mov	r1, r9
 80041ba:	f7fc f809 	bl	80001d0 <__aeabi_dsub>
 80041be:	4652      	mov	r2, sl
 80041c0:	465b      	mov	r3, fp
 80041c2:	f7fc f9bd 	bl	8000540 <__aeabi_dmul>
 80041c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041ca:	f7fc f801 	bl	80001d0 <__aeabi_dsub>
 80041ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8004200 <__kernel_sin+0x140>)
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	4606      	mov	r6, r0
 80041d6:	460f      	mov	r7, r1
 80041d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041dc:	f7fc f9b0 	bl	8000540 <__aeabi_dmul>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4630      	mov	r0, r6
 80041e6:	4639      	mov	r1, r7
 80041e8:	f7fb fff4 	bl	80001d4 <__adddf3>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4620      	mov	r0, r4
 80041f2:	4629      	mov	r1, r5
 80041f4:	f7fb ffec 	bl	80001d0 <__aeabi_dsub>
 80041f8:	e7c6      	b.n	8004188 <__kernel_sin+0xc8>
 80041fa:	bf00      	nop
 80041fc:	f3af 8000 	nop.w
 8004200:	55555549 	.word	0x55555549
 8004204:	3fc55555 	.word	0x3fc55555
 8004208:	3fe00000 	.word	0x3fe00000
 800420c:	5acfd57c 	.word	0x5acfd57c
 8004210:	3de5d93a 	.word	0x3de5d93a
 8004214:	8a2b9ceb 	.word	0x8a2b9ceb
 8004218:	3e5ae5e6 	.word	0x3e5ae5e6
 800421c:	57b1fe7d 	.word	0x57b1fe7d
 8004220:	3ec71de3 	.word	0x3ec71de3
 8004224:	19c161d5 	.word	0x19c161d5
 8004228:	3f2a01a0 	.word	0x3f2a01a0
 800422c:	1110f8a6 	.word	0x1110f8a6
 8004230:	3f811111 	.word	0x3f811111
 8004234:	00000000 	.word	0x00000000

08004238 <__ieee754_rem_pio2>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	ec57 6b10 	vmov	r6, r7, d0
 8004240:	4bc5      	ldr	r3, [pc, #788]	@ (8004558 <__ieee754_rem_pio2+0x320>)
 8004242:	b08d      	sub	sp, #52	@ 0x34
 8004244:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004248:	4598      	cmp	r8, r3
 800424a:	4604      	mov	r4, r0
 800424c:	9704      	str	r7, [sp, #16]
 800424e:	d807      	bhi.n	8004260 <__ieee754_rem_pio2+0x28>
 8004250:	2200      	movs	r2, #0
 8004252:	2300      	movs	r3, #0
 8004254:	ed80 0b00 	vstr	d0, [r0]
 8004258:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800425c:	2500      	movs	r5, #0
 800425e:	e028      	b.n	80042b2 <__ieee754_rem_pio2+0x7a>
 8004260:	4bbe      	ldr	r3, [pc, #760]	@ (800455c <__ieee754_rem_pio2+0x324>)
 8004262:	4598      	cmp	r8, r3
 8004264:	d878      	bhi.n	8004358 <__ieee754_rem_pio2+0x120>
 8004266:	9b04      	ldr	r3, [sp, #16]
 8004268:	4dbd      	ldr	r5, [pc, #756]	@ (8004560 <__ieee754_rem_pio2+0x328>)
 800426a:	2b00      	cmp	r3, #0
 800426c:	4630      	mov	r0, r6
 800426e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004520 <__ieee754_rem_pio2+0x2e8>)
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	4639      	mov	r1, r7
 8004276:	dd38      	ble.n	80042ea <__ieee754_rem_pio2+0xb2>
 8004278:	f7fb ffaa 	bl	80001d0 <__aeabi_dsub>
 800427c:	45a8      	cmp	r8, r5
 800427e:	4606      	mov	r6, r0
 8004280:	460f      	mov	r7, r1
 8004282:	d01a      	beq.n	80042ba <__ieee754_rem_pio2+0x82>
 8004284:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004528 <__ieee754_rem_pio2+0x2f0>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	f7fb ffa1 	bl	80001d0 <__aeabi_dsub>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4680      	mov	r8, r0
 8004294:	4689      	mov	r9, r1
 8004296:	4630      	mov	r0, r6
 8004298:	4639      	mov	r1, r7
 800429a:	f7fb ff99 	bl	80001d0 <__aeabi_dsub>
 800429e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004528 <__ieee754_rem_pio2+0x2f0>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f7fb ff94 	bl	80001d0 <__aeabi_dsub>
 80042a8:	e9c4 8900 	strd	r8, r9, [r4]
 80042ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80042b0:	2501      	movs	r5, #1
 80042b2:	4628      	mov	r0, r5
 80042b4:	b00d      	add	sp, #52	@ 0x34
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	a39d      	add	r3, pc, #628	@ (adr r3, 8004530 <__ieee754_rem_pio2+0x2f8>)
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f7fb ff86 	bl	80001d0 <__aeabi_dsub>
 80042c4:	a39c      	add	r3, pc, #624	@ (adr r3, 8004538 <__ieee754_rem_pio2+0x300>)
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	4606      	mov	r6, r0
 80042cc:	460f      	mov	r7, r1
 80042ce:	f7fb ff7f 	bl	80001d0 <__aeabi_dsub>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4680      	mov	r8, r0
 80042d8:	4689      	mov	r9, r1
 80042da:	4630      	mov	r0, r6
 80042dc:	4639      	mov	r1, r7
 80042de:	f7fb ff77 	bl	80001d0 <__aeabi_dsub>
 80042e2:	a395      	add	r3, pc, #596	@ (adr r3, 8004538 <__ieee754_rem_pio2+0x300>)
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	e7dc      	b.n	80042a4 <__ieee754_rem_pio2+0x6c>
 80042ea:	f7fb ff73 	bl	80001d4 <__adddf3>
 80042ee:	45a8      	cmp	r8, r5
 80042f0:	4606      	mov	r6, r0
 80042f2:	460f      	mov	r7, r1
 80042f4:	d018      	beq.n	8004328 <__ieee754_rem_pio2+0xf0>
 80042f6:	a38c      	add	r3, pc, #560	@ (adr r3, 8004528 <__ieee754_rem_pio2+0x2f0>)
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	f7fb ff6a 	bl	80001d4 <__adddf3>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4680      	mov	r8, r0
 8004306:	4689      	mov	r9, r1
 8004308:	4630      	mov	r0, r6
 800430a:	4639      	mov	r1, r7
 800430c:	f7fb ff60 	bl	80001d0 <__aeabi_dsub>
 8004310:	a385      	add	r3, pc, #532	@ (adr r3, 8004528 <__ieee754_rem_pio2+0x2f0>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	f7fb ff5d 	bl	80001d4 <__adddf3>
 800431a:	f04f 35ff 	mov.w	r5, #4294967295
 800431e:	e9c4 8900 	strd	r8, r9, [r4]
 8004322:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004326:	e7c4      	b.n	80042b2 <__ieee754_rem_pio2+0x7a>
 8004328:	a381      	add	r3, pc, #516	@ (adr r3, 8004530 <__ieee754_rem_pio2+0x2f8>)
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	f7fb ff51 	bl	80001d4 <__adddf3>
 8004332:	a381      	add	r3, pc, #516	@ (adr r3, 8004538 <__ieee754_rem_pio2+0x300>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	4606      	mov	r6, r0
 800433a:	460f      	mov	r7, r1
 800433c:	f7fb ff4a 	bl	80001d4 <__adddf3>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4680      	mov	r8, r0
 8004346:	4689      	mov	r9, r1
 8004348:	4630      	mov	r0, r6
 800434a:	4639      	mov	r1, r7
 800434c:	f7fb ff40 	bl	80001d0 <__aeabi_dsub>
 8004350:	a379      	add	r3, pc, #484	@ (adr r3, 8004538 <__ieee754_rem_pio2+0x300>)
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	e7de      	b.n	8004316 <__ieee754_rem_pio2+0xde>
 8004358:	4b82      	ldr	r3, [pc, #520]	@ (8004564 <__ieee754_rem_pio2+0x32c>)
 800435a:	4598      	cmp	r8, r3
 800435c:	f200 80d1 	bhi.w	8004502 <__ieee754_rem_pio2+0x2ca>
 8004360:	f000 f966 	bl	8004630 <fabs>
 8004364:	ec57 6b10 	vmov	r6, r7, d0
 8004368:	a375      	add	r3, pc, #468	@ (adr r3, 8004540 <__ieee754_rem_pio2+0x308>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	4630      	mov	r0, r6
 8004370:	4639      	mov	r1, r7
 8004372:	f7fc f8e5 	bl	8000540 <__aeabi_dmul>
 8004376:	4b7c      	ldr	r3, [pc, #496]	@ (8004568 <__ieee754_rem_pio2+0x330>)
 8004378:	2200      	movs	r2, #0
 800437a:	f7fb ff2b 	bl	80001d4 <__adddf3>
 800437e:	f7fc fb8f 	bl	8000aa0 <__aeabi_d2iz>
 8004382:	4605      	mov	r5, r0
 8004384:	f7fc f872 	bl	800046c <__aeabi_i2d>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004390:	a363      	add	r3, pc, #396	@ (adr r3, 8004520 <__ieee754_rem_pio2+0x2e8>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fc f8d3 	bl	8000540 <__aeabi_dmul>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4630      	mov	r0, r6
 80043a0:	4639      	mov	r1, r7
 80043a2:	f7fb ff15 	bl	80001d0 <__aeabi_dsub>
 80043a6:	a360      	add	r3, pc, #384	@ (adr r3, 8004528 <__ieee754_rem_pio2+0x2f0>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	4682      	mov	sl, r0
 80043ae:	468b      	mov	fp, r1
 80043b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043b4:	f7fc f8c4 	bl	8000540 <__aeabi_dmul>
 80043b8:	2d1f      	cmp	r5, #31
 80043ba:	4606      	mov	r6, r0
 80043bc:	460f      	mov	r7, r1
 80043be:	dc0c      	bgt.n	80043da <__ieee754_rem_pio2+0x1a2>
 80043c0:	4b6a      	ldr	r3, [pc, #424]	@ (800456c <__ieee754_rem_pio2+0x334>)
 80043c2:	1e6a      	subs	r2, r5, #1
 80043c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c8:	4543      	cmp	r3, r8
 80043ca:	d006      	beq.n	80043da <__ieee754_rem_pio2+0x1a2>
 80043cc:	4632      	mov	r2, r6
 80043ce:	463b      	mov	r3, r7
 80043d0:	4650      	mov	r0, sl
 80043d2:	4659      	mov	r1, fp
 80043d4:	f7fb fefc 	bl	80001d0 <__aeabi_dsub>
 80043d8:	e00e      	b.n	80043f8 <__ieee754_rem_pio2+0x1c0>
 80043da:	463b      	mov	r3, r7
 80043dc:	4632      	mov	r2, r6
 80043de:	4650      	mov	r0, sl
 80043e0:	4659      	mov	r1, fp
 80043e2:	f7fb fef5 	bl	80001d0 <__aeabi_dsub>
 80043e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80043ea:	9305      	str	r3, [sp, #20]
 80043ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80043f0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	dc02      	bgt.n	80043fe <__ieee754_rem_pio2+0x1c6>
 80043f8:	e9c4 0100 	strd	r0, r1, [r4]
 80043fc:	e039      	b.n	8004472 <__ieee754_rem_pio2+0x23a>
 80043fe:	a34c      	add	r3, pc, #304	@ (adr r3, 8004530 <__ieee754_rem_pio2+0x2f8>)
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004408:	f7fc f89a 	bl	8000540 <__aeabi_dmul>
 800440c:	4606      	mov	r6, r0
 800440e:	460f      	mov	r7, r1
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4650      	mov	r0, sl
 8004416:	4659      	mov	r1, fp
 8004418:	f7fb feda 	bl	80001d0 <__aeabi_dsub>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4680      	mov	r8, r0
 8004422:	4689      	mov	r9, r1
 8004424:	4650      	mov	r0, sl
 8004426:	4659      	mov	r1, fp
 8004428:	f7fb fed2 	bl	80001d0 <__aeabi_dsub>
 800442c:	4632      	mov	r2, r6
 800442e:	463b      	mov	r3, r7
 8004430:	f7fb fece 	bl	80001d0 <__aeabi_dsub>
 8004434:	a340      	add	r3, pc, #256	@ (adr r3, 8004538 <__ieee754_rem_pio2+0x300>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	4606      	mov	r6, r0
 800443c:	460f      	mov	r7, r1
 800443e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004442:	f7fc f87d 	bl	8000540 <__aeabi_dmul>
 8004446:	4632      	mov	r2, r6
 8004448:	463b      	mov	r3, r7
 800444a:	f7fb fec1 	bl	80001d0 <__aeabi_dsub>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4606      	mov	r6, r0
 8004454:	460f      	mov	r7, r1
 8004456:	4640      	mov	r0, r8
 8004458:	4649      	mov	r1, r9
 800445a:	f7fb feb9 	bl	80001d0 <__aeabi_dsub>
 800445e:	9a05      	ldr	r2, [sp, #20]
 8004460:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b31      	cmp	r3, #49	@ 0x31
 8004468:	dc20      	bgt.n	80044ac <__ieee754_rem_pio2+0x274>
 800446a:	e9c4 0100 	strd	r0, r1, [r4]
 800446e:	46c2      	mov	sl, r8
 8004470:	46cb      	mov	fp, r9
 8004472:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004476:	4650      	mov	r0, sl
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	4659      	mov	r1, fp
 800447e:	f7fb fea7 	bl	80001d0 <__aeabi_dsub>
 8004482:	463b      	mov	r3, r7
 8004484:	4632      	mov	r2, r6
 8004486:	f7fb fea3 	bl	80001d0 <__aeabi_dsub>
 800448a:	9b04      	ldr	r3, [sp, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004492:	f6bf af0e 	bge.w	80042b2 <__ieee754_rem_pio2+0x7a>
 8004496:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800449a:	6063      	str	r3, [r4, #4]
 800449c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044a0:	f8c4 8000 	str.w	r8, [r4]
 80044a4:	60a0      	str	r0, [r4, #8]
 80044a6:	60e3      	str	r3, [r4, #12]
 80044a8:	426d      	negs	r5, r5
 80044aa:	e702      	b.n	80042b2 <__ieee754_rem_pio2+0x7a>
 80044ac:	a326      	add	r3, pc, #152	@ (adr r3, 8004548 <__ieee754_rem_pio2+0x310>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044b6:	f7fc f843 	bl	8000540 <__aeabi_dmul>
 80044ba:	4606      	mov	r6, r0
 80044bc:	460f      	mov	r7, r1
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4640      	mov	r0, r8
 80044c4:	4649      	mov	r1, r9
 80044c6:	f7fb fe83 	bl	80001d0 <__aeabi_dsub>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4682      	mov	sl, r0
 80044d0:	468b      	mov	fp, r1
 80044d2:	4640      	mov	r0, r8
 80044d4:	4649      	mov	r1, r9
 80044d6:	f7fb fe7b 	bl	80001d0 <__aeabi_dsub>
 80044da:	4632      	mov	r2, r6
 80044dc:	463b      	mov	r3, r7
 80044de:	f7fb fe77 	bl	80001d0 <__aeabi_dsub>
 80044e2:	a31b      	add	r3, pc, #108	@ (adr r3, 8004550 <__ieee754_rem_pio2+0x318>)
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	4606      	mov	r6, r0
 80044ea:	460f      	mov	r7, r1
 80044ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044f0:	f7fc f826 	bl	8000540 <__aeabi_dmul>
 80044f4:	4632      	mov	r2, r6
 80044f6:	463b      	mov	r3, r7
 80044f8:	f7fb fe6a 	bl	80001d0 <__aeabi_dsub>
 80044fc:	4606      	mov	r6, r0
 80044fe:	460f      	mov	r7, r1
 8004500:	e764      	b.n	80043cc <__ieee754_rem_pio2+0x194>
 8004502:	4b1b      	ldr	r3, [pc, #108]	@ (8004570 <__ieee754_rem_pio2+0x338>)
 8004504:	4598      	cmp	r8, r3
 8004506:	d935      	bls.n	8004574 <__ieee754_rem_pio2+0x33c>
 8004508:	4632      	mov	r2, r6
 800450a:	463b      	mov	r3, r7
 800450c:	4630      	mov	r0, r6
 800450e:	4639      	mov	r1, r7
 8004510:	f7fb fe5e 	bl	80001d0 <__aeabi_dsub>
 8004514:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004518:	e9c4 0100 	strd	r0, r1, [r4]
 800451c:	e69e      	b.n	800425c <__ieee754_rem_pio2+0x24>
 800451e:	bf00      	nop
 8004520:	54400000 	.word	0x54400000
 8004524:	3ff921fb 	.word	0x3ff921fb
 8004528:	1a626331 	.word	0x1a626331
 800452c:	3dd0b461 	.word	0x3dd0b461
 8004530:	1a600000 	.word	0x1a600000
 8004534:	3dd0b461 	.word	0x3dd0b461
 8004538:	2e037073 	.word	0x2e037073
 800453c:	3ba3198a 	.word	0x3ba3198a
 8004540:	6dc9c883 	.word	0x6dc9c883
 8004544:	3fe45f30 	.word	0x3fe45f30
 8004548:	2e000000 	.word	0x2e000000
 800454c:	3ba3198a 	.word	0x3ba3198a
 8004550:	252049c1 	.word	0x252049c1
 8004554:	397b839a 	.word	0x397b839a
 8004558:	3fe921fb 	.word	0x3fe921fb
 800455c:	4002d97b 	.word	0x4002d97b
 8004560:	3ff921fb 	.word	0x3ff921fb
 8004564:	413921fb 	.word	0x413921fb
 8004568:	3fe00000 	.word	0x3fe00000
 800456c:	08004f18 	.word	0x08004f18
 8004570:	7fefffff 	.word	0x7fefffff
 8004574:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004578:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800457c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004580:	4630      	mov	r0, r6
 8004582:	460f      	mov	r7, r1
 8004584:	f7fc fa8c 	bl	8000aa0 <__aeabi_d2iz>
 8004588:	f7fb ff70 	bl	800046c <__aeabi_i2d>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4630      	mov	r0, r6
 8004592:	4639      	mov	r1, r7
 8004594:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004598:	f7fb fe1a 	bl	80001d0 <__aeabi_dsub>
 800459c:	4b22      	ldr	r3, [pc, #136]	@ (8004628 <__ieee754_rem_pio2+0x3f0>)
 800459e:	2200      	movs	r2, #0
 80045a0:	f7fb ffce 	bl	8000540 <__aeabi_dmul>
 80045a4:	460f      	mov	r7, r1
 80045a6:	4606      	mov	r6, r0
 80045a8:	f7fc fa7a 	bl	8000aa0 <__aeabi_d2iz>
 80045ac:	f7fb ff5e 	bl	800046c <__aeabi_i2d>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4630      	mov	r0, r6
 80045b6:	4639      	mov	r1, r7
 80045b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80045bc:	f7fb fe08 	bl	80001d0 <__aeabi_dsub>
 80045c0:	4b19      	ldr	r3, [pc, #100]	@ (8004628 <__ieee754_rem_pio2+0x3f0>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	f7fb ffbc 	bl	8000540 <__aeabi_dmul>
 80045c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80045cc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80045d0:	f04f 0803 	mov.w	r8, #3
 80045d4:	2600      	movs	r6, #0
 80045d6:	2700      	movs	r7, #0
 80045d8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80045dc:	4632      	mov	r2, r6
 80045de:	463b      	mov	r3, r7
 80045e0:	46c2      	mov	sl, r8
 80045e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80045e6:	f7fc fa13 	bl	8000a10 <__aeabi_dcmpeq>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d1f4      	bne.n	80045d8 <__ieee754_rem_pio2+0x3a0>
 80045ee:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <__ieee754_rem_pio2+0x3f4>)
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	2302      	movs	r3, #2
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	462a      	mov	r2, r5
 80045f8:	4653      	mov	r3, sl
 80045fa:	4621      	mov	r1, r4
 80045fc:	a806      	add	r0, sp, #24
 80045fe:	f000 f81f 	bl	8004640 <__kernel_rem_pio2>
 8004602:	9b04      	ldr	r3, [sp, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	4605      	mov	r5, r0
 8004608:	f6bf ae53 	bge.w	80042b2 <__ieee754_rem_pio2+0x7a>
 800460c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004610:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004614:	e9c4 2300 	strd	r2, r3, [r4]
 8004618:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800461c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004620:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004624:	e740      	b.n	80044a8 <__ieee754_rem_pio2+0x270>
 8004626:	bf00      	nop
 8004628:	41700000 	.word	0x41700000
 800462c:	08004f98 	.word	0x08004f98

08004630 <fabs>:
 8004630:	ec51 0b10 	vmov	r0, r1, d0
 8004634:	4602      	mov	r2, r0
 8004636:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800463a:	ec43 2b10 	vmov	d0, r2, r3
 800463e:	4770      	bx	lr

08004640 <__kernel_rem_pio2>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	ed2d 8b02 	vpush	{d8}
 8004648:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800464c:	f112 0f14 	cmn.w	r2, #20
 8004650:	9306      	str	r3, [sp, #24]
 8004652:	9104      	str	r1, [sp, #16]
 8004654:	4bbe      	ldr	r3, [pc, #760]	@ (8004950 <__kernel_rem_pio2+0x310>)
 8004656:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004658:	9008      	str	r0, [sp, #32]
 800465a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	9b06      	ldr	r3, [sp, #24]
 8004662:	f103 33ff 	add.w	r3, r3, #4294967295
 8004666:	bfa8      	it	ge
 8004668:	1ed4      	subge	r4, r2, #3
 800466a:	9305      	str	r3, [sp, #20]
 800466c:	bfb2      	itee	lt
 800466e:	2400      	movlt	r4, #0
 8004670:	2318      	movge	r3, #24
 8004672:	fb94 f4f3 	sdivge	r4, r4, r3
 8004676:	f06f 0317 	mvn.w	r3, #23
 800467a:	fb04 3303 	mla	r3, r4, r3, r3
 800467e:	eb03 0b02 	add.w	fp, r3, r2
 8004682:	9b00      	ldr	r3, [sp, #0]
 8004684:	9a05      	ldr	r2, [sp, #20]
 8004686:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004940 <__kernel_rem_pio2+0x300>
 800468a:	eb03 0802 	add.w	r8, r3, r2
 800468e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004690:	1aa7      	subs	r7, r4, r2
 8004692:	ae20      	add	r6, sp, #128	@ 0x80
 8004694:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004698:	2500      	movs	r5, #0
 800469a:	4545      	cmp	r5, r8
 800469c:	dd13      	ble.n	80046c6 <__kernel_rem_pio2+0x86>
 800469e:	9b06      	ldr	r3, [sp, #24]
 80046a0:	aa20      	add	r2, sp, #128	@ 0x80
 80046a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80046a6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80046aa:	f04f 0800 	mov.w	r8, #0
 80046ae:	9b00      	ldr	r3, [sp, #0]
 80046b0:	4598      	cmp	r8, r3
 80046b2:	dc31      	bgt.n	8004718 <__kernel_rem_pio2+0xd8>
 80046b4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004940 <__kernel_rem_pio2+0x300>
 80046b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80046c0:	462f      	mov	r7, r5
 80046c2:	2600      	movs	r6, #0
 80046c4:	e01b      	b.n	80046fe <__kernel_rem_pio2+0xbe>
 80046c6:	42ef      	cmn	r7, r5
 80046c8:	d407      	bmi.n	80046da <__kernel_rem_pio2+0x9a>
 80046ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80046ce:	f7fb fecd 	bl	800046c <__aeabi_i2d>
 80046d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80046d6:	3501      	adds	r5, #1
 80046d8:	e7df      	b.n	800469a <__kernel_rem_pio2+0x5a>
 80046da:	ec51 0b18 	vmov	r0, r1, d8
 80046de:	e7f8      	b.n	80046d2 <__kernel_rem_pio2+0x92>
 80046e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80046e8:	f7fb ff2a 	bl	8000540 <__aeabi_dmul>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046f4:	f7fb fd6e 	bl	80001d4 <__adddf3>
 80046f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046fc:	3601      	adds	r6, #1
 80046fe:	9b05      	ldr	r3, [sp, #20]
 8004700:	429e      	cmp	r6, r3
 8004702:	f1a7 0708 	sub.w	r7, r7, #8
 8004706:	ddeb      	ble.n	80046e0 <__kernel_rem_pio2+0xa0>
 8004708:	ed9d 7b02 	vldr	d7, [sp, #8]
 800470c:	f108 0801 	add.w	r8, r8, #1
 8004710:	ecaa 7b02 	vstmia	sl!, {d7}
 8004714:	3508      	adds	r5, #8
 8004716:	e7ca      	b.n	80046ae <__kernel_rem_pio2+0x6e>
 8004718:	9b00      	ldr	r3, [sp, #0]
 800471a:	f8dd 8000 	ldr.w	r8, [sp]
 800471e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004724:	930a      	str	r3, [sp, #40]	@ 0x28
 8004726:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004728:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800472c:	9309      	str	r3, [sp, #36]	@ 0x24
 800472e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004732:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004734:	ab98      	add	r3, sp, #608	@ 0x260
 8004736:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800473a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800473e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004742:	ac0c      	add	r4, sp, #48	@ 0x30
 8004744:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004746:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800474a:	46a1      	mov	r9, r4
 800474c:	46c2      	mov	sl, r8
 800474e:	f1ba 0f00 	cmp.w	sl, #0
 8004752:	f1a5 0508 	sub.w	r5, r5, #8
 8004756:	dc77      	bgt.n	8004848 <__kernel_rem_pio2+0x208>
 8004758:	4658      	mov	r0, fp
 800475a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800475e:	f000 fac7 	bl	8004cf0 <scalbn>
 8004762:	ec57 6b10 	vmov	r6, r7, d0
 8004766:	2200      	movs	r2, #0
 8004768:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800476c:	4630      	mov	r0, r6
 800476e:	4639      	mov	r1, r7
 8004770:	f7fb fee6 	bl	8000540 <__aeabi_dmul>
 8004774:	ec41 0b10 	vmov	d0, r0, r1
 8004778:	f000 fb3a 	bl	8004df0 <floor>
 800477c:	4b75      	ldr	r3, [pc, #468]	@ (8004954 <__kernel_rem_pio2+0x314>)
 800477e:	ec51 0b10 	vmov	r0, r1, d0
 8004782:	2200      	movs	r2, #0
 8004784:	f7fb fedc 	bl	8000540 <__aeabi_dmul>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4630      	mov	r0, r6
 800478e:	4639      	mov	r1, r7
 8004790:	f7fb fd1e 	bl	80001d0 <__aeabi_dsub>
 8004794:	460f      	mov	r7, r1
 8004796:	4606      	mov	r6, r0
 8004798:	f7fc f982 	bl	8000aa0 <__aeabi_d2iz>
 800479c:	9002      	str	r0, [sp, #8]
 800479e:	f7fb fe65 	bl	800046c <__aeabi_i2d>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4630      	mov	r0, r6
 80047a8:	4639      	mov	r1, r7
 80047aa:	f7fb fd11 	bl	80001d0 <__aeabi_dsub>
 80047ae:	f1bb 0f00 	cmp.w	fp, #0
 80047b2:	4606      	mov	r6, r0
 80047b4:	460f      	mov	r7, r1
 80047b6:	dd6c      	ble.n	8004892 <__kernel_rem_pio2+0x252>
 80047b8:	f108 31ff 	add.w	r1, r8, #4294967295
 80047bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80047be:	9d02      	ldr	r5, [sp, #8]
 80047c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80047c4:	f1cb 0018 	rsb	r0, fp, #24
 80047c8:	fa43 f200 	asr.w	r2, r3, r0
 80047cc:	4415      	add	r5, r2
 80047ce:	4082      	lsls	r2, r0
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	aa0c      	add	r2, sp, #48	@ 0x30
 80047d4:	9502      	str	r5, [sp, #8]
 80047d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80047da:	f1cb 0217 	rsb	r2, fp, #23
 80047de:	fa43 f902 	asr.w	r9, r3, r2
 80047e2:	f1b9 0f00 	cmp.w	r9, #0
 80047e6:	dd64      	ble.n	80048b2 <__kernel_rem_pio2+0x272>
 80047e8:	9b02      	ldr	r3, [sp, #8]
 80047ea:	2200      	movs	r2, #0
 80047ec:	3301      	adds	r3, #1
 80047ee:	9302      	str	r3, [sp, #8]
 80047f0:	4615      	mov	r5, r2
 80047f2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80047f6:	4590      	cmp	r8, r2
 80047f8:	f300 80b8 	bgt.w	800496c <__kernel_rem_pio2+0x32c>
 80047fc:	f1bb 0f00 	cmp.w	fp, #0
 8004800:	dd07      	ble.n	8004812 <__kernel_rem_pio2+0x1d2>
 8004802:	f1bb 0f01 	cmp.w	fp, #1
 8004806:	f000 80bf 	beq.w	8004988 <__kernel_rem_pio2+0x348>
 800480a:	f1bb 0f02 	cmp.w	fp, #2
 800480e:	f000 80c6 	beq.w	800499e <__kernel_rem_pio2+0x35e>
 8004812:	f1b9 0f02 	cmp.w	r9, #2
 8004816:	d14c      	bne.n	80048b2 <__kernel_rem_pio2+0x272>
 8004818:	4632      	mov	r2, r6
 800481a:	463b      	mov	r3, r7
 800481c:	494e      	ldr	r1, [pc, #312]	@ (8004958 <__kernel_rem_pio2+0x318>)
 800481e:	2000      	movs	r0, #0
 8004820:	f7fb fcd6 	bl	80001d0 <__aeabi_dsub>
 8004824:	4606      	mov	r6, r0
 8004826:	460f      	mov	r7, r1
 8004828:	2d00      	cmp	r5, #0
 800482a:	d042      	beq.n	80048b2 <__kernel_rem_pio2+0x272>
 800482c:	4658      	mov	r0, fp
 800482e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004948 <__kernel_rem_pio2+0x308>
 8004832:	f000 fa5d 	bl	8004cf0 <scalbn>
 8004836:	4630      	mov	r0, r6
 8004838:	4639      	mov	r1, r7
 800483a:	ec53 2b10 	vmov	r2, r3, d0
 800483e:	f7fb fcc7 	bl	80001d0 <__aeabi_dsub>
 8004842:	4606      	mov	r6, r0
 8004844:	460f      	mov	r7, r1
 8004846:	e034      	b.n	80048b2 <__kernel_rem_pio2+0x272>
 8004848:	4b44      	ldr	r3, [pc, #272]	@ (800495c <__kernel_rem_pio2+0x31c>)
 800484a:	2200      	movs	r2, #0
 800484c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004850:	f7fb fe76 	bl	8000540 <__aeabi_dmul>
 8004854:	f7fc f924 	bl	8000aa0 <__aeabi_d2iz>
 8004858:	f7fb fe08 	bl	800046c <__aeabi_i2d>
 800485c:	4b40      	ldr	r3, [pc, #256]	@ (8004960 <__kernel_rem_pio2+0x320>)
 800485e:	2200      	movs	r2, #0
 8004860:	4606      	mov	r6, r0
 8004862:	460f      	mov	r7, r1
 8004864:	f7fb fe6c 	bl	8000540 <__aeabi_dmul>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004870:	f7fb fcae 	bl	80001d0 <__aeabi_dsub>
 8004874:	f7fc f914 	bl	8000aa0 <__aeabi_d2iz>
 8004878:	e9d5 2300 	ldrd	r2, r3, [r5]
 800487c:	f849 0b04 	str.w	r0, [r9], #4
 8004880:	4639      	mov	r1, r7
 8004882:	4630      	mov	r0, r6
 8004884:	f7fb fca6 	bl	80001d4 <__adddf3>
 8004888:	f10a 3aff 	add.w	sl, sl, #4294967295
 800488c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004890:	e75d      	b.n	800474e <__kernel_rem_pio2+0x10e>
 8004892:	d107      	bne.n	80048a4 <__kernel_rem_pio2+0x264>
 8004894:	f108 33ff 	add.w	r3, r8, #4294967295
 8004898:	aa0c      	add	r2, sp, #48	@ 0x30
 800489a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80048a2:	e79e      	b.n	80047e2 <__kernel_rem_pio2+0x1a2>
 80048a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004964 <__kernel_rem_pio2+0x324>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	f7fc f8d0 	bl	8000a4c <__aeabi_dcmpge>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d143      	bne.n	8004938 <__kernel_rem_pio2+0x2f8>
 80048b0:	4681      	mov	r9, r0
 80048b2:	2200      	movs	r2, #0
 80048b4:	2300      	movs	r3, #0
 80048b6:	4630      	mov	r0, r6
 80048b8:	4639      	mov	r1, r7
 80048ba:	f7fc f8a9 	bl	8000a10 <__aeabi_dcmpeq>
 80048be:	2800      	cmp	r0, #0
 80048c0:	f000 80bf 	beq.w	8004a42 <__kernel_rem_pio2+0x402>
 80048c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80048c8:	2200      	movs	r2, #0
 80048ca:	9900      	ldr	r1, [sp, #0]
 80048cc:	428b      	cmp	r3, r1
 80048ce:	da6e      	bge.n	80049ae <__kernel_rem_pio2+0x36e>
 80048d0:	2a00      	cmp	r2, #0
 80048d2:	f000 8089 	beq.w	80049e8 <__kernel_rem_pio2+0x3a8>
 80048d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80048da:	ab0c      	add	r3, sp, #48	@ 0x30
 80048dc:	f1ab 0b18 	sub.w	fp, fp, #24
 80048e0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f6      	beq.n	80048d6 <__kernel_rem_pio2+0x296>
 80048e8:	4658      	mov	r0, fp
 80048ea:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004948 <__kernel_rem_pio2+0x308>
 80048ee:	f000 f9ff 	bl	8004cf0 <scalbn>
 80048f2:	f108 0301 	add.w	r3, r8, #1
 80048f6:	00da      	lsls	r2, r3, #3
 80048f8:	9205      	str	r2, [sp, #20]
 80048fa:	ec55 4b10 	vmov	r4, r5, d0
 80048fe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004900:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800495c <__kernel_rem_pio2+0x31c>
 8004904:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004908:	4646      	mov	r6, r8
 800490a:	f04f 0a00 	mov.w	sl, #0
 800490e:	2e00      	cmp	r6, #0
 8004910:	f280 80cf 	bge.w	8004ab2 <__kernel_rem_pio2+0x472>
 8004914:	4644      	mov	r4, r8
 8004916:	2c00      	cmp	r4, #0
 8004918:	f2c0 80fd 	blt.w	8004b16 <__kernel_rem_pio2+0x4d6>
 800491c:	4b12      	ldr	r3, [pc, #72]	@ (8004968 <__kernel_rem_pio2+0x328>)
 800491e:	461f      	mov	r7, r3
 8004920:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004926:	9306      	str	r3, [sp, #24]
 8004928:	f04f 0a00 	mov.w	sl, #0
 800492c:	f04f 0b00 	mov.w	fp, #0
 8004930:	2600      	movs	r6, #0
 8004932:	eba8 0504 	sub.w	r5, r8, r4
 8004936:	e0e2      	b.n	8004afe <__kernel_rem_pio2+0x4be>
 8004938:	f04f 0902 	mov.w	r9, #2
 800493c:	e754      	b.n	80047e8 <__kernel_rem_pio2+0x1a8>
 800493e:	bf00      	nop
	...
 800494c:	3ff00000 	.word	0x3ff00000
 8004950:	080050e0 	.word	0x080050e0
 8004954:	40200000 	.word	0x40200000
 8004958:	3ff00000 	.word	0x3ff00000
 800495c:	3e700000 	.word	0x3e700000
 8004960:	41700000 	.word	0x41700000
 8004964:	3fe00000 	.word	0x3fe00000
 8004968:	080050a0 	.word	0x080050a0
 800496c:	f854 3b04 	ldr.w	r3, [r4], #4
 8004970:	b945      	cbnz	r5, 8004984 <__kernel_rem_pio2+0x344>
 8004972:	b123      	cbz	r3, 800497e <__kernel_rem_pio2+0x33e>
 8004974:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004978:	f844 3c04 	str.w	r3, [r4, #-4]
 800497c:	2301      	movs	r3, #1
 800497e:	3201      	adds	r2, #1
 8004980:	461d      	mov	r5, r3
 8004982:	e738      	b.n	80047f6 <__kernel_rem_pio2+0x1b6>
 8004984:	1acb      	subs	r3, r1, r3
 8004986:	e7f7      	b.n	8004978 <__kernel_rem_pio2+0x338>
 8004988:	f108 32ff 	add.w	r2, r8, #4294967295
 800498c:	ab0c      	add	r3, sp, #48	@ 0x30
 800498e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004992:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004996:	a90c      	add	r1, sp, #48	@ 0x30
 8004998:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800499c:	e739      	b.n	8004812 <__kernel_rem_pio2+0x1d2>
 800499e:	f108 32ff 	add.w	r2, r8, #4294967295
 80049a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80049a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80049ac:	e7f3      	b.n	8004996 <__kernel_rem_pio2+0x356>
 80049ae:	a90c      	add	r1, sp, #48	@ 0x30
 80049b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	430a      	orrs	r2, r1
 80049b8:	e787      	b.n	80048ca <__kernel_rem_pio2+0x28a>
 80049ba:	3401      	adds	r4, #1
 80049bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80049c0:	2a00      	cmp	r2, #0
 80049c2:	d0fa      	beq.n	80049ba <__kernel_rem_pio2+0x37a>
 80049c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80049ca:	eb0d 0503 	add.w	r5, sp, r3
 80049ce:	9b06      	ldr	r3, [sp, #24]
 80049d0:	aa20      	add	r2, sp, #128	@ 0x80
 80049d2:	4443      	add	r3, r8
 80049d4:	f108 0701 	add.w	r7, r8, #1
 80049d8:	3d98      	subs	r5, #152	@ 0x98
 80049da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80049de:	4444      	add	r4, r8
 80049e0:	42bc      	cmp	r4, r7
 80049e2:	da04      	bge.n	80049ee <__kernel_rem_pio2+0x3ae>
 80049e4:	46a0      	mov	r8, r4
 80049e6:	e6a2      	b.n	800472e <__kernel_rem_pio2+0xee>
 80049e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049ea:	2401      	movs	r4, #1
 80049ec:	e7e6      	b.n	80049bc <__kernel_rem_pio2+0x37c>
 80049ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80049f4:	f7fb fd3a 	bl	800046c <__aeabi_i2d>
 80049f8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004cc0 <__kernel_rem_pio2+0x680>
 80049fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004a00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a08:	46b2      	mov	sl, r6
 8004a0a:	f04f 0800 	mov.w	r8, #0
 8004a0e:	9b05      	ldr	r3, [sp, #20]
 8004a10:	4598      	cmp	r8, r3
 8004a12:	dd05      	ble.n	8004a20 <__kernel_rem_pio2+0x3e0>
 8004a14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a18:	3701      	adds	r7, #1
 8004a1a:	eca5 7b02 	vstmia	r5!, {d7}
 8004a1e:	e7df      	b.n	80049e0 <__kernel_rem_pio2+0x3a0>
 8004a20:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004a24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004a28:	f7fb fd8a 	bl	8000540 <__aeabi_dmul>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a34:	f7fb fbce 	bl	80001d4 <__adddf3>
 8004a38:	f108 0801 	add.w	r8, r8, #1
 8004a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a40:	e7e5      	b.n	8004a0e <__kernel_rem_pio2+0x3ce>
 8004a42:	f1cb 0000 	rsb	r0, fp, #0
 8004a46:	ec47 6b10 	vmov	d0, r6, r7
 8004a4a:	f000 f951 	bl	8004cf0 <scalbn>
 8004a4e:	ec55 4b10 	vmov	r4, r5, d0
 8004a52:	4b9d      	ldr	r3, [pc, #628]	@ (8004cc8 <__kernel_rem_pio2+0x688>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	4620      	mov	r0, r4
 8004a58:	4629      	mov	r1, r5
 8004a5a:	f7fb fff7 	bl	8000a4c <__aeabi_dcmpge>
 8004a5e:	b300      	cbz	r0, 8004aa2 <__kernel_rem_pio2+0x462>
 8004a60:	4b9a      	ldr	r3, [pc, #616]	@ (8004ccc <__kernel_rem_pio2+0x68c>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	4620      	mov	r0, r4
 8004a66:	4629      	mov	r1, r5
 8004a68:	f7fb fd6a 	bl	8000540 <__aeabi_dmul>
 8004a6c:	f7fc f818 	bl	8000aa0 <__aeabi_d2iz>
 8004a70:	4606      	mov	r6, r0
 8004a72:	f7fb fcfb 	bl	800046c <__aeabi_i2d>
 8004a76:	4b94      	ldr	r3, [pc, #592]	@ (8004cc8 <__kernel_rem_pio2+0x688>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f7fb fd61 	bl	8000540 <__aeabi_dmul>
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4602      	mov	r2, r0
 8004a82:	4629      	mov	r1, r5
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7fb fba3 	bl	80001d0 <__aeabi_dsub>
 8004a8a:	f7fc f809 	bl	8000aa0 <__aeabi_d2iz>
 8004a8e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a90:	f10b 0b18 	add.w	fp, fp, #24
 8004a94:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004a98:	f108 0801 	add.w	r8, r8, #1
 8004a9c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004aa0:	e722      	b.n	80048e8 <__kernel_rem_pio2+0x2a8>
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	f7fb fffb 	bl	8000aa0 <__aeabi_d2iz>
 8004aaa:	ab0c      	add	r3, sp, #48	@ 0x30
 8004aac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004ab0:	e71a      	b.n	80048e8 <__kernel_rem_pio2+0x2a8>
 8004ab2:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ab4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004ab8:	f7fb fcd8 	bl	800046c <__aeabi_i2d>
 8004abc:	4622      	mov	r2, r4
 8004abe:	462b      	mov	r3, r5
 8004ac0:	f7fb fd3e 	bl	8000540 <__aeabi_dmul>
 8004ac4:	4652      	mov	r2, sl
 8004ac6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004aca:	465b      	mov	r3, fp
 8004acc:	4620      	mov	r0, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f7fb fd36 	bl	8000540 <__aeabi_dmul>
 8004ad4:	3e01      	subs	r6, #1
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	460d      	mov	r5, r1
 8004ada:	e718      	b.n	800490e <__kernel_rem_pio2+0x2ce>
 8004adc:	9906      	ldr	r1, [sp, #24]
 8004ade:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004ae2:	9106      	str	r1, [sp, #24]
 8004ae4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004ae8:	f7fb fd2a 	bl	8000540 <__aeabi_dmul>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4650      	mov	r0, sl
 8004af2:	4659      	mov	r1, fp
 8004af4:	f7fb fb6e 	bl	80001d4 <__adddf3>
 8004af8:	3601      	adds	r6, #1
 8004afa:	4682      	mov	sl, r0
 8004afc:	468b      	mov	fp, r1
 8004afe:	9b00      	ldr	r3, [sp, #0]
 8004b00:	429e      	cmp	r6, r3
 8004b02:	dc01      	bgt.n	8004b08 <__kernel_rem_pio2+0x4c8>
 8004b04:	42b5      	cmp	r5, r6
 8004b06:	dae9      	bge.n	8004adc <__kernel_rem_pio2+0x49c>
 8004b08:	ab48      	add	r3, sp, #288	@ 0x120
 8004b0a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004b0e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004b12:	3c01      	subs	r4, #1
 8004b14:	e6ff      	b.n	8004916 <__kernel_rem_pio2+0x2d6>
 8004b16:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	dc0b      	bgt.n	8004b34 <__kernel_rem_pio2+0x4f4>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	dc39      	bgt.n	8004b94 <__kernel_rem_pio2+0x554>
 8004b20:	d05d      	beq.n	8004bde <__kernel_rem_pio2+0x59e>
 8004b22:	9b02      	ldr	r3, [sp, #8]
 8004b24:	f003 0007 	and.w	r0, r3, #7
 8004b28:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004b2c:	ecbd 8b02 	vpop	{d8}
 8004b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b34:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d1f3      	bne.n	8004b22 <__kernel_rem_pio2+0x4e2>
 8004b3a:	9b05      	ldr	r3, [sp, #20]
 8004b3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b40:	eb0d 0403 	add.w	r4, sp, r3
 8004b44:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004b48:	4625      	mov	r5, r4
 8004b4a:	46c2      	mov	sl, r8
 8004b4c:	f1ba 0f00 	cmp.w	sl, #0
 8004b50:	f1a5 0508 	sub.w	r5, r5, #8
 8004b54:	dc6b      	bgt.n	8004c2e <__kernel_rem_pio2+0x5ee>
 8004b56:	4645      	mov	r5, r8
 8004b58:	2d01      	cmp	r5, #1
 8004b5a:	f1a4 0408 	sub.w	r4, r4, #8
 8004b5e:	f300 8087 	bgt.w	8004c70 <__kernel_rem_pio2+0x630>
 8004b62:	9c05      	ldr	r4, [sp, #20]
 8004b64:	ab48      	add	r3, sp, #288	@ 0x120
 8004b66:	441c      	add	r4, r3
 8004b68:	2000      	movs	r0, #0
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	f1b8 0f01 	cmp.w	r8, #1
 8004b70:	f300 809c 	bgt.w	8004cac <__kernel_rem_pio2+0x66c>
 8004b74:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004b78:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004b7c:	f1b9 0f00 	cmp.w	r9, #0
 8004b80:	f040 80a6 	bne.w	8004cd0 <__kernel_rem_pio2+0x690>
 8004b84:	9b04      	ldr	r3, [sp, #16]
 8004b86:	e9c3 7800 	strd	r7, r8, [r3]
 8004b8a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004b8e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004b92:	e7c6      	b.n	8004b22 <__kernel_rem_pio2+0x4e2>
 8004b94:	9d05      	ldr	r5, [sp, #20]
 8004b96:	ab48      	add	r3, sp, #288	@ 0x120
 8004b98:	441d      	add	r5, r3
 8004b9a:	4644      	mov	r4, r8
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	2c00      	cmp	r4, #0
 8004ba2:	da35      	bge.n	8004c10 <__kernel_rem_pio2+0x5d0>
 8004ba4:	f1b9 0f00 	cmp.w	r9, #0
 8004ba8:	d038      	beq.n	8004c1c <__kernel_rem_pio2+0x5dc>
 8004baa:	4602      	mov	r2, r0
 8004bac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004bb0:	9c04      	ldr	r4, [sp, #16]
 8004bb2:	e9c4 2300 	strd	r2, r3, [r4]
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004bbe:	f7fb fb07 	bl	80001d0 <__aeabi_dsub>
 8004bc2:	ad4a      	add	r5, sp, #296	@ 0x128
 8004bc4:	2401      	movs	r4, #1
 8004bc6:	45a0      	cmp	r8, r4
 8004bc8:	da2b      	bge.n	8004c22 <__kernel_rem_pio2+0x5e2>
 8004bca:	f1b9 0f00 	cmp.w	r9, #0
 8004bce:	d002      	beq.n	8004bd6 <__kernel_rem_pio2+0x596>
 8004bd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	9b04      	ldr	r3, [sp, #16]
 8004bd8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004bdc:	e7a1      	b.n	8004b22 <__kernel_rem_pio2+0x4e2>
 8004bde:	9c05      	ldr	r4, [sp, #20]
 8004be0:	ab48      	add	r3, sp, #288	@ 0x120
 8004be2:	441c      	add	r4, r3
 8004be4:	2000      	movs	r0, #0
 8004be6:	2100      	movs	r1, #0
 8004be8:	f1b8 0f00 	cmp.w	r8, #0
 8004bec:	da09      	bge.n	8004c02 <__kernel_rem_pio2+0x5c2>
 8004bee:	f1b9 0f00 	cmp.w	r9, #0
 8004bf2:	d002      	beq.n	8004bfa <__kernel_rem_pio2+0x5ba>
 8004bf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	9b04      	ldr	r3, [sp, #16]
 8004bfc:	e9c3 0100 	strd	r0, r1, [r3]
 8004c00:	e78f      	b.n	8004b22 <__kernel_rem_pio2+0x4e2>
 8004c02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004c06:	f7fb fae5 	bl	80001d4 <__adddf3>
 8004c0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c0e:	e7eb      	b.n	8004be8 <__kernel_rem_pio2+0x5a8>
 8004c10:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004c14:	f7fb fade 	bl	80001d4 <__adddf3>
 8004c18:	3c01      	subs	r4, #1
 8004c1a:	e7c1      	b.n	8004ba0 <__kernel_rem_pio2+0x560>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	e7c6      	b.n	8004bb0 <__kernel_rem_pio2+0x570>
 8004c22:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004c26:	f7fb fad5 	bl	80001d4 <__adddf3>
 8004c2a:	3401      	adds	r4, #1
 8004c2c:	e7cb      	b.n	8004bc6 <__kernel_rem_pio2+0x586>
 8004c2e:	ed95 7b00 	vldr	d7, [r5]
 8004c32:	ed8d 7b00 	vstr	d7, [sp]
 8004c36:	ed95 7b02 	vldr	d7, [r5, #8]
 8004c3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c3e:	ec53 2b17 	vmov	r2, r3, d7
 8004c42:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004c46:	f7fb fac5 	bl	80001d4 <__adddf3>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4606      	mov	r6, r0
 8004c50:	460f      	mov	r7, r1
 8004c52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c56:	f7fb fabb 	bl	80001d0 <__aeabi_dsub>
 8004c5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c5e:	f7fb fab9 	bl	80001d4 <__adddf3>
 8004c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c66:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004c6a:	e9c5 6700 	strd	r6, r7, [r5]
 8004c6e:	e76d      	b.n	8004b4c <__kernel_rem_pio2+0x50c>
 8004c70:	ed94 7b00 	vldr	d7, [r4]
 8004c74:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004c78:	ec51 0b17 	vmov	r0, r1, d7
 8004c7c:	4652      	mov	r2, sl
 8004c7e:	465b      	mov	r3, fp
 8004c80:	ed8d 7b00 	vstr	d7, [sp]
 8004c84:	f7fb faa6 	bl	80001d4 <__adddf3>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4606      	mov	r6, r0
 8004c8e:	460f      	mov	r7, r1
 8004c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c94:	f7fb fa9c 	bl	80001d0 <__aeabi_dsub>
 8004c98:	4652      	mov	r2, sl
 8004c9a:	465b      	mov	r3, fp
 8004c9c:	f7fb fa9a 	bl	80001d4 <__adddf3>
 8004ca0:	3d01      	subs	r5, #1
 8004ca2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ca6:	e9c4 6700 	strd	r6, r7, [r4]
 8004caa:	e755      	b.n	8004b58 <__kernel_rem_pio2+0x518>
 8004cac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004cb0:	f7fb fa90 	bl	80001d4 <__adddf3>
 8004cb4:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cb8:	e758      	b.n	8004b6c <__kernel_rem_pio2+0x52c>
 8004cba:	bf00      	nop
 8004cbc:	f3af 8000 	nop.w
	...
 8004cc8:	41700000 	.word	0x41700000
 8004ccc:	3e700000 	.word	0x3e700000
 8004cd0:	9b04      	ldr	r3, [sp, #16]
 8004cd2:	9a04      	ldr	r2, [sp, #16]
 8004cd4:	601f      	str	r7, [r3, #0]
 8004cd6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004cda:	605c      	str	r4, [r3, #4]
 8004cdc:	609d      	str	r5, [r3, #8]
 8004cde:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004ce2:	60d3      	str	r3, [r2, #12]
 8004ce4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ce8:	6110      	str	r0, [r2, #16]
 8004cea:	6153      	str	r3, [r2, #20]
 8004cec:	e719      	b.n	8004b22 <__kernel_rem_pio2+0x4e2>
 8004cee:	bf00      	nop

08004cf0 <scalbn>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	ec55 4b10 	vmov	r4, r5, d0
 8004cf6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	462b      	mov	r3, r5
 8004cfe:	b991      	cbnz	r1, 8004d26 <scalbn+0x36>
 8004d00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004d04:	4323      	orrs	r3, r4
 8004d06:	d03d      	beq.n	8004d84 <scalbn+0x94>
 8004d08:	4b35      	ldr	r3, [pc, #212]	@ (8004de0 <scalbn+0xf0>)
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f7fb fc16 	bl	8000540 <__aeabi_dmul>
 8004d14:	4b33      	ldr	r3, [pc, #204]	@ (8004de4 <scalbn+0xf4>)
 8004d16:	429e      	cmp	r6, r3
 8004d18:	4604      	mov	r4, r0
 8004d1a:	460d      	mov	r5, r1
 8004d1c:	da0f      	bge.n	8004d3e <scalbn+0x4e>
 8004d1e:	a328      	add	r3, pc, #160	@ (adr r3, 8004dc0 <scalbn+0xd0>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	e01e      	b.n	8004d64 <scalbn+0x74>
 8004d26:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004d2a:	4291      	cmp	r1, r2
 8004d2c:	d10b      	bne.n	8004d46 <scalbn+0x56>
 8004d2e:	4622      	mov	r2, r4
 8004d30:	4620      	mov	r0, r4
 8004d32:	4629      	mov	r1, r5
 8004d34:	f7fb fa4e 	bl	80001d4 <__adddf3>
 8004d38:	4604      	mov	r4, r0
 8004d3a:	460d      	mov	r5, r1
 8004d3c:	e022      	b.n	8004d84 <scalbn+0x94>
 8004d3e:	460b      	mov	r3, r1
 8004d40:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004d44:	3936      	subs	r1, #54	@ 0x36
 8004d46:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004d4a:	4296      	cmp	r6, r2
 8004d4c:	dd0d      	ble.n	8004d6a <scalbn+0x7a>
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	a11d      	add	r1, pc, #116	@ (adr r1, 8004dc8 <scalbn+0xd8>)
 8004d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d56:	da02      	bge.n	8004d5e <scalbn+0x6e>
 8004d58:	a11d      	add	r1, pc, #116	@ (adr r1, 8004dd0 <scalbn+0xe0>)
 8004d5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d5e:	a31a      	add	r3, pc, #104	@ (adr r3, 8004dc8 <scalbn+0xd8>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f7fb fbec 	bl	8000540 <__aeabi_dmul>
 8004d68:	e7e6      	b.n	8004d38 <scalbn+0x48>
 8004d6a:	1872      	adds	r2, r6, r1
 8004d6c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004d70:	428a      	cmp	r2, r1
 8004d72:	dcec      	bgt.n	8004d4e <scalbn+0x5e>
 8004d74:	2a00      	cmp	r2, #0
 8004d76:	dd08      	ble.n	8004d8a <scalbn+0x9a>
 8004d78:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004d7c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004d80:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d84:	ec45 4b10 	vmov	d0, r4, r5
 8004d88:	bd70      	pop	{r4, r5, r6, pc}
 8004d8a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004d8e:	da08      	bge.n	8004da2 <scalbn+0xb2>
 8004d90:	2d00      	cmp	r5, #0
 8004d92:	a10b      	add	r1, pc, #44	@ (adr r1, 8004dc0 <scalbn+0xd0>)
 8004d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d98:	dac1      	bge.n	8004d1e <scalbn+0x2e>
 8004d9a:	a10f      	add	r1, pc, #60	@ (adr r1, 8004dd8 <scalbn+0xe8>)
 8004d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004da0:	e7bd      	b.n	8004d1e <scalbn+0x2e>
 8004da2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004da6:	3236      	adds	r2, #54	@ 0x36
 8004da8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004dac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004db0:	4620      	mov	r0, r4
 8004db2:	4b0d      	ldr	r3, [pc, #52]	@ (8004de8 <scalbn+0xf8>)
 8004db4:	4629      	mov	r1, r5
 8004db6:	2200      	movs	r2, #0
 8004db8:	e7d4      	b.n	8004d64 <scalbn+0x74>
 8004dba:	bf00      	nop
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	c2f8f359 	.word	0xc2f8f359
 8004dc4:	01a56e1f 	.word	0x01a56e1f
 8004dc8:	8800759c 	.word	0x8800759c
 8004dcc:	7e37e43c 	.word	0x7e37e43c
 8004dd0:	8800759c 	.word	0x8800759c
 8004dd4:	fe37e43c 	.word	0xfe37e43c
 8004dd8:	c2f8f359 	.word	0xc2f8f359
 8004ddc:	81a56e1f 	.word	0x81a56e1f
 8004de0:	43500000 	.word	0x43500000
 8004de4:	ffff3cb0 	.word	0xffff3cb0
 8004de8:	3c900000 	.word	0x3c900000
 8004dec:	00000000 	.word	0x00000000

08004df0 <floor>:
 8004df0:	ec51 0b10 	vmov	r0, r1, d0
 8004df4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004e00:	2e13      	cmp	r6, #19
 8004e02:	460c      	mov	r4, r1
 8004e04:	4605      	mov	r5, r0
 8004e06:	4680      	mov	r8, r0
 8004e08:	dc34      	bgt.n	8004e74 <floor+0x84>
 8004e0a:	2e00      	cmp	r6, #0
 8004e0c:	da17      	bge.n	8004e3e <floor+0x4e>
 8004e0e:	a332      	add	r3, pc, #200	@ (adr r3, 8004ed8 <floor+0xe8>)
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f7fb f9de 	bl	80001d4 <__adddf3>
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f7fb fe20 	bl	8000a60 <__aeabi_dcmpgt>
 8004e20:	b150      	cbz	r0, 8004e38 <floor+0x48>
 8004e22:	2c00      	cmp	r4, #0
 8004e24:	da55      	bge.n	8004ed2 <floor+0xe2>
 8004e26:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004e2a:	432c      	orrs	r4, r5
 8004e2c:	2500      	movs	r5, #0
 8004e2e:	42ac      	cmp	r4, r5
 8004e30:	4c2b      	ldr	r4, [pc, #172]	@ (8004ee0 <floor+0xf0>)
 8004e32:	bf08      	it	eq
 8004e34:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	e023      	b.n	8004e86 <floor+0x96>
 8004e3e:	4f29      	ldr	r7, [pc, #164]	@ (8004ee4 <floor+0xf4>)
 8004e40:	4137      	asrs	r7, r6
 8004e42:	ea01 0307 	and.w	r3, r1, r7
 8004e46:	4303      	orrs	r3, r0
 8004e48:	d01d      	beq.n	8004e86 <floor+0x96>
 8004e4a:	a323      	add	r3, pc, #140	@ (adr r3, 8004ed8 <floor+0xe8>)
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f7fb f9c0 	bl	80001d4 <__adddf3>
 8004e54:	2200      	movs	r2, #0
 8004e56:	2300      	movs	r3, #0
 8004e58:	f7fb fe02 	bl	8000a60 <__aeabi_dcmpgt>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d0eb      	beq.n	8004e38 <floor+0x48>
 8004e60:	2c00      	cmp	r4, #0
 8004e62:	bfbe      	ittt	lt
 8004e64:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004e68:	4133      	asrlt	r3, r6
 8004e6a:	18e4      	addlt	r4, r4, r3
 8004e6c:	ea24 0407 	bic.w	r4, r4, r7
 8004e70:	2500      	movs	r5, #0
 8004e72:	e7e1      	b.n	8004e38 <floor+0x48>
 8004e74:	2e33      	cmp	r6, #51	@ 0x33
 8004e76:	dd0a      	ble.n	8004e8e <floor+0x9e>
 8004e78:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004e7c:	d103      	bne.n	8004e86 <floor+0x96>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	f7fb f9a7 	bl	80001d4 <__adddf3>
 8004e86:	ec41 0b10 	vmov	d0, r0, r1
 8004e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e8e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004e92:	f04f 37ff 	mov.w	r7, #4294967295
 8004e96:	40df      	lsrs	r7, r3
 8004e98:	4207      	tst	r7, r0
 8004e9a:	d0f4      	beq.n	8004e86 <floor+0x96>
 8004e9c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004ed8 <floor+0xe8>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f7fb f997 	bl	80001d4 <__adddf3>
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f7fb fdd9 	bl	8000a60 <__aeabi_dcmpgt>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d0c2      	beq.n	8004e38 <floor+0x48>
 8004eb2:	2c00      	cmp	r4, #0
 8004eb4:	da0a      	bge.n	8004ecc <floor+0xdc>
 8004eb6:	2e14      	cmp	r6, #20
 8004eb8:	d101      	bne.n	8004ebe <floor+0xce>
 8004eba:	3401      	adds	r4, #1
 8004ebc:	e006      	b.n	8004ecc <floor+0xdc>
 8004ebe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	40b3      	lsls	r3, r6
 8004ec6:	441d      	add	r5, r3
 8004ec8:	4545      	cmp	r5, r8
 8004eca:	d3f6      	bcc.n	8004eba <floor+0xca>
 8004ecc:	ea25 0507 	bic.w	r5, r5, r7
 8004ed0:	e7b2      	b.n	8004e38 <floor+0x48>
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	462c      	mov	r4, r5
 8004ed6:	e7af      	b.n	8004e38 <floor+0x48>
 8004ed8:	8800759c 	.word	0x8800759c
 8004edc:	7e37e43c 	.word	0x7e37e43c
 8004ee0:	bff00000 	.word	0xbff00000
 8004ee4:	000fffff 	.word	0x000fffff

08004ee8 <_init>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	bf00      	nop
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr

08004ef4 <_fini>:
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	bf00      	nop
 8004ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efa:	bc08      	pop	{r3}
 8004efc:	469e      	mov	lr, r3
 8004efe:	4770      	bx	lr
