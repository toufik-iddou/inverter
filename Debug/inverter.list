
inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08003870  08003870  00004870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec8  08003ec8  00005088  2**0
                  CONTENTS
  4 .ARM          00000008  08003ec8  08003ec8  00004ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed0  08003ed0  00005088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed0  08003ed0  00004ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ed4  08003ed4  00004ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003ed8  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005088  2**0
                  CONTENTS
 10 .bss          000002e8  20000088  20000088  00005088  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000370  20000370  00005088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134d1  00000000  00000000  000050b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000381a  00000000  00000000  00018589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  0001bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9f  00000000  00000000  0001cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002478c  00000000  00000000  0001daff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000195c5  00000000  00000000  0004228b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd152  00000000  00000000  0005b850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001389a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027a0  00000000  00000000  001389e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00007920  00000000  00000000  0013b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000043  00000000  00000000  00142aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003858 	.word	0x08003858

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08003858 	.word	0x08003858

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96a 	b.w	8000e2c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f f68c 	uxth.w	r6, ip
 8000ba6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8112 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810f 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fa1f f38e 	uxth.w	r3, lr
 8000bda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bde:	fb07 1110 	mls	r1, r7, r0, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f606 	mul.w	r6, r0, r6
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fc 	bcs.w	8000df2 <__udivmoddi4+0x282>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f9 	bls.w	8000df2 <__udivmoddi4+0x282>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80f0 	bcc.w	8000e1c <__udivmoddi4+0x2ac>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8090 	bne.w	8000d74 <__udivmoddi4+0x204>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	2101      	movs	r1, #1
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb07 f006 	mul.w	r0, r7, r6
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cd 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c96:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80b0 	bhi.w	8000e16 <__udivmoddi4+0x2a6>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd4:	ea43 030c 	orr.w	r3, r3, ip
 8000cd8:	40f4      	lsrs	r4, r6
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	0c38      	lsrs	r0, r7, #16
 8000ce0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf8:	45a1      	cmp	r9, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d06:	f080 8084 	bcs.w	8000e12 <__udivmoddi4+0x2a2>
 8000d0a:	45a1      	cmp	r9, r4
 8000d0c:	f240 8081 	bls.w	8000e12 <__udivmoddi4+0x2a2>
 8000d10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	fa1f f983 	uxth.w	r9, r3
 8000d1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d22:	fb00 4413 	mls	r4, r0, r3, r4
 8000d26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x1d2>
 8000d32:	193c      	adds	r4, r7, r4
 8000d34:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d38:	d267      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d46:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4a:	eba4 040c 	sub.w	r4, r4, ip
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	46ce      	mov	lr, r9
 8000d52:	469c      	mov	ip, r3
 8000d54:	d351      	bcc.n	8000dfa <__udivmoddi4+0x28a>
 8000d56:	d04e      	beq.n	8000df6 <__udivmoddi4+0x286>
 8000d58:	b155      	cbz	r5, 8000d70 <__udivmoddi4+0x200>
 8000d5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e750      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d74:	f1c2 0320 	rsb	r3, r2, #32
 8000d78:	fa20 f103 	lsr.w	r1, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3110 	mls	r1, r8, r0, r3
 8000d9c:	0c23      	lsrs	r3, r4, #16
 8000d9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da2:	fb00 f107 	mul.w	r1, r0, r7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x24c>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db2:	d22c      	bcs.n	8000e0e <__udivmoddi4+0x29e>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	d92a      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb01 f307 	mul.w	r3, r1, r7
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x276>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ddc:	d213      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d911      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	1ae4      	subs	r4, r4, r3
 8000de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dec:	e739      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dee:	4604      	mov	r4, r0
 8000df0:	e6f0      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e706      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df6:	45c8      	cmp	r8, r9
 8000df8:	d2ae      	bcs.n	8000d58 <__udivmoddi4+0x1e8>
 8000dfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e02:	3801      	subs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <__udivmoddi4+0x1e8>
 8000e06:	4631      	mov	r1, r6
 8000e08:	e7ed      	b.n	8000de6 <__udivmoddi4+0x276>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e799      	b.n	8000d42 <__udivmoddi4+0x1d2>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e7d4      	b.n	8000dbc <__udivmoddi4+0x24c>
 8000e12:	46d6      	mov	lr, sl
 8000e14:	e77f      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e16:	4463      	add	r3, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e74d      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	e70f      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	e730      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <ADC_Init>:
ADC_HandleTypeDef hadc1;

static void ADC1_Init(void);


void ADC_Init(void){
 8000e30:	b500      	push	{lr}

	  ADC_ChannelConfTypeDef sConfig = {0};

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8000e32:	4829      	ldr	r0, [pc, #164]	@ (8000ed8 <ADC_Init+0xa8>)
 8000e34:	4929      	ldr	r1, [pc, #164]	@ (8000edc <ADC_Init+0xac>)
 8000e36:	6001      	str	r1, [r0, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
	  hadc1.Init.ScanConvMode = ENABLE;
 8000e38:	2201      	movs	r2, #1
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	2300      	movs	r3, #0
void ADC_Init(void){
 8000e3c:	b085      	sub	sp, #20
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc1.Init.NbrOfConversion = 3;
	  hadc1.Init.DMAContinuousRequests = DISABLE;
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3e:	e9c0 2204 	strd	r2, r2, [r0, #16]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e42:	4a27      	ldr	r2, [pc, #156]	@ (8000ee0 <ADC_Init+0xb0>)
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e44:	7603      	strb	r3, [r0, #24]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	e9cd 3300 	strd	r3, r3, [sp]
 8000e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4e:	f880 3020 	strb.w	r3, [r0, #32]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e52:	60c3      	str	r3, [r0, #12]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e54:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
	  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000e5e:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8000e62:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
	  hadc1.Init.NbrOfConversion = 3;
 8000e66:	2303      	movs	r3, #3
	  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000e68:	e9c0 c101 	strd	ip, r1, [r0, #4]
	  hadc1.Init.NbrOfConversion = 3;
 8000e6c:	61c3      	str	r3, [r0, #28]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e6e:	f000 fe01 	bl	8001a74 <HAL_ADC_Init>
 8000e72:	b9f8      	cbnz	r0, 8000eb4 <ADC_Init+0x84>
	    Error_Handler();
	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000e74:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8000ed0 <ADC_Init+0xa0>
	  sConfig.Rank = 1;
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e78:	2300      	movs	r3, #0
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7a:	4817      	ldr	r0, [pc, #92]	@ (8000ed8 <ADC_Init+0xa8>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e7c:	9302      	str	r3, [sp, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7e:	4669      	mov	r1, sp
	  sConfig.Channel = ADC_CHANNEL_1;
 8000e80:	ed8d 7b00 	vstr	d7, [sp]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e84:	f000 ff9c 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 8000e88:	b9f8      	cbnz	r0, 8000eca <ADC_Init+0x9a>
	    Error_Handler();
	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	2302      	movs	r3, #2
	  sConfig.Rank = 2;
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	4812      	ldr	r0, [pc, #72]	@ (8000ed8 <ADC_Init+0xa8>)
 8000e90:	4669      	mov	r1, sp
	  sConfig.Channel = ADC_CHANNEL_2;
 8000e92:	e9cd 2300 	strd	r2, r3, [sp]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e96:	f000 ff93 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 8000e9a:	b998      	cbnz	r0, 8000ec4 <ADC_Init+0x94>
	    Error_Handler();
	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8000e9c:	2206      	movs	r2, #6
 8000e9e:	2303      	movs	r3, #3
	  sConfig.Rank = 3;
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea0:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <ADC_Init+0xa8>)
 8000ea2:	4669      	mov	r1, sp
	  sConfig.Channel = ADC_CHANNEL_6;
 8000ea4:	e9cd 2300 	strd	r2, r3, [sp]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea8:	f000 ff8a 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 8000eac:	b928      	cbnz	r0, 8000eba <ADC_Init+0x8a>
}
 8000eae:	b005      	add	sp, #20
 8000eb0:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 8000eb4:	f000 fd62 	bl	800197c <Error_Handler>
 8000eb8:	e7dc      	b.n	8000e74 <ADC_Init+0x44>
	  {
	    Error_Handler();
 8000eba:	f000 fd5f 	bl	800197c <Error_Handler>
}
 8000ebe:	b005      	add	sp, #20
 8000ec0:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 8000ec4:	f000 fd5a 	bl	800197c <Error_Handler>
 8000ec8:	e7e8      	b.n	8000e9c <ADC_Init+0x6c>
	    Error_Handler();
 8000eca:	f000 fd57 	bl	800197c <Error_Handler>
 8000ece:	e7dc      	b.n	8000e8a <ADC_Init+0x5a>
 8000ed0:	00000001 	.word	0x00000001
 8000ed4:	00000001 	.word	0x00000001
 8000ed8:	200000a8 	.word	0x200000a8
 8000edc:	40012000 	.word	0x40012000
 8000ee0:	0f000001 	.word	0x0f000001

08000ee4 <ADC_Start>:
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) buffer_adc, ADC_CHANNELS_LENGHT);
 8000ee4:	4902      	ldr	r1, [pc, #8]	@ (8000ef0 <ADC_Start+0xc>)
 8000ee6:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <ADC_Start+0x10>)
 8000ee8:	2203      	movs	r2, #3
 8000eea:	f000 be6f 	b.w	8001bcc <HAL_ADC_Start_DMA>
 8000eee:	bf00      	nop
 8000ef0:	200000f0 	.word	0x200000f0
 8000ef4:	200000a8 	.word	0x200000a8

08000ef8 <System_Clock_Init>:
RTC_HandleTypeDef hrtc;



void System_Clock_Init(void)
{
 8000ef8:	b510      	push	{r4, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	2300      	movs	r3, #0
{
 8000efc:	b094      	sub	sp, #80	@ 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f02:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000f06:	e9cd 3305 	strd	r3, r3, [sp, #20]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4925      	ldr	r1, [pc, #148]	@ (8000fa0 <System_Clock_Init+0xa8>)
 8000f0c:	9301      	str	r3, [sp, #4]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	930c      	str	r3, [sp, #48]	@ 0x30
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	9307      	str	r3, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	6c08      	ldr	r0, [r1, #64]	@ 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f14:	4a23      	ldr	r2, [pc, #140]	@ (8000fa4 <System_Clock_Init+0xac>)
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000f1a:	6408      	str	r0, [r1, #64]	@ 0x40
 8000f1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000f1e:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000f22:	9101      	str	r1, [sp, #4]
 8000f24:	9901      	ldr	r1, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	6813      	ldr	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f32:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000f98 <System_Clock_Init+0xa0>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3a:	2102      	movs	r1, #2
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	9302      	str	r3, [sp, #8]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f3e:	2001      	movs	r0, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f40:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000f44:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f46:	e9cd 010d 	strd	r0, r1, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4a:	930f      	str	r3, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000f4e:	23a8      	movs	r3, #168	@ 0xa8
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f50:	ed8d 7b08 	vstr	d7, [sp, #32]
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000f54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f58:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5c:	9c02      	ldr	r4, [sp, #8]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	f001 fb61 	bl	8002624 <HAL_RCC_OscConfig>
 8000f62:	b990      	cbnz	r0, 8000f8a <System_Clock_Init+0x92>
	Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	210f      	movs	r1, #15
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2302      	movs	r3, #2
 8000f68:	e9cd 1303 	strd	r1, r3, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2400      	movs	r4, #0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f6e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f76:	a803      	add	r0, sp, #12
 8000f78:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f7a:	e9cd 4205 	strd	r4, r2, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f7e:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f80:	f001 fd66 	bl	8002a50 <HAL_RCC_ClockConfig>
 8000f84:	b920      	cbnz	r0, 8000f90 <System_Clock_Init+0x98>
	{
	Error_Handler();
	}
}
 8000f86:	b014      	add	sp, #80	@ 0x50
 8000f88:	bd10      	pop	{r4, pc}
	Error_Handler();
 8000f8a:	f000 fcf7 	bl	800197c <Error_Handler>
 8000f8e:	e7e9      	b.n	8000f64 <System_Clock_Init+0x6c>
	Error_Handler();
 8000f90:	f000 fcf4 	bl	800197c <Error_Handler>
}
 8000f94:	b014      	add	sp, #80	@ 0x50
 8000f96:	bd10      	pop	{r4, pc}
 8000f98:	00000009 	.word	0x00000009
 8000f9c:	00010000 	.word	0x00010000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <Real_Time_Clock_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void Real_Time_Clock_Init(void)
{
 8000fa8:	b510      	push	{r4, lr}

	   /** Initialize RTC Only
	   */
	   hrtc.Instance = RTC;
 8000faa:	480a      	ldr	r0, [pc, #40]	@ (8000fd4 <Real_Time_Clock_Init+0x2c>)
 8000fac:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd8 <Real_Time_Clock_Init+0x30>)
	   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fae:	2300      	movs	r3, #0
	   hrtc.Init.AsynchPrediv = 127;
 8000fb0:	217f      	movs	r1, #127	@ 0x7f
	   hrtc.Init.SynchPrediv = 255;
 8000fb2:	22ff      	movs	r2, #255	@ 0xff
	   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fb4:	e9c0 4300 	strd	r4, r3, [r0]
	   hrtc.Init.SynchPrediv = 255;
 8000fb8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
	   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fbc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000fc0:	6183      	str	r3, [r0, #24]
	   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
	   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fc2:	f001 fec5 	bl	8002d50 <HAL_RTC_Init>
 8000fc6:	b900      	cbnz	r0, 8000fca <Real_Time_Clock_Init+0x22>
	     Error_Handler();
	   }



}
 8000fc8:	bd10      	pop	{r4, pc}
 8000fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	     Error_Handler();
 8000fce:	f000 bcd5 	b.w	800197c <Error_Handler>
 8000fd2:	bf00      	nop
 8000fd4:	200000f8 	.word	0x200000f8
 8000fd8:	40002800 	.word	0x40002800

08000fdc <System_Init>:
 */


#include"config/config.h"

void System_Init(void){
 8000fdc:	b508      	push	{r3, lr}
HAL_Init();
 8000fde:	f000 fd1d 	bl	8001a1c <HAL_Init>
System_Clock_Init();
 8000fe2:	f7ff ff89 	bl	8000ef8 <System_Clock_Init>
GPIO_Init();
 8000fe6:	f000 f851 	bl	800108c <GPIO_Init>
DMA_Init();
 8000fea:	f000 f835 	bl	8001058 <DMA_Init>
Real_Time_Clock_Init();
 8000fee:	f7ff ffdb 	bl	8000fa8 <Real_Time_Clock_Init>
TIM_Init();
 8000ff2:	f000 f89d 	bl	8001130 <TIM_Init>
ADC_Init();
 8000ff6:	f7ff ff1b 	bl	8000e30 <ADC_Init>
DAC_Init();
}
 8000ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
DAC_Init();
 8000ffe:	f000 b803 	b.w	8001008 <DAC_Init>
 8001002:	bf00      	nop
 8001004:	0000      	movs	r0, r0
	...

08001008 <DAC_Init>:
static void DAC_Out_Init(void);

DAC_HandleTypeDef hdac;


void DAC_Init(void){
 8001008:	b500      	push	{lr}
{
  DAC_ChannelConfTypeDef sConfig = {0};

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800100a:	4811      	ldr	r0, [pc, #68]	@ (8001050 <DAC_Init+0x48>)
 800100c:	4a11      	ldr	r2, [pc, #68]	@ (8001054 <DAC_Init+0x4c>)
 800100e:	6002      	str	r2, [r0, #0]
void DAC_Init(void){
 8001010:	b083      	sub	sp, #12
  DAC_ChannelConfTypeDef sConfig = {0};
 8001012:	2300      	movs	r3, #0
 8001014:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001018:	f000 fff0 	bl	8001ffc <HAL_DAC_Init>
 800101c:	b960      	cbnz	r0, 8001038 <DAC_Init+0x30>
    Error_Handler();
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800101e:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8001048 <DAC_Init+0x40>
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001022:	480b      	ldr	r0, [pc, #44]	@ (8001050 <DAC_Init+0x48>)
 8001024:	2210      	movs	r2, #16
 8001026:	4669      	mov	r1, sp
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001028:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800102c:	f000 fffc 	bl	8002028 <HAL_DAC_ConfigChannel>
 8001030:	b928      	cbnz	r0, 800103e <DAC_Init+0x36>
}
 8001032:	b003      	add	sp, #12
 8001034:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001038:	f000 fca0 	bl	800197c <Error_Handler>
 800103c:	e7ef      	b.n	800101e <DAC_Init+0x16>
  {
    Error_Handler();
 800103e:	f000 fc9d 	bl	800197c <Error_Handler>
}
 8001042:	b003      	add	sp, #12
 8001044:	f85d fb04 	ldr.w	pc, [sp], #4
	...
 8001050:	20000118 	.word	0x20000118
 8001054:	40007400 	.word	0x40007400

08001058 <DMA_Init>:
#include "config/dma_config.h"

DMA_HandleTypeDef hdma_adc1;

void DMA_Init(void)
{
 8001058:	b500      	push	{lr}
 800105a:	b083      	sub	sp, #12

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800105c:	2200      	movs	r2, #0
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <DMA_Init+0x30>)
 8001060:	9201      	str	r2, [sp, #4]
 8001062:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001064:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8001068:	6319      	str	r1, [r3, #48]	@ 0x30
 800106a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001070:	9301      	str	r3, [sp, #4]

	  /* DMA interrupt init */
	  /* DMA2_Stream0_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001072:	2038      	movs	r0, #56	@ 0x38
 8001074:	4611      	mov	r1, r2
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8001076:	9b01      	ldr	r3, [sp, #4]
	  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001078:	f000 ff5c 	bl	8001f34 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800107c:	2038      	movs	r0, #56	@ 0x38

}
 800107e:	b003      	add	sp, #12
 8001080:	f85d eb04 	ldr.w	lr, [sp], #4
	  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001084:	f000 bf92 	b.w	8001fac <HAL_NVIC_EnableIRQ>
 8001088:	40023800 	.word	0x40023800

0800108c <GPIO_Init>:


#include"config/gpio_config.h"

void GPIO_Init(void)
{
 800108c:	b510      	push	{r4, lr}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	2200      	movs	r2, #0
{
 8001090:	b08c      	sub	sp, #48	@ 0x30
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8001096:	e9cd 2208 	strd	r2, r2, [sp, #32]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109a:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <GPIO_Init+0x9c>)
 800109c:	9201      	str	r2, [sp, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	920a      	str	r2, [sp, #40]	@ 0x28
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();
	  __HAL_RCC_GPIOE_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80010a2:	4c22      	ldr	r4, [pc, #136]	@ (800112c <GPIO_Init+0xa0>)
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80010a8:	6319      	str	r1, [r3, #48]	@ 0x30
 80010aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010ac:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80010b0:	9101      	str	r1, [sp, #4]
 80010b2:	9901      	ldr	r1, [sp, #4]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b4:	9202      	str	r2, [sp, #8]
 80010b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010b8:	f041 0104 	orr.w	r1, r1, #4
 80010bc:	6319      	str	r1, [r3, #48]	@ 0x30
 80010be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010c0:	f001 0104 	and.w	r1, r1, #4
 80010c4:	9102      	str	r1, [sp, #8]
 80010c6:	9902      	ldr	r1, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	9203      	str	r2, [sp, #12]
 80010ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010cc:	f041 0101 	orr.w	r1, r1, #1
 80010d0:	6319      	str	r1, [r3, #48]	@ 0x30
 80010d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010d4:	f001 0101 	and.w	r1, r1, #1
 80010d8:	9103      	str	r1, [sp, #12]
 80010da:	9903      	ldr	r1, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	9204      	str	r2, [sp, #16]
 80010de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010e0:	f041 0102 	orr.w	r1, r1, #2
 80010e4:	6319      	str	r1, [r3, #48]	@ 0x30
 80010e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010e8:	f001 0102 	and.w	r1, r1, #2
 80010ec:	9104      	str	r1, [sp, #16]
 80010ee:	9904      	ldr	r1, [sp, #16]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f0:	9205      	str	r2, [sp, #20]
 80010f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010f4:	f041 0110 	orr.w	r1, r1, #16
 80010f8:	6319      	str	r1, [r3, #48]	@ 0x30
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	9305      	str	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001102:	4620      	mov	r0, r4
 8001104:	2108      	movs	r1, #8
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001106:	9b05      	ldr	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001108:	f001 fa7e 	bl	8002608 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PC3 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800110c:	2208      	movs	r2, #8
 800110e:	2301      	movs	r3, #1
 8001110:	e9cd 2306 	strd	r2, r3, [sp, #24]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	a906      	add	r1, sp, #24
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	4620      	mov	r0, r4
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800111c:	e9cd 2308 	strd	r2, r3, [sp, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f001 f954 	bl	80023cc <HAL_GPIO_Init>

}
 8001124:	b00c      	add	sp, #48	@ 0x30
 8001126:	bd10      	pop	{r4, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020800 	.word	0x40020800

08001130 <TIM_Init>:

/* Private Functions ----------------------------------------------------------*/
static void TIM1_Init(void);
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void TIM_Init(void){
 8001130:	b510      	push	{r4, lr}



static void TIM1_Init(void)
{
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	2400      	movs	r4, #0
void TIM_Init(void){
 8001134:	b096      	sub	sp, #88	@ 0x58
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
	  TIM_OC_InitTypeDef sConfigOC = {0};
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001136:	2220      	movs	r2, #32
 8001138:	4621      	mov	r1, r4
 800113a:	a80e      	add	r0, sp, #56	@ 0x38
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113c:	e9cd 4403 	strd	r4, r4, [sp, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001140:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001144:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8001148:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114c:	9402      	str	r4, [sp, #8]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	9400      	str	r4, [sp, #0]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001150:	9406      	str	r4, [sp, #24]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	9405      	str	r4, [sp, #20]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	9401      	str	r4, [sp, #4]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001156:	f002 fa47 	bl	80035e8 <memset>

	  htim1.Instance = TIM1;
 800115a:	4843      	ldr	r0, [pc, #268]	@ (8001268 <TIM_Init+0x138>)
 800115c:	4a43      	ldr	r2, [pc, #268]	@ (800126c <TIM_Init+0x13c>)
	  htim1.Init.Prescaler = 0;
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim1.Init.Period = 8400-1;
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  htim1.Init.RepetitionCounter = 0;
 800115e:	6184      	str	r4, [r0, #24]
	  htim1.Init.Period = 8400-1;
 8001160:	f242 03cf 	movw	r3, #8399	@ 0x20cf
	  htim1.Init.Prescaler = 0;
 8001164:	e9c0 2400 	strd	r2, r4, [r0]
	  htim1.Init.Period = 8400-1;
 8001168:	e9c0 4302 	strd	r4, r3, [r0, #8]
	  htim1.Init.RepetitionCounter = 0;
 800116c:	e9c0 4404 	strd	r4, r4, [r0, #16]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001170:	f002 f884 	bl	800327c <HAL_TIM_Base_Init>
 8001174:	2800      	cmp	r0, #0
 8001176:	d156      	bne.n	8001226 <TIM_Init+0xf6>
	  {
	    Error_Handler();
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800117c:	483a      	ldr	r0, [pc, #232]	@ (8001268 <TIM_Init+0x138>)
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117e:	9302      	str	r3, [sp, #8]
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001180:	a902      	add	r1, sp, #8
 8001182:	f001 febd 	bl	8002f00 <HAL_TIM_ConfigClockSource>
 8001186:	2800      	cmp	r0, #0
 8001188:	d165      	bne.n	8001256 <TIM_Init+0x126>
	  {
	    Error_Handler();
	  }
	  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800118a:	4837      	ldr	r0, [pc, #220]	@ (8001268 <TIM_Init+0x138>)
 800118c:	f002 f8a4 	bl	80032d8 <HAL_TIM_OC_Init>
 8001190:	2800      	cmp	r0, #0
 8001192:	d15d      	bne.n	8001250 <TIM_Init+0x120>
	  {
	    Error_Handler();
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001194:	4834      	ldr	r0, [pc, #208]	@ (8001268 <TIM_Init+0x138>)
 8001196:	f002 f8cd 	bl	8003334 <HAL_TIM_PWM_Init>
 800119a:	2800      	cmp	r0, #0
 800119c:	d155      	bne.n	800124a <TIM_Init+0x11a>
	  {
	    Error_Handler();
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2200      	movs	r2, #0
 80011a0:	2300      	movs	r3, #0
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a2:	4831      	ldr	r0, [pc, #196]	@ (8001268 <TIM_Init+0x138>)
 80011a4:	4669      	mov	r1, sp
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	e9cd 2300 	strd	r2, r3, [sp]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011aa:	f002 f9af 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d148      	bne.n	8001244 <TIM_Init+0x114>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_TIMING;
	  sConfigOC.Pulse = 0;
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2000      	movs	r0, #0
 80011b4:	2100      	movs	r1, #0
	  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011b6:	2200      	movs	r2, #0
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011bc:	482a      	ldr	r0, [pc, #168]	@ (8001268 <TIM_Init+0x138>)
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011be:	920c      	str	r2, [sp, #48]	@ 0x30
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	a906      	add	r1, sp, #24
	  sConfigOC.Pulse = 0;
 80011c2:	e9cd 2206 	strd	r2, r2, [sp, #24]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011c6:	e9cd 2208 	strd	r2, r2, [sp, #32]
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ca:	f002 f913 	bl	80033f4 <HAL_TIM_OC_ConfigChannel>
 80011ce:	2800      	cmp	r0, #0
 80011d0:	d135      	bne.n	800123e <TIM_Init+0x10e>
	  {
	    Error_Handler();
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d2:	2360      	movs	r3, #96	@ 0x60
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d4:	4824      	ldr	r0, [pc, #144]	@ (8001268 <TIM_Init+0x138>)
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d6:	9306      	str	r3, [sp, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d8:	2204      	movs	r2, #4
 80011da:	a906      	add	r1, sp, #24
 80011dc:	f002 f936 	bl	800344c <HAL_TIM_PWM_ConfigChannel>
 80011e0:	bb50      	cbnz	r0, 8001238 <TIM_Init+0x108>
	  {
	    Error_Handler();
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011e2:	4821      	ldr	r0, [pc, #132]	@ (8001268 <TIM_Init+0x138>)
 80011e4:	2208      	movs	r2, #8
 80011e6:	a906      	add	r1, sp, #24
 80011e8:	f002 f930 	bl	800344c <HAL_TIM_PWM_ConfigChannel>
 80011ec:	bb08      	cbnz	r0, 8001232 <TIM_Init+0x102>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	  sBreakDeadTimeConfig.DeadTime = 51;
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ee:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8001260 <TIM_Init+0x130>
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011f2:	2300      	movs	r3, #0
	  sBreakDeadTimeConfig.DeadTime = 51;
 80011f4:	2233      	movs	r2, #51	@ 0x33
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f6:	481c      	ldr	r0, [pc, #112]	@ (8001268 <TIM_Init+0x138>)
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011f8:	9315      	str	r3, [sp, #84]	@ 0x54
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011fa:	a90e      	add	r1, sp, #56	@ 0x38
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011fc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
	  sBreakDeadTimeConfig.DeadTime = 51;
 8001200:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001204:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001208:	f002 f9c0 	bl	800358c <HAL_TIMEx_ConfigBreakDeadTime>
 800120c:	b970      	cbnz	r0, 800122c <TIM_Init+0xfc>
	  {
	    Error_Handler();
	  }
	  HAL_TIM_MspPostInit(&htim1);
 800120e:	4816      	ldr	r0, [pc, #88]	@ (8001268 <TIM_Init+0x138>)
 8001210:	f000 f980 	bl	8001514 <HAL_TIM_MspPostInit>
	TIM1->CCR1=2500;
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <TIM_Init+0x13c>)
 8001216:	f640 11c4 	movw	r1, #2500	@ 0x9c4
	TIM1->CCR2=5000;
 800121a:	f241 3288 	movw	r2, #5000	@ 0x1388
	TIM1->CCR1=2500;
 800121e:	6359      	str	r1, [r3, #52]	@ 0x34
	TIM1->CCR2=5000;
 8001220:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001222:	b016      	add	sp, #88	@ 0x58
 8001224:	bd10      	pop	{r4, pc}
	    Error_Handler();
 8001226:	f000 fba9 	bl	800197c <Error_Handler>
 800122a:	e7a5      	b.n	8001178 <TIM_Init+0x48>
	    Error_Handler();
 800122c:	f000 fba6 	bl	800197c <Error_Handler>
 8001230:	e7ed      	b.n	800120e <TIM_Init+0xde>
	    Error_Handler();
 8001232:	f000 fba3 	bl	800197c <Error_Handler>
 8001236:	e7da      	b.n	80011ee <TIM_Init+0xbe>
	    Error_Handler();
 8001238:	f000 fba0 	bl	800197c <Error_Handler>
 800123c:	e7d1      	b.n	80011e2 <TIM_Init+0xb2>
	    Error_Handler();
 800123e:	f000 fb9d 	bl	800197c <Error_Handler>
 8001242:	e7c6      	b.n	80011d2 <TIM_Init+0xa2>
	    Error_Handler();
 8001244:	f000 fb9a 	bl	800197c <Error_Handler>
 8001248:	e7b3      	b.n	80011b2 <TIM_Init+0x82>
	    Error_Handler();
 800124a:	f000 fb97 	bl	800197c <Error_Handler>
 800124e:	e7a6      	b.n	800119e <TIM_Init+0x6e>
	    Error_Handler();
 8001250:	f000 fb94 	bl	800197c <Error_Handler>
 8001254:	e79e      	b.n	8001194 <TIM_Init+0x64>
	    Error_Handler();
 8001256:	f000 fb91 	bl	800197c <Error_Handler>
 800125a:	e796      	b.n	800118a <TIM_Init+0x5a>
 800125c:	f3af 8000 	nop.w
 8001260:	00000000 	.word	0x00000000
 8001264:	00002000 	.word	0x00002000
 8001268:	20000190 	.word	0x20000190
 800126c:	40010000 	.word	0x40010000

08001270 <init_pid_controller>:

#ifdef DEVELOPMENT_MODE
	init_sin_V_ref();
#endif

}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <EnableTiming>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void EnableTiming(void)
{
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <EnableTiming+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	07db      	lsls	r3, r3, #31
{
 800127c:	b430      	push	{r4, r5}
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 800127e:	d502      	bpl.n	8001286 <EnableTiming+0x12>
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <EnableTiming+0x44>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
    Debug_ITMDebug = 1;

  *SCB_DEMCR |= 0x01000000;
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <EnableTiming+0x48>)
  *DWT_LAR = 0xC5ACCE55; // enable access
 8001288:	4c0d      	ldr	r4, [pc, #52]	@ (80012c0 <EnableTiming+0x4c>)
  *SCB_DEMCR |= 0x01000000;
 800128a:	6819      	ldr	r1, [r3, #0]
  *DWT_CYCCNT = 0; // reset the counter
 800128c:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <EnableTiming+0x50>)
  *SCB_DEMCR |= 0x01000000;
 800128e:	680b      	ldr	r3, [r1, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 8001290:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <EnableTiming+0x54>)
  *DWT_LAR = 0xC5ACCE55; // enable access
 8001292:	6824      	ldr	r4, [r4, #0]
  *DWT_CYCCNT = 0; // reset the counter
 8001294:	6800      	ldr	r0, [r0, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 8001296:	6812      	ldr	r2, [r2, #0]
  *DWT_LAR = 0xC5ACCE55; // enable access
 8001298:	4d0c      	ldr	r5, [pc, #48]	@ (80012cc <EnableTiming+0x58>)
  *SCB_DEMCR |= 0x01000000;
 800129a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800129e:	600b      	str	r3, [r1, #0]
  *DWT_CYCCNT = 0; // reset the counter
 80012a0:	2300      	movs	r3, #0
  *DWT_LAR = 0xC5ACCE55; // enable access
 80012a2:	6025      	str	r5, [r4, #0]
  *DWT_CYCCNT = 0; // reset the counter
 80012a4:	6003      	str	r3, [r0, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 80012a6:	6813      	ldr	r3, [r2, #0]
 80012a8:	f043 0301 	orr.w	r3, r3, #1
}
 80012ac:	bc30      	pop	{r4, r5}
  *DWT_CONTROL |= 1 ; // enable the counter
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000004 	.word	0x20000004
 80012c0:	2000000c 	.word	0x2000000c
 80012c4:	20000014 	.word	0x20000014
 80012c8:	20000010 	.word	0x20000010
 80012cc:	c5acce55 	.word	0xc5acce55

080012d0 <set_start_adc>:

/* USER CODE BEGIN PFP */
int i =0;
volatile bool start_adc = false;
void set_start_adc (bool adc){
	start_adc=adc;
 80012d0:	4b01      	ldr	r3, [pc, #4]	@ (80012d8 <set_start_adc+0x8>)
 80012d2:	7018      	strb	r0, [r3, #0]
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200001d8 	.word	0x200001d8

080012dc <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80012dc:	b508      	push	{r3, lr}
	PWM_Generate();
 80012de:	f000 f997 	bl	8001610 <PWM_Generate>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);

}
 80012e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80012e6:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x14>)
 80012e8:	2108      	movs	r1, #8
 80012ea:	f001 b991 	b.w	8002610 <HAL_GPIO_TogglePin>
 80012ee:	bf00      	nop
 80012f0:	40020800 	.word	0x40020800

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b508      	push	{r3, lr}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  System_Init();
 80012f6:	f7ff fe71 	bl	8000fdc <System_Init>
  PWM_Model_Init();
 80012fa:	f000 fb3d 	bl	8001978 <PWM_Model_Init>
//  System_Start();
  EnableTiming();
 80012fe:	f7ff ffb9 	bl	8001274 <EnableTiming>
  *DWT_CYCCNT = 0;
 8001302:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <main+0x2c>)
 8001304:	4c07      	ldr	r4, [pc, #28]	@ (8001324 <main+0x30>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2500      	movs	r5, #0
 800130a:	601d      	str	r5, [r3, #0]
//  TIM1->CCR1= 84000/4;
//  TIM1->CCR2= 4000;
//  TIM1->CCR3=0;
  PWM_Generate();
 800130c:	f000 f980 	bl	8001610 <PWM_Generate>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//i++;
//HAL_Delay(500);
	  if(start_adc){
 8001310:	7823      	ldrb	r3, [r4, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0fc      	beq.n	8001310 <main+0x1c>
		  start_adc=false;
 8001316:	7025      	strb	r5, [r4, #0]
		  ADC_Start();
 8001318:	f7ff fde4 	bl	8000ee4 <ADC_Start>
 800131c:	e7f8      	b.n	8001310 <main+0x1c>
 800131e:	bf00      	nop
 8001320:	20000014 	.word	0x20000014
 8001324:	200001d8 	.word	0x200001d8

08001328 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <HAL_MspInit+0x34>)
 800132c:	2100      	movs	r1, #0
 800132e:	9100      	str	r1, [sp, #0]
 8001330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001332:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001336:	645a      	str	r2, [r3, #68]	@ 0x44
 8001338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800133a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	9101      	str	r1, [sp, #4]
 8001344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001346:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	b002      	add	sp, #8
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001360:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <HAL_ADC_MspInit+0x94>)
 8001364:	6802      	ldr	r2, [r0, #0]
{
 8001366:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800136a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001370:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001374:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8001376:	d001      	beq.n	800137c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001378:	b008      	add	sp, #32
 800137a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137c:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8001380:	9400      	str	r4, [sp, #0]
 8001382:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8001384:	4e1c      	ldr	r6, [pc, #112]	@ (80013f8 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001386:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800138a:	645a      	str	r2, [r3, #68]	@ 0x44
 800138c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800138e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001392:	9200      	str	r2, [sp, #0]
 8001394:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	9401      	str	r4, [sp, #4]
 8001398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	631a      	str	r2, [r3, #48]	@ 0x30
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80013a8:	2246      	movs	r2, #70	@ 0x46
 80013aa:	2303      	movs	r3, #3
 80013ac:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	a902      	add	r1, sp, #8
 80013b0:	4812      	ldr	r0, [pc, #72]	@ (80013fc <HAL_ADC_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80013b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f001 f808 	bl	80023cc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80013bc:	4a10      	ldr	r2, [pc, #64]	@ (8001400 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013be:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013c4:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013d2:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d4:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d8:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013dc:	e9c6 4407 	strd	r4, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013e0:	f000 fe4c 	bl	800207c <HAL_DMA_Init>
 80013e4:	b918      	cbnz	r0, 80013ee <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013e6:	63ae      	str	r6, [r5, #56]	@ 0x38
 80013e8:	63b5      	str	r5, [r6, #56]	@ 0x38
}
 80013ea:	b008      	add	sp, #32
 80013ec:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80013ee:	f000 fac5 	bl	800197c <Error_Handler>
 80013f2:	e7f8      	b.n	80013e6 <HAL_ADC_MspInit+0x86>
 80013f4:	40012000 	.word	0x40012000
 80013f8:	2000012c 	.word	0x2000012c
 80013fc:	40020000 	.word	0x40020000
 8001400:	40026410 	.word	0x40026410
 8001404:	00000000 	.word	0x00000000

08001408 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001408:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 800140a:	4a19      	ldr	r2, [pc, #100]	@ (8001470 <HAL_DAC_MspInit+0x68>)
 800140c:	6801      	ldr	r1, [r0, #0]
{
 800140e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8001412:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001418:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800141c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 800141e:	d002      	beq.n	8001426 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001420:	b009      	add	sp, #36	@ 0x24
 8001422:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC_CLK_ENABLE();
 8001426:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 800142e:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
 8001432:	6410      	str	r0, [r2, #64]	@ 0x40
 8001434:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8001436:	f000 5000 	and.w	r0, r0, #536870912	@ 0x20000000
 800143a:	9000      	str	r0, [sp, #0]
 800143c:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <HAL_DAC_MspInit+0x6c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800144c:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 8001468 <HAL_DAC_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001458:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f000 ffb5 	bl	80023cc <HAL_GPIO_Init>
}
 8001462:	b009      	add	sp, #36	@ 0x24
 8001464:	f85d fb04 	ldr.w	pc, [sp], #4
 8001468:	00000020 	.word	0x00000020
 800146c:	00000003 	.word	0x00000003
 8001470:	40007400 	.word	0x40007400
 8001474:	40020000 	.word	0x40020000

08001478 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001478:	b500      	push	{lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(hrtc->Instance==RTC)
 800147a:	4a0f      	ldr	r2, [pc, #60]	@ (80014b8 <HAL_RTC_MspInit+0x40>)
 800147c:	6801      	ldr	r1, [r0, #0]
{
 800147e:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001480:	2300      	movs	r3, #0
  if(hrtc->Instance==RTC)
 8001482:	4291      	cmp	r1, r2
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001484:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if(hrtc->Instance==RTC)
 8001488:	d002      	beq.n	8001490 <HAL_RTC_MspInit+0x18>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800148a:	b005      	add	sp, #20
 800148c:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001490:	2202      	movs	r2, #2
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001492:	f44f 7300 	mov.w	r3, #512	@ 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001496:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001498:	9200      	str	r2, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800149a:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149c:	f001 fb76 	bl	8002b8c <HAL_RCCEx_PeriphCLKConfig>
 80014a0:	b930      	cbnz	r0, 80014b0 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_RTC_MspInit+0x44>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 80014aa:	b005      	add	sp, #20
 80014ac:	f85d fb04 	ldr.w	pc, [sp], #4
      Error_Handler();
 80014b0:	f000 fa64 	bl	800197c <Error_Handler>
 80014b4:	e7f5      	b.n	80014a2 <HAL_RTC_MspInit+0x2a>
 80014b6:	bf00      	nop
 80014b8:	40002800 	.word	0x40002800
 80014bc:	42470000 	.word	0x42470000

080014c0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <HAL_TIM_Base_MspInit+0x50>)
 80014c2:	6802      	ldr	r2, [r0, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d000      	beq.n	80014ca <HAL_TIM_Base_MspInit+0xa>
 80014c8:	4770      	bx	lr
{
 80014ca:	b510      	push	{r4, lr}
 80014cc:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ce:	2400      	movs	r4, #0
 80014d0:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 80014d4:	9401      	str	r4, [sp, #4]
 80014d6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80014d8:	f041 0101 	orr.w	r1, r1, #1
 80014dc:	6459      	str	r1, [r3, #68]	@ 0x44
 80014de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e0:	f003 0301 	and.w	r3, r3, #1
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014e4:	4622      	mov	r2, r4
 80014e6:	4621      	mov	r1, r4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014e8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014ea:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014ee:	f000 fd21 	bl	8001f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014f2:	2019      	movs	r0, #25
 80014f4:	f000 fd5a 	bl	8001fac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80014f8:	4622      	mov	r2, r4
 80014fa:	4621      	mov	r1, r4
 80014fc:	201b      	movs	r0, #27
 80014fe:	f000 fd19 	bl	8001f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001502:	201b      	movs	r0, #27
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001504:	b002      	add	sp, #8
 8001506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800150a:	f000 bd4f 	b.w	8001fac <HAL_NVIC_EnableIRQ>
 800150e:	bf00      	nop
 8001510:	40010000 	.word	0x40010000

08001514 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001514:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <HAL_TIM_MspPostInit+0x78>)
 8001518:	6802      	ldr	r2, [r0, #0]
{
 800151a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	2400      	movs	r4, #0
  if(htim->Instance==TIM1)
 800151e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001524:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001528:	9406      	str	r4, [sp, #24]
  if(htim->Instance==TIM1)
 800152a:	d001      	beq.n	8001530 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800152c:	b009      	add	sp, #36	@ 0x24
 800152e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8001534:	9400      	str	r4, [sp, #0]
 8001536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	4815      	ldr	r0, [pc, #84]	@ (8001590 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	f042 0202 	orr.w	r2, r2, #2
 800153e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001542:	f002 0202 	and.w	r2, r2, #2
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	9401      	str	r4, [sp, #4]
 800154c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800154e:	f042 0210 	orr.w	r2, r2, #16
 8001552:	631a      	str	r2, [r3, #48]	@ 0x30
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800155c:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001560:	2203      	movs	r2, #3
 8001562:	2302      	movs	r3, #2
 8001564:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001568:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800156a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f000 ff2e 	bl	80023cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001570:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001578:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001584:	f000 ff22 	bl	80023cc <HAL_GPIO_Init>
}
 8001588:	b009      	add	sp, #36	@ 0x24
 800158a:	bd30      	pop	{r4, r5, pc}
 800158c:	40010000 	.word	0x40010000
 8001590:	40020400 	.word	0x40020400
 8001594:	40021000 	.word	0x40021000

08001598 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler>
 800159a:	bf00      	nop

0800159c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <HardFault_Handler>
 800159e:	bf00      	nop

080015a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MemManage_Handler>
 80015a2:	bf00      	nop

080015a4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <BusFault_Handler>
 80015a6:	bf00      	nop

080015a8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler>
 80015aa:	bf00      	nop

080015ac <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop

080015b4 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop

080015b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b8:	f000 ba4a 	b.w	8001a50 <HAL_IncTick>

080015bc <TIM1_UP_TIM10_IRQHandler>:
//	TIM1->CCR1 = (uint16_t)pwm/2;
//	pwm=TIM1->CCR2;


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015bc:	4801      	ldr	r0, [pc, #4]	@ (80015c4 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80015be:	f001 bd53 	b.w	8003068 <HAL_TIM_IRQHandler>
 80015c2:	bf00      	nop
 80015c4:	20000190 	.word	0x20000190

080015c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <TIM1_CC_IRQHandler+0x1c>)
 80015cc:	2108      	movs	r1, #8
 80015ce:	f001 f81f 	bl	8002610 <HAL_GPIO_TogglePin>
	set_start_adc (true);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff fe7c 	bl	80012d0 <set_start_adc>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <TIM1_CC_IRQHandler+0x20>)
 80015de:	f001 bd43 	b.w	8003068 <HAL_TIM_IRQHandler>
 80015e2:	bf00      	nop
 80015e4:	40020800 	.word	0x40020800
 80015e8:	20000190 	.word	0x20000190

080015ec <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015ec:	4801      	ldr	r0, [pc, #4]	@ (80015f4 <DMA2_Stream0_IRQHandler+0x8>)
 80015ee:	f000 be17 	b.w	8002220 <HAL_DMA_IRQHandler>
 80015f2:	bf00      	nop
 80015f4:	2000012c 	.word	0x2000012c

080015f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4a03      	ldr	r2, [pc, #12]	@ (8001608 <SystemInit+0x10>)
 80015fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80015fe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001602:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00
 800160c:	00000000 	.word	0x00000000

08001610 <PWM_Generate>:
float IMoy=0;
float pIMoy=0;

float I_ref=0;
float a=1;
void PWM_Generate(void){
 8001610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static int i =0;
	static float sum_error =0;
	If= 0.0373 * buffer_adc[0] - 18.95;
 8001614:	4cba      	ldr	r4, [pc, #744]	@ (8001900 <PWM_Generate+0x2f0>)
//		If= 25.04865*(buffer_adc[1]*3.3/1023) -62.876915;
		float Io=0;
//		Vo= 300*(1.03*(493.34*((buffer_adc[2]*3.3/1023)-1.256)-9)+5.5)/297; our sensor
		Vo=  0.8884*buffer_adc[2] - 457.7;
		float V_error = (30*sin_V_ref2[i]/325.27)-Vo;
 8001616:	f8df 834c 	ldr.w	r8, [pc, #844]	@ 8001964 <PWM_Generate+0x354>
	If= 0.0373 * buffer_adc[0] - 18.95;
 800161a:	8820      	ldrh	r0, [r4, #0]
void PWM_Generate(void){
 800161c:	ed2d 8b06 	vpush	{d8-d10}
	If= 0.0373 * buffer_adc[0] - 18.95;
 8001620:	f7fe ff24 	bl	800046c <__aeabi_i2d>
 8001624:	a3a6      	add	r3, pc, #664	@ (adr r3, 80018c0 <PWM_Generate+0x2b0>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe ff89 	bl	8000540 <__aeabi_dmul>
 800162e:	a3a6      	add	r3, pc, #664	@ (adr r3, 80018c8 <PWM_Generate+0x2b8>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe fdcc 	bl	80001d0 <__aeabi_dsub>
 8001638:	f7ff fa32 	bl	8000aa0 <__aeabi_d2f>
 800163c:	4bb1      	ldr	r3, [pc, #708]	@ (8001904 <PWM_Generate+0x2f4>)
 800163e:	ee08 0a10 	vmov	s16, r0
		Vo=  0.8884*buffer_adc[2] - 457.7;
 8001642:	88a0      	ldrh	r0, [r4, #4]
	If= 0.0373 * buffer_adc[0] - 18.95;
 8001644:	ed83 8a00 	vstr	s16, [r3]
		Vo=  0.8884*buffer_adc[2] - 457.7;
 8001648:	f7fe ff10 	bl	800046c <__aeabi_i2d>
 800164c:	a3a0      	add	r3, pc, #640	@ (adr r3, 80018d0 <PWM_Generate+0x2c0>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe ff75 	bl	8000540 <__aeabi_dmul>
 8001656:	a3a0      	add	r3, pc, #640	@ (adr r3, 80018d8 <PWM_Generate+0x2c8>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7fe fdb8 	bl	80001d0 <__aeabi_dsub>
 8001660:	f7ff fa1e 	bl	8000aa0 <__aeabi_d2f>
 8001664:	4ba8      	ldr	r3, [pc, #672]	@ (8001908 <PWM_Generate+0x2f8>)
		float V_error = (30*sin_V_ref2[i]/325.27)-Vo;
 8001666:	f8d8 9000 	ldr.w	r9, [r8]
		Vo=  0.8884*buffer_adc[2] - 457.7;
 800166a:	6018      	str	r0, [r3, #0]
 800166c:	ee08 0a90 	vmov	s17, r0
		float V_error = (30*sin_V_ref2[i]/325.27)-Vo;
 8001670:	f7fe ff0e 	bl	8000490 <__aeabi_f2d>
 8001674:	4ba5      	ldr	r3, [pc, #660]	@ (800190c <PWM_Generate+0x2fc>)
 8001676:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800167a:	ed93 7a00 	vldr	s14, [r3]
 800167e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001686:	4604      	mov	r4, r0
 8001688:	ee17 0a90 	vmov	r0, s15
 800168c:	460d      	mov	r5, r1
 800168e:	f7fe feff 	bl	8000490 <__aeabi_f2d>
 8001692:	a393      	add	r3, pc, #588	@ (adr r3, 80018e0 <PWM_Generate+0x2d0>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff f87c 	bl	8000794 <__aeabi_ddiv>
 800169c:	4622      	mov	r2, r4
 800169e:	462b      	mov	r3, r5
 80016a0:	f7fe fd96 	bl	80001d0 <__aeabi_dsub>
 80016a4:	f7ff f9fc 	bl	8000aa0 <__aeabi_d2f>
		sum_error +=V_error;
 80016a8:	4b99      	ldr	r3, [pc, #612]	@ (8001910 <PWM_Generate+0x300>)
		float V_error = (30*sin_V_ref2[i]/325.27)-Vo;
 80016aa:	ee09 0a10 	vmov	s18, r0
		sum_error +=V_error;
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	ee39 9a27 	vadd.f32	s18, s18, s15
 80016b6:	ed83 9a00 	vstr	s18, [r3]
		float I_ref = Io + kP_E*V_error + kI_E*TS*sum_error;
 80016ba:	f7fe fee9 	bl	8000490 <__aeabi_f2d>
 80016be:	a38a      	add	r3, pc, #552	@ (adr r3, 80018e8 <PWM_Generate+0x2d8>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff3c 	bl	8000540 <__aeabi_dmul>
 80016c8:	2200      	movs	r2, #0
 80016ca:	2300      	movs	r3, #0
 80016cc:	f7fe fd82 	bl	80001d4 <__adddf3>
 80016d0:	4606      	mov	r6, r0
 80016d2:	ee19 0a10 	vmov	r0, s18
 80016d6:	460f      	mov	r7, r1
 80016d8:	f7fe feda 	bl	8000490 <__aeabi_f2d>
 80016dc:	a384      	add	r3, pc, #528	@ (adr r3, 80018f0 <PWM_Generate+0x2e0>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe ff2d 	bl	8000540 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4630      	mov	r0, r6
 80016ec:	4639      	mov	r1, r7
 80016ee:	f7fe fd71 	bl	80001d4 <__adddf3>
 80016f2:	f7ff f9d5 	bl	8000aa0 <__aeabi_d2f>
 80016f6:	ee07 0a90 	vmov	s15, r0

//		I_ref = a*sin_V_ref2[i]/325;
		V_ref =(Vo + kP_I*(I_ref - If));
 80016fa:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f7fe fec5 	bl	8000490 <__aeabi_f2d>
 8001706:	a37c      	add	r3, pc, #496	@ (adr r3, 80018f8 <PWM_Generate+0x2e8>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe ff18 	bl	8000540 <__aeabi_dmul>
 8001710:	4622      	mov	r2, r4
 8001712:	462b      	mov	r3, r5
 8001714:	f7fe fd5e 	bl	80001d4 <__adddf3>
 8001718:	f7ff f9c2 	bl	8000aa0 <__aeabi_d2f>
		int16_t duty_cycle = V_ref*(PWM_TIM_period)/V_IN;
 800171c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8001914 <PWM_Generate+0x304>
 8001720:	ed9f 6a7d 	vldr	s12, [pc, #500]	@ 8001918 <PWM_Generate+0x308>
		V_ref =(Vo + kP_I*(I_ref - If));
 8001724:	4b7d      	ldr	r3, [pc, #500]	@ (800191c <PWM_Generate+0x30c>)
//		DAC_SetVoltage(1.65+sin_V_ref2[i]/325.27);
//		int16_t duty_cycle = (PWM_TIM_period)*sin_V_ref2[i]/400;
//		int16_t duty_cycle = pwm;
		if(duty_cycle>0){
//			TIM1->CCR1= TIM1->CCR2>>1;
			TIM1->CCR2= duty_cycle;
 8001726:	4a7e      	ldr	r2, [pc, #504]	@ (8001920 <PWM_Generate+0x310>)
		V_ref =(Vo + kP_I*(I_ref - If));
 8001728:	6018      	str	r0, [r3, #0]
 800172a:	ee07 0a10 	vmov	s14, r0
		int16_t duty_cycle = V_ref*(PWM_TIM_period)/V_IN;
 800172e:	ee67 6a26 	vmul.f32	s13, s14, s13
			TIM1->CCR3= 0;
 8001732:	2100      	movs	r1, #0
		int16_t duty_cycle = V_ref*(PWM_TIM_period)/V_IN;
 8001734:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173c:	ee17 3a90 	vmov	r3, s15
 8001740:	b21b      	sxth	r3, r3
		if(duty_cycle>0){
 8001742:	2b00      	cmp	r3, #0
 8001744:	dd63      	ble.n	800180e <PWM_Generate+0x1fe>
			TIM1->CCR2= duty_cycle;
 8001746:	6393      	str	r3, [r2, #56]	@ 0x38
			TIM1->CCR3= 0;
 8001748:	63d1      	str	r1, [r2, #60]	@ 0x3c
		else{
//			TIM1->CCR1= TIM1->CCR3>>1;
			TIM1->CCR2= 0;
			TIM1->CCR3= -duty_cycle;
		}
		i=(i+1)%400;
 800174a:	4876      	ldr	r0, [pc, #472]	@ (8001924 <PWM_Generate+0x314>)
//		pwm=duty_cycle;

		vRms=vRms+Vo*Vo;
 800174c:	4f76      	ldr	r7, [pc, #472]	@ (8001928 <PWM_Generate+0x318>)
		vMoy+=Vo;


		IRms=IRms+If*If;
 800174e:	4d77      	ldr	r5, [pc, #476]	@ (800192c <PWM_Generate+0x31c>)

		if(IMax<If)
		{
			IMax=If;
		}
		if(IMax2>If)
 8001750:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8001968 <PWM_Generate+0x358>
		vRms=vRms+Vo*Vo;
 8001754:	edd7 7a00 	vldr	s15, [r7]
		vMoy+=Vo;
 8001758:	f8df a210 	ldr.w	sl, [pc, #528]	@ 800196c <PWM_Generate+0x35c>
		IRms=IRms+If*If;
 800175c:	edd5 9a00 	vldr	s19, [r5]
		IMoy+=If;
 8001760:	4e73      	ldr	r6, [pc, #460]	@ (8001930 <PWM_Generate+0x320>)
		iRms++;
 8001762:	4c74      	ldr	r4, [pc, #464]	@ (8001934 <PWM_Generate+0x324>)
		vMoy+=Vo;
 8001764:	ed9a aa00 	vldr	s20, [sl]
		IMoy+=If;
 8001768:	ed96 9a00 	vldr	s18, [r6]
		i=(i+1)%400;
 800176c:	f109 0301 	add.w	r3, r9, #1
 8001770:	fb80 2003 	smull	r2, r0, r0, r3
 8001774:	17d9      	asrs	r1, r3, #31
 8001776:	ebc1 11e0 	rsb	r1, r1, r0, asr #7
		if(vMax<Vo)
 800177a:	f8df 91f4 	ldr.w	r9, [pc, #500]	@ 8001970 <PWM_Generate+0x360>
		iRms++;
 800177e:	6822      	ldr	r2, [r4, #0]
		if(vMax<Vo)
 8001780:	ed99 7a00 	vldr	s14, [r9]
		i=(i+1)%400;
 8001784:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001788:	fb00 3311 	mls	r3, r0, r1, r3
 800178c:	f8c8 3000 	str.w	r3, [r8]
		if(vMax2>Vo)
 8001790:	4b69      	ldr	r3, [pc, #420]	@ (8001938 <PWM_Generate+0x328>)
		if(IMax<If)
 8001792:	f8df 81e0 	ldr.w	r8, [pc, #480]	@ 8001974 <PWM_Generate+0x364>
		if(vMax<Vo)
 8001796:	eef4 8ac7 	vcmpe.f32	s17, s14
		if(vMax2>Vo)
 800179a:	ed93 7a00 	vldr	s14, [r3]
		if(vMax<Vo)
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(vMax2>Vo)
 80017a2:	eef4 8ac7 	vcmpe.f32	s17, s14
		if(IMax<If)
 80017a6:	ed98 7a00 	vldr	s14, [r8]
			vMax=Vo;
 80017aa:	bfc8      	it	gt
 80017ac:	edc9 8a00 	vstrgt	s17, [r9]
		if(vMax2>Vo)
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(IMax<If)
 80017b4:	eeb4 8ac7 	vcmpe.f32	s16, s14
		if(IMax2>If)
 80017b8:	ed9b 7a00 	vldr	s14, [fp]
			vMax2=Vo;
 80017bc:	bf48      	it	mi
 80017be:	edc3 8a00 	vstrmi	s17, [r3]
		vRms=vRms+Vo*Vo;
 80017c2:	eee8 7aa8 	vfma.f32	s15, s17, s17
		iRms++;
 80017c6:	3201      	adds	r2, #1
			{
			IMax2=If;
			}

		if(iRms==399){
 80017c8:	f240 118f 	movw	r1, #399	@ 0x18f
		IRms=IRms+If*If;
 80017cc:	eee8 9a08 	vfma.f32	s19, s16, s16
		iRms++;
 80017d0:	6022      	str	r2, [r4, #0]
		if(IMax<If)
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(IMax2>If)
 80017d6:	eeb4 8ac7 	vcmpe.f32	s16, s14
		vMoy+=Vo;
 80017da:	ee38 aa8a 	vadd.f32	s20, s17, s20
		IMoy+=If;
 80017de:	ee38 9a09 	vadd.f32	s18, s16, s18
			IMax=If;
 80017e2:	bfc8      	it	gt
 80017e4:	ed88 8a00 	vstrgt	s16, [r8]
		if(IMax2>If)
 80017e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			IMax2=If;
 80017ec:	bf48      	it	mi
 80017ee:	ed8b 8a00 	vstrmi	s16, [fp]
		if(iRms==399){
 80017f2:	428a      	cmp	r2, r1
		vRms=vRms+Vo*Vo;
 80017f4:	edc7 7a00 	vstr	s15, [r7]
		vMoy+=Vo;
 80017f8:	ed8a aa00 	vstr	s20, [sl]
		IRms=IRms+If*If;
 80017fc:	edc5 9a00 	vstr	s19, [r5]
		IMoy+=If;
 8001800:	ed86 9a00 	vstr	s18, [r6]
		if(iRms==399){
 8001804:	d007      	beq.n	8001816 <PWM_Generate+0x206>
		}
//	data = Start_Data_Conversion();
//	float V_ref = calculate_PID_V_ref(data.If,data.Io,data.Vo);
//	float duty_cycle = calculate_Duty_Cycle(V_ref);
//	PWM_Genearte_GPIO(duty_cycle);
}
 8001806:	ecbd 8b06 	vpop	{d8-d10}
 800180a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			TIM1->CCR3= -duty_cycle;
 800180e:	425b      	negs	r3, r3
			TIM1->CCR2= 0;
 8001810:	6391      	str	r1, [r2, #56]	@ 0x38
			TIM1->CCR3= -duty_cycle;
 8001812:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001814:	e799      	b.n	800174a <PWM_Generate+0x13a>
			pvRms=sqrt(vRms/iRms);
 8001816:	eddf 8a49 	vldr	s17, [pc, #292]	@ 800193c <PWM_Generate+0x32c>
			vMax=0;
 800181a:	ed9f 8a49 	vldr	s16, [pc, #292]	@ 8001940 <PWM_Generate+0x330>
			pvRms=sqrt(vRms/iRms);
 800181e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
 8001822:	ee17 0a90 	vmov	r0, s15
 8001826:	f7fe fe33 	bl	8000490 <__aeabi_f2d>
 800182a:	ec41 0b10 	vmov	d0, r0, r1
 800182e:	f001 ff0d 	bl	800364c <sqrt>
 8001832:	ec51 0b10 	vmov	r0, r1, d0
 8001836:	f7ff f933 	bl	8000aa0 <__aeabi_d2f>
			pvMoy=vMoy/iRms;
 800183a:	eeca 7a28 	vdiv.f32	s15, s20, s17
			pMax2=vMax2;
 800183e:	4b3e      	ldr	r3, [pc, #248]	@ (8001938 <PWM_Generate+0x328>)
			pMax=vMax;
 8001840:	f8d9 2000 	ldr.w	r2, [r9]
			pMax2=vMax2;
 8001844:	6819      	ldr	r1, [r3, #0]
			vMax2=0;
 8001846:	ed83 8a00 	vstr	s16, [r3]
			pvRms=sqrt(vRms/iRms);
 800184a:	4b3e      	ldr	r3, [pc, #248]	@ (8001944 <PWM_Generate+0x334>)
			vMoy=0;
 800184c:	ed8a 8a00 	vstr	s16, [sl]
			pvRms=sqrt(vRms/iRms);
 8001850:	6018      	str	r0, [r3, #0]
			pvMoy=vMoy/iRms;
 8001852:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <PWM_Generate+0x338>)
			vRms=0;
 8001854:	ed87 8a00 	vstr	s16, [r7]
			pvMoy=vMoy/iRms;
 8001858:	edc3 7a00 	vstr	s15, [r3]
			pIRms=sqrt(IRms/iRms);
 800185c:	eec9 7aa8 	vdiv.f32	s15, s19, s17
			pMax2=vMax2;
 8001860:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <PWM_Generate+0x33c>)
 8001862:	6019      	str	r1, [r3, #0]
			pMax=vMax;
 8001864:	4b3a      	ldr	r3, [pc, #232]	@ (8001950 <PWM_Generate+0x340>)
 8001866:	601a      	str	r2, [r3, #0]
			vMax=0;
 8001868:	ed89 8a00 	vstr	s16, [r9]
			pIRms=sqrt(IRms/iRms);
 800186c:	ee17 0a90 	vmov	r0, s15
 8001870:	f7fe fe0e 	bl	8000490 <__aeabi_f2d>
 8001874:	ec41 0b10 	vmov	d0, r0, r1
 8001878:	f001 fee8 	bl	800364c <sqrt>
 800187c:	ec51 0b10 	vmov	r0, r1, d0
 8001880:	f7ff f90e 	bl	8000aa0 <__aeabi_d2f>
						pIMoy=IMoy/iRms;
 8001884:	eec9 7a28 	vdiv.f32	s15, s18, s17
						IpMax=IMax;
 8001888:	f8d8 1000 	ldr.w	r1, [r8]
 800188c:	4a31      	ldr	r2, [pc, #196]	@ (8001954 <PWM_Generate+0x344>)
						iRms=0;
 800188e:	2300      	movs	r3, #0
 8001890:	6023      	str	r3, [r4, #0]
			pIRms=sqrt(IRms/iRms);
 8001892:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <PWM_Generate+0x348>)
						IpMax=IMax;
 8001894:	6011      	str	r1, [r2, #0]
			pIRms=sqrt(IRms/iRms);
 8001896:	6018      	str	r0, [r3, #0]
						pIMoy=IMoy/iRms;
 8001898:	4b30      	ldr	r3, [pc, #192]	@ (800195c <PWM_Generate+0x34c>)
						IpMax2=IMax2;
 800189a:	4831      	ldr	r0, [pc, #196]	@ (8001960 <PWM_Generate+0x350>)
						IRms=0;
 800189c:	ed85 8a00 	vstr	s16, [r5]
						IMoy=0;
 80018a0:	ed86 8a00 	vstr	s16, [r6]
						IpMax2=IMax2;
 80018a4:	f8db 5000 	ldr.w	r5, [fp]
						IMax=0;
 80018a8:	ed88 8a00 	vstr	s16, [r8]
						IMax2=0;
 80018ac:	ed8b 8a00 	vstr	s16, [fp]
}
 80018b0:	ecbd 8b06 	vpop	{d8-d10}
						IpMax2=IMax2;
 80018b4:	6005      	str	r5, [r0, #0]
						pIMoy=IMoy/iRms;
 80018b6:	edc3 7a00 	vstr	s15, [r3]
}
 80018ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018be:	bf00      	nop
 80018c0:	504816f0 	.word	0x504816f0
 80018c4:	3fa318fc 	.word	0x3fa318fc
 80018c8:	33333333 	.word	0x33333333
 80018cc:	4032f333 	.word	0x4032f333
 80018d0:	d6388659 	.word	0xd6388659
 80018d4:	3fec6dc5 	.word	0x3fec6dc5
 80018d8:	33333333 	.word	0x33333333
 80018dc:	407c9b33 	.word	0x407c9b33
 80018e0:	eb851eb8 	.word	0xeb851eb8
 80018e4:	40745451 	.word	0x40745451
 80018e8:	02de00d2 	.word	0x02de00d2
 80018ec:	3fc78a09 	.word	0x3fc78a09
 80018f0:	6146eccf 	.word	0x6146eccf
 80018f4:	3f82d40f 	.word	0x3f82d40f
 80018f8:	f765fd8b 	.word	0xf765fd8b
 80018fc:	401921e4 	.word	0x401921e4
 8001900:	200000f0 	.word	0x200000f0
 8001904:	2000022c 	.word	0x2000022c
 8001908:	20000228 	.word	0x20000228
 800190c:	08003880 	.word	0x08003880
 8001910:	200001dc 	.word	0x200001dc
 8001914:	46033c00 	.word	0x46033c00
 8001918:	42700000 	.word	0x42700000
 800191c:	20000230 	.word	0x20000230
 8001920:	40010000 	.word	0x40010000
 8001924:	51eb851f 	.word	0x51eb851f
 8001928:	20000214 	.word	0x20000214
 800192c:	200001f0 	.word	0x200001f0
 8001930:	200001e8 	.word	0x200001e8
 8001934:	20000210 	.word	0x20000210
 8001938:	20000220 	.word	0x20000220
 800193c:	43c78000 	.word	0x43c78000
 8001940:	00000000 	.word	0x00000000
 8001944:	2000020c 	.word	0x2000020c
 8001948:	20000204 	.word	0x20000204
 800194c:	20000218 	.word	0x20000218
 8001950:	2000021c 	.word	0x2000021c
 8001954:	200001f8 	.word	0x200001f8
 8001958:	200001ec 	.word	0x200001ec
 800195c:	200001e4 	.word	0x200001e4
 8001960:	200001f4 	.word	0x200001f4
 8001964:	200001e0 	.word	0x200001e0
 8001968:	200001fc 	.word	0x200001fc
 800196c:	20000208 	.word	0x20000208
 8001970:	20000224 	.word	0x20000224
 8001974:	20000200 	.word	0x20000200

08001978 <PWM_Model_Init>:

void PWM_Model_Init(void){
	init_pid_controller();
 8001978:	f7ff bc7a 	b.w	8001270 <init_pid_controller>

0800197c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800197c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800197e:	e7fe      	b.n	800197e <Error_Handler+0x2>

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001984:	480d      	ldr	r0, [pc, #52]	@ (80019bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001986:	490e      	ldr	r1, [pc, #56]	@ (80019c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001988:	4a0e      	ldr	r2, [pc, #56]	@ (80019c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	@ (80019c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800199c:	4c0b      	ldr	r4, [pc, #44]	@ (80019cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019aa:	f7ff fe25 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f001 fe29 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fc9f 	bl	80012f4 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80019c4:	08003ed8 	.word	0x08003ed8
  ldr r2, =_sbss
 80019c8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80019cc:	20000370 	.word	0x20000370

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>
	...

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a10 <HAL_InitTick+0x3c>)
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <HAL_InitTick+0x40>)
 80019da:	7812      	ldrb	r2, [r2, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
{
 80019de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e4:	fbb0 f0f2 	udiv	r0, r0, r2
 80019e8:	fbb3 f0f0 	udiv	r0, r3, r0
 80019ec:	f000 faec 	bl	8001fc8 <HAL_SYSTICK_Config>
 80019f0:	b908      	cbnz	r0, 80019f6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	2d0f      	cmp	r5, #15
 80019f4:	d901      	bls.n	80019fa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80019f6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019f8:	bd38      	pop	{r3, r4, r5, pc}
 80019fa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	4602      	mov	r2, r0
 80019fe:	4629      	mov	r1, r5
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 fa96 	bl	8001f34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4b03      	ldr	r3, [pc, #12]	@ (8001a18 <HAL_InitTick+0x44>)
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	601d      	str	r5, [r3, #0]
}
 8001a0e:	bd38      	pop	{r3, r4, r5, pc}
 8001a10:	2000001c 	.word	0x2000001c
 8001a14:	20000018 	.word	0x20000018
 8001a18:	20000020 	.word	0x20000020

08001a1c <HAL_Init>:
{
 8001a1c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_Init+0x30>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a2e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a36:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 fa69 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f7ff ffc8 	bl	80019d4 <HAL_InitTick>
  HAL_MspInit();
 8001a44:	f7ff fc70 	bl	8001328 <HAL_MspInit>
}
 8001a48:	2000      	movs	r0, #0
 8001a4a:	bd08      	pop	{r3, pc}
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a50:	4a03      	ldr	r2, [pc, #12]	@ (8001a60 <HAL_IncTick+0x10>)
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <HAL_IncTick+0x14>)
 8001a54:	6811      	ldr	r1, [r2, #0]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	440b      	add	r3, r1
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000234 	.word	0x20000234
 8001a64:	2000001c 	.word	0x2000001c

08001a68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a68:	4b01      	ldr	r3, [pc, #4]	@ (8001a70 <HAL_GetTick+0x8>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000234 	.word	0x20000234

08001a74 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a74:	2800      	cmp	r0, #0
 8001a76:	f000 809e 	beq.w	8001bb6 <HAL_ADC_Init+0x142>
{
 8001a7a:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a7c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001a7e:	4604      	mov	r4, r0
 8001a80:	b13d      	cbz	r5, 8001a92 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a84:	06db      	lsls	r3, r3, #27
 8001a86:	d50c      	bpl.n	8001aa2 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8001a90:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001a92:	f7ff fc65 	bl	8001360 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001a96:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001a9a:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a9e:	06db      	lsls	r3, r3, #27
 8001aa0:	d4f2      	bmi.n	8001a88 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001aa4:	4a47      	ldr	r2, [pc, #284]	@ (8001bc4 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ab4:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ab6:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ab8:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8001abc:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001abe:	6851      	ldr	r1, [r2, #4]
 8001ac0:	6860      	ldr	r0, [r4, #4]
 8001ac2:	4301      	orrs	r1, r0
 8001ac4:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ac6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ac8:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aca:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ada:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001adc:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ade:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ae2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aea:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	4302      	orrs	r2, r0
 8001af8:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001afa:	4a33      	ldr	r2, [pc, #204]	@ (8001bc8 <HAL_ADC_Init+0x154>)
 8001afc:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001afe:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b00:	d051      	beq.n	8001ba6 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b02:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b06:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4311      	orrs	r1, r2
 8001b0e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	4302      	orrs	r2, r0
 8001b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	f022 0202 	bic.w	r2, r2, #2
 8001b24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	7e21      	ldrb	r1, [r4, #24]
 8001b2a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001b2e:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b30:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001b34:	2a00      	cmp	r2, #0
 8001b36:	d040      	beq.n	8001bba <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b38:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b3a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b40:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b48:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	3901      	subs	r1, #1
 8001b4e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b52:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b56:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b58:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b60:	3901      	subs	r1, #1
 8001b62:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b68:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b6a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8001b78:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8001b7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b86:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001b88:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b8a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001b8e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001b90:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001b92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b94:	f023 0303 	bic.w	r3, r3, #3
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001ba4:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001baa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	e7b3      	b.n	8001b1e <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8001bb6:	2001      	movs	r0, #1
}
 8001bb8:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	e7c7      	b.n	8001b54 <HAL_ADC_Init+0xe0>
 8001bc4:	40012300 	.word	0x40012300
 8001bc8:	0f000001 	.word	0x0f000001

08001bcc <HAL_ADC_Start_DMA>:
{
 8001bcc:	b570      	push	{r4, r5, r6, lr}
 8001bce:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001bd0:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
{
 8001bd4:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001bd6:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001bd8:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0U;
 8001bda:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001bdc:	f000 808d 	beq.w	8001cfa <HAL_ADC_Start_DMA+0x12e>
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001be0:	682e      	ldr	r6, [r5, #0]
 8001be2:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8001be4:	2201      	movs	r2, #1
 8001be6:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bea:	68b2      	ldr	r2, [r6, #8]
 8001bec:	07d4      	lsls	r4, r2, #31
 8001bee:	d414      	bmi.n	8001c1a <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8001bf0:	68b2      	ldr	r2, [r6, #8]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf8:	4a43      	ldr	r2, [pc, #268]	@ (8001d08 <HAL_ADC_Start_DMA+0x13c>)
 8001bfa:	6810      	ldr	r0, [r2, #0]
 8001bfc:	4a43      	ldr	r2, [pc, #268]	@ (8001d0c <HAL_ADC_Start_DMA+0x140>)
 8001bfe:	fba2 2000 	umull	r2, r0, r2, r0
 8001c02:	0c80      	lsrs	r0, r0, #18
 8001c04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001c08:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8001c0a:	9a01      	ldr	r2, [sp, #4]
 8001c0c:	b12a      	cbz	r2, 8001c1a <HAL_ADC_Start_DMA+0x4e>
      counter--;
 8001c0e:	9c01      	ldr	r4, [sp, #4]
 8001c10:	3c01      	subs	r4, #1
 8001c12:	9401      	str	r4, [sp, #4]
    while (counter != 0U)
 8001c14:	9801      	ldr	r0, [sp, #4]
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d1f9      	bne.n	8001c0e <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c1a:	68b2      	ldr	r2, [r6, #8]
 8001c1c:	05d0      	lsls	r0, r2, #23
 8001c1e:	d503      	bpl.n	8001c28 <HAL_ADC_Start_DMA+0x5c>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c20:	68b2      	ldr	r2, [r6, #8]
 8001c22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c26:	60b2      	str	r2, [r6, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c28:	68b2      	ldr	r2, [r6, #8]
 8001c2a:	07d2      	lsls	r2, r2, #31
 8001c2c:	d54d      	bpl.n	8001cca <HAL_ADC_Start_DMA+0xfe>
    ADC_STATE_CLR_SET(hadc->State,
 8001c2e:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 8001c30:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8001c34:	f020 0001 	bic.w	r0, r0, #1
 8001c38:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8001c3c:	6428      	str	r0, [r5, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c3e:	6872      	ldr	r2, [r6, #4]
 8001c40:	0554      	lsls	r4, r2, #21
 8001c42:	d505      	bpl.n	8001c50 <HAL_ADC_Start_DMA+0x84>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c44:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001c46:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8001c4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001c4e:	642a      	str	r2, [r5, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c50:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c52:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c58:	bf1c      	itt	ne
 8001c5a:	6c6a      	ldrne	r2, [r5, #68]	@ 0x44
 8001c5c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001c60:	646a      	str	r2, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c68:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c6a:	4929      	ldr	r1, [pc, #164]	@ (8001d10 <HAL_ADC_Start_DMA+0x144>)
 8001c6c:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c6e:	4929      	ldr	r1, [pc, #164]	@ (8001d14 <HAL_ADC_Start_DMA+0x148>)
 8001c70:	6401      	str	r1, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c72:	4929      	ldr	r1, [pc, #164]	@ (8001d18 <HAL_ADC_Start_DMA+0x14c>)
 8001c74:	64c1      	str	r1, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c76:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 8001c7a:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c7c:	6871      	ldr	r1, [r6, #4]
 8001c7e:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8001c82:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c84:	68b1      	ldr	r1, [r6, #8]
 8001c86:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001c8a:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c8c:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 8001c90:	f000 fa8a 	bl	80021a8 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c94:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <HAL_ADC_Start_DMA+0x150>)
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	06d0      	lsls	r0, r2, #27
 8001c9a:	d121      	bne.n	8001ce0 <HAL_ADC_Start_DMA+0x114>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c9c:	682a      	ldr	r2, [r5, #0]
 8001c9e:	4920      	ldr	r1, [pc, #128]	@ (8001d20 <HAL_ADC_Start_DMA+0x154>)
 8001ca0:	428a      	cmp	r2, r1
 8001ca2:	d009      	beq.n	8001cb8 <HAL_ADC_Start_DMA+0xec>
 8001ca4:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8001ca8:	428a      	cmp	r2, r1
 8001caa:	d029      	beq.n	8001d00 <HAL_ADC_Start_DMA+0x134>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cac:	491d      	ldr	r1, [pc, #116]	@ (8001d24 <HAL_ADC_Start_DMA+0x158>)
 8001cae:	428a      	cmp	r2, r1
 8001cb0:	d113      	bne.n	8001cda <HAL_ADC_Start_DMA+0x10e>
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	06db      	lsls	r3, r3, #27
 8001cb6:	d410      	bmi.n	8001cda <HAL_ADC_Start_DMA+0x10e>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001cb8:	6893      	ldr	r3, [r2, #8]
 8001cba:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
 8001cbe:	d10c      	bne.n	8001cda <HAL_ADC_Start_DMA+0x10e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cc0:	6893      	ldr	r3, [r2, #8]
 8001cc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cc6:	6093      	str	r3, [r2, #8]
 8001cc8:	e007      	b.n	8001cda <HAL_ADC_Start_DMA+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cca:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	642b      	str	r3, [r5, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	646b      	str	r3, [r5, #68]	@ 0x44
  return HAL_OK;
 8001cda:	2000      	movs	r0, #0
}
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd70      	pop	{r4, r5, r6, pc}
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d20 <HAL_ADC_Start_DMA+0x154>)
 8001ce2:	682b      	ldr	r3, [r5, #0]
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d1f8      	bne.n	8001cda <HAL_ADC_Start_DMA+0x10e>
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001cee:	d1f4      	bne.n	8001cda <HAL_ADC_Start_DMA+0x10e>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	e7ef      	b.n	8001cda <HAL_ADC_Start_DMA+0x10e>
  __HAL_LOCK(hadc);
 8001cfa:	2002      	movs	r0, #2
}
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	06d9      	lsls	r1, r3, #27
 8001d04:	d0d8      	beq.n	8001cb8 <HAL_ADC_Start_DMA+0xec>
 8001d06:	e7e8      	b.n	8001cda <HAL_ADC_Start_DMA+0x10e>
 8001d08:	20000018 	.word	0x20000018
 8001d0c:	431bde83 	.word	0x431bde83
 8001d10:	08001d55 	.word	0x08001d55
 8001d14:	08001d2d 	.word	0x08001d2d
 8001d18:	08001d3d 	.word	0x08001d3d
 8001d1c:	40012300 	.word	0x40012300
 8001d20:	40012000 	.word	0x40012000
 8001d24:	40012200 	.word	0x40012200

08001d28 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop

08001d2c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d2e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001d30:	f7ff fffa 	bl	8001d28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d34:	bd08      	pop	{r3, pc}
 8001d36:	bf00      	nop

08001d38 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop

08001d3c <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d3c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001d3e:	b508      	push	{r3, lr}
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001d40:	2340      	movs	r3, #64	@ 0x40
 8001d42:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d44:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d4c:	f7ff fff4 	bl	8001d38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d50:	bd08      	pop	{r3, pc}
 8001d52:	bf00      	nop

08001d54 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d54:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d58:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8001d5c:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d60:	d123      	bne.n	8001daa <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d66:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d68:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d6a:	688a      	ldr	r2, [r1, #8]
 8001d6c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001d70:	d117      	bne.n	8001da2 <ADC_DMAConvCplt+0x4e>
 8001d72:	7e1a      	ldrb	r2, [r3, #24]
 8001d74:	b9aa      	cbnz	r2, 8001da2 <ADC_DMAConvCplt+0x4e>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d76:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d78:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001d7c:	d002      	beq.n	8001d84 <ADC_DMAConvCplt+0x30>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d7e:	688a      	ldr	r2, [r1, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d80:	0550      	lsls	r0, r2, #21
 8001d82:	d40e      	bmi.n	8001da2 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d84:	684a      	ldr	r2, [r1, #4]
 8001d86:	f022 0220 	bic.w	r2, r2, #32
 8001d8a:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d92:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d96:	04d1      	lsls	r1, r2, #19
 8001d98:	d403      	bmi.n	8001da2 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fa9a 	bl	80012dc <HAL_ADC_ConvCpltCallback>
}
 8001da8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001daa:	06d2      	lsls	r2, r2, #27
 8001dac:	d404      	bmi.n	8001db8 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ffbd 	bl	8001d38 <HAL_ADC_ErrorCallback>
}
 8001dbe:	bd10      	pop	{r4, pc}

08001dc0 <HAL_ADC_ConfigChannel>:
{
 8001dc0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001dc2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8001dca:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001dd2:	f000 8093 	beq.w	8001efc <HAL_ADC_ConfigChannel+0x13c>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ddc:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dde:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001de0:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001de2:	2d09      	cmp	r5, #9
 8001de4:	b2a8      	uxth	r0, r5
 8001de6:	d828      	bhi.n	8001e3a <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001de8:	691e      	ldr	r6, [r3, #16]
 8001dea:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8001dee:	f04f 0c07 	mov.w	ip, #7
 8001df2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001df6:	ea26 060c 	bic.w	r6, r6, ip
 8001dfa:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dfc:	691e      	ldr	r6, [r3, #16]
 8001dfe:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e02:	4334      	orrs	r4, r6
 8001e04:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 8001e06:	684c      	ldr	r4, [r1, #4]
 8001e08:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e0a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8001e0e:	d82a      	bhi.n	8001e66 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e10:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8001e12:	3905      	subs	r1, #5
 8001e14:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e18:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e1a:	fa0c f101 	lsl.w	r1, ip, r1
 8001e1e:	ea24 0101 	bic.w	r1, r4, r1
 8001e22:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e26:	4308      	orrs	r0, r1
 8001e28:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e2a:	4936      	ldr	r1, [pc, #216]	@ (8001f04 <HAL_ADC_ConfigChannel+0x144>)
 8001e2c:	428b      	cmp	r3, r1
 8001e2e:	d02b      	beq.n	8001e88 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 8001e36:	b002      	add	sp, #8
 8001e38:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e3a:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8001e3e:	68de      	ldr	r6, [r3, #12]
 8001e40:	f1ac 0c1e 	sub.w	ip, ip, #30
 8001e44:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e48:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e4c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001e50:	ea26 060c 	bic.w	r6, r6, ip
 8001e54:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e56:	68de      	ldr	r6, [r3, #12]
 8001e58:	4334      	orrs	r4, r6
 8001e5a:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 8001e5c:	684c      	ldr	r4, [r1, #4]
 8001e5e:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e60:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8001e64:	d9d4      	bls.n	8001e10 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001e66:	2c0c      	cmp	r4, #12
 8001e68:	d834      	bhi.n	8001ed4 <HAL_ADC_ConfigChannel+0x114>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e6a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001e6c:	3923      	subs	r1, #35	@ 0x23
 8001e6e:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e70:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e72:	fa06 f101 	lsl.w	r1, r6, r1
 8001e76:	ea24 0101 	bic.w	r1, r4, r1
 8001e7a:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e7e:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e80:	4920      	ldr	r1, [pc, #128]	@ (8001f04 <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e82:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d1d3      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x70>
 8001e88:	2d12      	cmp	r5, #18
 8001e8a:	d030      	beq.n	8001eee <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e8c:	f1a5 0310 	sub.w	r3, r5, #16
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d8cd      	bhi.n	8001e30 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e94:	491c      	ldr	r1, [pc, #112]	@ (8001f08 <HAL_ADC_ConfigChannel+0x148>)
 8001e96:	684b      	ldr	r3, [r1, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e98:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e9e:	604b      	str	r3, [r1, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea0:	d1c6      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <HAL_ADC_ConfigChannel+0x14c>)
 8001ea4:	f101 7146 	add.w	r1, r1, #51904512	@ 0x3180000
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f501 312e 	add.w	r1, r1, #178176	@ 0x2b800
 8001eae:	f201 3183 	addw	r1, r1, #899	@ 0x383
 8001eb2:	fba1 1303 	umull	r1, r3, r1, r3
 8001eb6:	0c9b      	lsrs	r3, r3, #18
 8001eb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8001ec0:	9b01      	ldr	r3, [sp, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0b4      	beq.n	8001e30 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8001ec6:	9b01      	ldr	r3, [sp, #4]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8001ecc:	9b01      	ldr	r3, [sp, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x106>
 8001ed2:	e7ad      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ed4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001ed6:	3941      	subs	r1, #65	@ 0x41
 8001ed8:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eda:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001edc:	fa06 f101 	lsl.w	r1, r6, r1
 8001ee0:	ea24 0101 	bic.w	r1, r4, r1
 8001ee4:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ee6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ee8:	4308      	orrs	r0, r1
 8001eea:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8001eec:	e79d      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001eee:	f8d1 3304 	ldr.w	r3, [r1, #772]	@ 0x304
 8001ef2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ef6:	f8c1 3304 	str.w	r3, [r1, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001efa:	e799      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001efc:	2002      	movs	r0, #2
}
 8001efe:	b002      	add	sp, #8
 8001f00:	bd70      	pop	{r4, r5, r6, pc}
 8001f02:	bf00      	nop
 8001f04:	40012000 	.word	0x40012000
 8001f08:	40012300 	.word	0x40012300
 8001f0c:	20000018 	.word	0x20000018

08001f10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4907      	ldr	r1, [pc, #28]	@ (8001f30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f12:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f22:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001f2a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <HAL_NVIC_SetPriority+0x70>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3e:	f1c3 0e07 	rsb	lr, r3, #7
 8001f42:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4a:	bf28      	it	cs
 8001f4c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f50:	f1bc 0f06 	cmp.w	ip, #6
 8001f54:	d91c      	bls.n	8001f90 <HAL_NVIC_SetPriority+0x5c>
 8001f56:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5e:	fa03 f30c 	lsl.w	r3, r3, ip
 8001f62:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	fa03 f30e 	lsl.w	r3, r3, lr
 8001f6e:	ea21 0303 	bic.w	r3, r1, r3
 8001f72:	fa03 f30c 	lsl.w	r3, r3, ip
 8001f76:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	db0a      	blt.n	8001f96 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001f84:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001f88:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f90:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f92:	4694      	mov	ip, r2
 8001f94:	e7e7      	b.n	8001f66 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_NVIC_SetPriority+0x74>)
 8001f98:	f000 000f 	and.w	r0, r0, #15
 8001f9c:	4402      	add	r2, r0
 8001f9e:	7613      	strb	r3, [r2, #24]
 8001fa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fa4:	e000ed00 	.word	0xe000ed00
 8001fa8:	e000ecfc 	.word	0xe000ecfc

08001fac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001fac:	2800      	cmp	r0, #0
 8001fae:	db07      	blt.n	8001fc0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb0:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <HAL_NVIC_EnableIRQ+0x18>)
 8001fb2:	0941      	lsrs	r1, r0, #5
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f000 001f 	and.w	r0, r0, #31
 8001fba:	4083      	lsls	r3, r0
 8001fbc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	3801      	subs	r0, #1
 8001fca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001fce:	d301      	bcc.n	8001fd4 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001fd2:	4770      	bx	lr
{
 8001fd4:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	4c07      	ldr	r4, [pc, #28]	@ (8001ff8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fdc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001fe2:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fea:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff2:	6119      	str	r1, [r3, #16]
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ffc:	b188      	cbz	r0, 8002022 <HAL_DAC_Init+0x26>
{
 8001ffe:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002000:	7903      	ldrb	r3, [r0, #4]
 8002002:	4604      	mov	r4, r0
 8002004:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002008:	b13b      	cbz	r3, 800201a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800200a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800200c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800200e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002010:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002012:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002014:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002016:	4618      	mov	r0, r3
}
 8002018:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800201a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800201c:	f7ff f9f4 	bl	8001408 <HAL_DAC_MspInit>
 8002020:	e7f3      	b.n	800200a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8002022:	2001      	movs	r0, #1
}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop

08002028 <HAL_DAC_ConfigChannel>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002028:	b320      	cbz	r0, 8002074 <HAL_DAC_ConfigChannel+0x4c>
 800202a:	b319      	cbz	r1, 8002074 <HAL_DAC_ConfigChannel+0x4c>
 800202c:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800202e:	7940      	ldrb	r0, [r0, #5]
 8002030:	2801      	cmp	r0, #1
 8002032:	d021      	beq.n	8002078 <HAL_DAC_ConfigChannel+0x50>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002034:	2002      	movs	r0, #2
{
 8002036:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 8002038:	7118      	strb	r0, [r3, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800203a:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 800203e:	681c      	ldr	r4, [r3, #0]
               << (Channel & 0x10UL));
 8002040:	f002 0210 	and.w	r2, r2, #16
  tmpreg1 = hdac->Instance->CR;
 8002044:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002046:	4301      	orrs	r1, r0
               << (Channel & 0x10UL));
 8002048:	f640 70fe 	movw	r0, #4094	@ 0xffe
 800204c:	4090      	lsls	r0, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800204e:	ea25 0000 	bic.w	r0, r5, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002052:	4091      	lsls	r1, r2
 8002054:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002056:	6021      	str	r1, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002058:	6821      	ldr	r1, [r4, #0]
 800205a:	20c0      	movs	r0, #192	@ 0xc0
 800205c:	fa00 f202 	lsl.w	r2, r0, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002060:	2500      	movs	r5, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002062:	ea21 0202 	bic.w	r2, r1, r2
  hdac->State = HAL_DAC_STATE_READY;
 8002066:	2101      	movs	r1, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002068:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800206a:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 800206c:	715d      	strb	r5, [r3, #5]

  /* Return function status */
  return status;
 800206e:	4628      	mov	r0, r5
}
 8002070:	bc30      	pop	{r4, r5}
 8002072:	4770      	bx	lr
    return HAL_ERROR;
 8002074:	2001      	movs	r0, #1
 8002076:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8002078:	2002      	movs	r0, #2
}
 800207a:	4770      	bx	lr

0800207c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800207c:	b538      	push	{r3, r4, r5, lr}
 800207e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff fcf2 	bl	8001a68 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002084:	2c00      	cmp	r4, #0
 8002086:	d075      	beq.n	8002174 <HAL_DMA_Init+0xf8>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002088:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800208a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800208c:	2102      	movs	r1, #2
 800208e:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8002092:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	4605      	mov	r5, r0
 800209e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a0:	e005      	b.n	80020ae <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a2:	f7ff fce1 	bl	8001a68 <HAL_GetTick>
 80020a6:	1b43      	subs	r3, r0, r5
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d839      	bhi.n	8002120 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	07d1      	lsls	r1, r2, #31
 80020b2:	d4f6      	bmi.n	80020a2 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80020b8:	68e1      	ldr	r1, [r4, #12]
 80020ba:	4302      	orrs	r2, r0
 80020bc:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020be:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c2:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c4:	432a      	orrs	r2, r5
 80020c6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c8:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80020ca:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020cc:	4302      	orrs	r2, r0
 80020ce:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020d0:	4932      	ldr	r1, [pc, #200]	@ (800219c <HAL_DMA_Init+0x120>)
 80020d2:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80020d4:	6a25      	ldr	r5, [r4, #32]
 80020d6:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d8:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80020dc:	2904      	cmp	r1, #4
 80020de:	d026      	beq.n	800212e <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020e0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020e2:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020e4:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020e8:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020ea:	b2d8      	uxtb	r0, r3
 80020ec:	4a2c      	ldr	r2, [pc, #176]	@ (80021a0 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 80020ee:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020f0:	3810      	subs	r0, #16
 80020f2:	fba2 5200 	umull	r5, r2, r2, r0
 80020f6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020f8:	492a      	ldr	r1, [pc, #168]	@ (80021a4 <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020fe:	5c89      	ldrb	r1, [r1, r2]
 8002100:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002102:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8002106:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002108:	bf88      	it	hi
 800210a:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800210c:	223f      	movs	r2, #63	@ 0x3f
 800210e:	408a      	lsls	r2, r1
 8002110:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002112:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002114:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8002116:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002118:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800211a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 800211e:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002120:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002122:	2220      	movs	r2, #32
 8002124:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002126:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 800212a:	4618      	mov	r0, r3
}
 800212c:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800212e:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8002132:	4329      	orrs	r1, r5
 8002134:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8002136:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002138:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800213a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800213c:	f021 0107 	bic.w	r1, r1, #7
 8002140:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8002142:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002146:	2d00      	cmp	r5, #0
 8002148:	d0cf      	beq.n	80020ea <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800214a:	b928      	cbnz	r0, 8002158 <HAL_DMA_Init+0xdc>
  {
    switch (tmp)
 800214c:	2a01      	cmp	r2, #1
 800214e:	d021      	beq.n	8002194 <HAL_DMA_Init+0x118>
 8002150:	f032 0202 	bics.w	r2, r2, #2
 8002154:	d1c9      	bne.n	80020ea <HAL_DMA_Init+0x6e>
 8002156:	e006      	b.n	8002166 <HAL_DMA_Init+0xea>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002158:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800215c:	d00c      	beq.n	8002178 <HAL_DMA_Init+0xfc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800215e:	2a02      	cmp	r2, #2
 8002160:	d903      	bls.n	800216a <HAL_DMA_Init+0xee>
 8002162:	2a03      	cmp	r2, #3
 8002164:	d1c1      	bne.n	80020ea <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002166:	01ea      	lsls	r2, r5, #7
 8002168:	d5bf      	bpl.n	80020ea <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800216a:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800216c:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800216e:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002170:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8002174:	2001      	movs	r0, #1
}
 8002176:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8002178:	2a03      	cmp	r2, #3
 800217a:	d8b6      	bhi.n	80020ea <HAL_DMA_Init+0x6e>
 800217c:	a001      	add	r0, pc, #4	@ (adr r0, 8002184 <HAL_DMA_Init+0x108>)
 800217e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002182:	bf00      	nop
 8002184:	0800216b 	.word	0x0800216b
 8002188:	08002167 	.word	0x08002167
 800218c:	0800216b 	.word	0x0800216b
 8002190:	08002195 	.word	0x08002195
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002194:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8002198:	d1a7      	bne.n	80020ea <HAL_DMA_Init+0x6e>
 800219a:	e7e6      	b.n	800216a <HAL_DMA_Init+0xee>
 800219c:	f010803f 	.word	0xf010803f
 80021a0:	aaaaaaab 	.word	0xaaaaaaab
 80021a4:	08003ec0 	.word	0x08003ec0

080021a8 <HAL_DMA_Start_IT>:
{
 80021a8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80021aa:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ae:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80021b0:	2c01      	cmp	r4, #1
 80021b2:	d00a      	beq.n	80021ca <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 80021b4:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
  __HAL_LOCK(hdma);
 80021b8:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80021bc:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 80021be:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80021c2:	d005      	beq.n	80021d0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80021c4:	2300      	movs	r3, #0
 80021c6:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 80021ca:	2002      	movs	r0, #2
}
 80021cc:	bc70      	pop	{r4, r5, r6}
 80021ce:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80021d0:	2602      	movs	r6, #2
 80021d2:	f880 6035 	strb.w	r6, [r0, #53]	@ 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021d6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d8:	2600      	movs	r6, #0
 80021da:	6546      	str	r6, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021dc:	6826      	ldr	r6, [r4, #0]
 80021de:	f426 2680 	bic.w	r6, r6, #262144	@ 0x40000
 80021e2:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80021e4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021e6:	6883      	ldr	r3, [r0, #8]
 80021e8:	2b40      	cmp	r3, #64	@ 0x40
    hdma->Instance->PAR = DstAddress;
 80021ea:	bf0e      	itee	eq
 80021ec:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80021ee:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80021f0:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80021f4:	bf08      	it	eq
 80021f6:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f8:	233f      	movs	r3, #63	@ 0x3f
 80021fa:	4093      	lsls	r3, r2
 80021fc:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021fe:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002200:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002202:	f043 0316 	orr.w	r3, r3, #22
 8002206:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002208:	b11a      	cbz	r2, 8002212 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002218:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800221a:	6023      	str	r3, [r4, #0]
}
 800221c:	bc70      	pop	{r4, r5, r6}
 800221e:	4770      	bx	lr

08002220 <HAL_DMA_IRQHandler>:
{
 8002220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002222:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 8002224:	4a67      	ldr	r2, [pc, #412]	@ (80023c4 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002226:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002228:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800222e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8002230:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002232:	2208      	movs	r2, #8
 8002234:	409a      	lsls	r2, r3
 8002236:	422a      	tst	r2, r5
{
 8002238:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800223a:	d003      	beq.n	8002244 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800223c:	6801      	ldr	r1, [r0, #0]
 800223e:	6808      	ldr	r0, [r1, #0]
 8002240:	0740      	lsls	r0, r0, #29
 8002242:	d478      	bmi.n	8002336 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002244:	2201      	movs	r2, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	422a      	tst	r2, r5
 800224a:	d003      	beq.n	8002254 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800224c:	6821      	ldr	r1, [r4, #0]
 800224e:	6949      	ldr	r1, [r1, #20]
 8002250:	0608      	lsls	r0, r1, #24
 8002252:	d46a      	bmi.n	800232a <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002254:	2204      	movs	r2, #4
 8002256:	409a      	lsls	r2, r3
 8002258:	422a      	tst	r2, r5
 800225a:	d003      	beq.n	8002264 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800225c:	6821      	ldr	r1, [r4, #0]
 800225e:	6809      	ldr	r1, [r1, #0]
 8002260:	0789      	lsls	r1, r1, #30
 8002262:	d45c      	bmi.n	800231e <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002264:	2210      	movs	r2, #16
 8002266:	409a      	lsls	r2, r3
 8002268:	422a      	tst	r2, r5
 800226a:	d003      	beq.n	8002274 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800226c:	6821      	ldr	r1, [r4, #0]
 800226e:	6808      	ldr	r0, [r1, #0]
 8002270:	0700      	lsls	r0, r0, #28
 8002272:	d441      	bmi.n	80022f8 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002274:	2220      	movs	r2, #32
 8002276:	409a      	lsls	r2, r3
 8002278:	422a      	tst	r2, r5
 800227a:	d014      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800227c:	6821      	ldr	r1, [r4, #0]
 800227e:	6808      	ldr	r0, [r1, #0]
 8002280:	06c0      	lsls	r0, r0, #27
 8002282:	d510      	bpl.n	80022a6 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002284:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002286:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 800228a:	2a05      	cmp	r2, #5
 800228c:	d063      	beq.n	8002356 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800228e:	680b      	ldr	r3, [r1, #0]
 8002290:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002294:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002296:	d07e      	beq.n	8002396 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002298:	0319      	lsls	r1, r3, #12
 800229a:	f140 8089 	bpl.w	80023b0 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800229e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80022a0:	b10b      	cbz	r3, 80022a6 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 80022a2:	4620      	mov	r0, r4
 80022a4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80022a8:	b323      	cbz	r3, 80022f4 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80022ac:	07da      	lsls	r2, r3, #31
 80022ae:	d51a      	bpl.n	80022e6 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 80022b0:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022b2:	4945      	ldr	r1, [pc, #276]	@ (80023c8 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b4:	2305      	movs	r3, #5
 80022b6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80022ba:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022bc:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 80022c0:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c4:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e002      	b.n	80022d0 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	07db      	lsls	r3, r3, #31
 80022ce:	d504      	bpl.n	80022da <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80022d0:	9b01      	ldr	r3, [sp, #4]
 80022d2:	3301      	adds	r3, #1
 80022d4:	42b3      	cmp	r3, r6
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	d9f7      	bls.n	80022ca <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 80022da:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80022dc:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80022de:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80022e2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80022e6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80022e8:	b123      	cbz	r3, 80022f4 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80022ea:	4620      	mov	r0, r4
}
 80022ec:	b003      	add	sp, #12
 80022ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80022f2:	4718      	bx	r3
}
 80022f4:	b003      	add	sp, #12
 80022f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022f8:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022fa:	680a      	ldr	r2, [r1, #0]
 80022fc:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002300:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002302:	d122      	bne.n	800234a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002304:	05d2      	lsls	r2, r2, #23
 8002306:	d403      	bmi.n	8002310 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002308:	680a      	ldr	r2, [r1, #0]
 800230a:	f022 0208 	bic.w	r2, r2, #8
 800230e:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002310:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002312:	2a00      	cmp	r2, #0
 8002314:	d0ae      	beq.n	8002274 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8002316:	4620      	mov	r0, r4
 8002318:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800231a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800231c:	e7aa      	b.n	8002274 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800231e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002320:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002322:	f042 0204 	orr.w	r2, r2, #4
 8002326:	6562      	str	r2, [r4, #84]	@ 0x54
 8002328:	e79c      	b.n	8002264 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800232a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800232c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800232e:	f042 0202 	orr.w	r2, r2, #2
 8002332:	6562      	str	r2, [r4, #84]	@ 0x54
 8002334:	e78e      	b.n	8002254 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002336:	6808      	ldr	r0, [r1, #0]
 8002338:	f020 0004 	bic.w	r0, r0, #4
 800233c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800233e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002340:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	6562      	str	r2, [r4, #84]	@ 0x54
 8002348:	e77c      	b.n	8002244 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800234a:	0311      	lsls	r1, r2, #12
 800234c:	d5e0      	bpl.n	8002310 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800234e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002350:	2a00      	cmp	r2, #0
 8002352:	d1e0      	bne.n	8002316 <HAL_DMA_IRQHandler+0xf6>
 8002354:	e78e      	b.n	8002274 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002356:	680a      	ldr	r2, [r1, #0]
 8002358:	f022 0216 	bic.w	r2, r2, #22
 800235c:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800235e:	694a      	ldr	r2, [r1, #20]
 8002360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002364:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002366:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002368:	b33a      	cbz	r2, 80023ba <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800236a:	680a      	ldr	r2, [r1, #0]
 800236c:	f022 0208 	bic.w	r2, r2, #8
 8002370:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002372:	223f      	movs	r2, #63	@ 0x3f
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8002378:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800237c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 800237e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002380:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002384:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002388:	2900      	cmp	r1, #0
 800238a:	d0b3      	beq.n	80022f4 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800238c:	4620      	mov	r0, r4
}
 800238e:	b003      	add	sp, #12
 8002390:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8002394:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002396:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 800239a:	d180      	bne.n	800229e <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800239c:	680a      	ldr	r2, [r1, #0]
 800239e:	f022 0210 	bic.w	r2, r2, #16
 80023a2:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80023a4:	2201      	movs	r2, #1
 80023a6:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80023aa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80023ae:	e776      	b.n	800229e <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80023b0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f47f af75 	bne.w	80022a2 <HAL_DMA_IRQHandler+0x82>
 80023b8:	e775      	b.n	80022a6 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ba:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80023bc:	2a00      	cmp	r2, #0
 80023be:	d1d4      	bne.n	800236a <HAL_DMA_IRQHandler+0x14a>
 80023c0:	e7d7      	b.n	8002372 <HAL_DMA_IRQHandler+0x152>
 80023c2:	bf00      	nop
 80023c4:	20000018 	.word	0x20000018
 80023c8:	1b4e81b5 	.word	0x1b4e81b5

080023cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d0:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d4:	f8df a218 	ldr.w	sl, [pc, #536]	@ 80025f0 <HAL_GPIO_Init+0x224>
{
 80023d8:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 80023da:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023de:	4689      	mov	r9, r1
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e2:	3301      	adds	r3, #1
 80023e4:	2b10      	cmp	r3, #16
 80023e6:	f000 8091 	beq.w	800250c <HAL_GPIO_Init+0x140>
    ioposition = 0x01U << position;
 80023ea:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ee:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 80023f2:	43a2      	bics	r2, r4
 80023f4:	d1f5      	bne.n	80023e2 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80023fa:	f001 0203 	and.w	r2, r1, #3
 80023fe:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002402:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002404:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002406:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800240c:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002410:	d97f      	bls.n	8002512 <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002412:	2a03      	cmp	r2, #3
 8002414:	f040 80b6 	bne.w	8002584 <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->MODER;
 8002418:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800241a:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002420:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002422:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002426:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002428:	d0db      	beq.n	80023e2 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	2200      	movs	r2, #0
 800242c:	9203      	str	r2, [sp, #12]
 800242e:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8002432:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002436:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 800243a:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800243e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002442:	9203      	str	r2, [sp, #12]
 8002444:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244e:	f003 0703 	and.w	r7, r3, #3
 8002452:	260f      	movs	r6, #15
 8002454:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8002458:	00bf      	lsls	r7, r7, #2
 800245a:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245e:	4e61      	ldr	r6, [pc, #388]	@ (80025e4 <HAL_GPIO_Init+0x218>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8002460:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002464:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002468:	d027      	beq.n	80024ba <HAL_GPIO_Init+0xee>
 800246a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800246e:	42b0      	cmp	r0, r6
 8002470:	f000 8093 	beq.w	800259a <HAL_GPIO_Init+0x1ce>
 8002474:	4e5c      	ldr	r6, [pc, #368]	@ (80025e8 <HAL_GPIO_Init+0x21c>)
 8002476:	42b0      	cmp	r0, r6
 8002478:	f000 8095 	beq.w	80025a6 <HAL_GPIO_Init+0x1da>
 800247c:	f8df c174 	ldr.w	ip, [pc, #372]	@ 80025f4 <HAL_GPIO_Init+0x228>
 8002480:	4560      	cmp	r0, ip
 8002482:	f000 8096 	beq.w	80025b2 <HAL_GPIO_Init+0x1e6>
 8002486:	f8df c170 	ldr.w	ip, [pc, #368]	@ 80025f8 <HAL_GPIO_Init+0x22c>
 800248a:	4560      	cmp	r0, ip
 800248c:	f000 8097 	beq.w	80025be <HAL_GPIO_Init+0x1f2>
 8002490:	f8df c168 	ldr.w	ip, [pc, #360]	@ 80025fc <HAL_GPIO_Init+0x230>
 8002494:	4560      	cmp	r0, ip
 8002496:	f000 8098 	beq.w	80025ca <HAL_GPIO_Init+0x1fe>
 800249a:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8002600 <HAL_GPIO_Init+0x234>
 800249e:	4560      	cmp	r0, ip
 80024a0:	f000 8099 	beq.w	80025d6 <HAL_GPIO_Init+0x20a>
 80024a4:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8002604 <HAL_GPIO_Init+0x238>
 80024a8:	4560      	cmp	r0, ip
 80024aa:	bf0c      	ite	eq
 80024ac:	f04f 0c07 	moveq.w	ip, #7
 80024b0:	f04f 0c08 	movne.w	ip, #8
 80024b4:	fa0c f707 	lsl.w	r7, ip, r7
 80024b8:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ba:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024bc:	4a4b      	ldr	r2, [pc, #300]	@ (80025ec <HAL_GPIO_Init+0x220>)
 80024be:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c0:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80024c2:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80024c6:	4e49      	ldr	r6, [pc, #292]	@ (80025ec <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 80024c8:	bf54      	ite	pl
 80024ca:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80024cc:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80024d0:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80024d2:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80024d4:	4e45      	ldr	r6, [pc, #276]	@ (80025ec <HAL_GPIO_Init+0x220>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d6:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 80024d8:	bf54      	ite	pl
 80024da:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80024dc:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 80024e0:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 80024e2:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e4:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80024e6:	4e41      	ldr	r6, [pc, #260]	@ (80025ec <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 80024e8:	bf54      	ite	pl
 80024ea:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80024ec:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 80024f0:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f2:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f4:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80024fa:	493c      	ldr	r1, [pc, #240]	@ (80025ec <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 80024fc:	bf54      	ite	pl
 80024fe:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002500:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002504:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8002506:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002508:	f47f af6f 	bne.w	80023ea <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 800250c:	b005      	add	sp, #20
 800250e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002512:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002514:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002518:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800251c:	fa07 f70c 	lsl.w	r7, r7, ip
 8002520:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002524:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002526:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002528:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252c:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8002530:	409f      	lsls	r7, r3
 8002532:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002536:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002538:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800253a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002542:	fa07 f70c 	lsl.w	r7, r7, ip
 8002546:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254a:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800254c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	f47f af63 	bne.w	8002418 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8002552:	08df      	lsrs	r7, r3, #3
 8002554:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002558:	9701      	str	r7, [sp, #4]
 800255a:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800255c:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8002560:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002562:	f003 0e07 	and.w	lr, r3, #7
 8002566:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800256a:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800256c:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002570:	fa06 fe0e 	lsl.w	lr, r6, lr
 8002574:	9e00      	ldr	r6, [sp, #0]
 8002576:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 800257a:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800257c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002580:	6237      	str	r7, [r6, #32]
 8002582:	e749      	b.n	8002418 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8002584:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002586:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258a:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800258e:	fa07 f70c 	lsl.w	r7, r7, ip
 8002592:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8002596:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002598:	e73e      	b.n	8002418 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259a:	f04f 0c01 	mov.w	ip, #1
 800259e:	fa0c f707 	lsl.w	r7, ip, r7
 80025a2:	433d      	orrs	r5, r7
 80025a4:	e789      	b.n	80024ba <HAL_GPIO_Init+0xee>
 80025a6:	f04f 0c02 	mov.w	ip, #2
 80025aa:	fa0c f707 	lsl.w	r7, ip, r7
 80025ae:	433d      	orrs	r5, r7
 80025b0:	e783      	b.n	80024ba <HAL_GPIO_Init+0xee>
 80025b2:	f04f 0c03 	mov.w	ip, #3
 80025b6:	fa0c f707 	lsl.w	r7, ip, r7
 80025ba:	433d      	orrs	r5, r7
 80025bc:	e77d      	b.n	80024ba <HAL_GPIO_Init+0xee>
 80025be:	f04f 0c04 	mov.w	ip, #4
 80025c2:	fa0c f707 	lsl.w	r7, ip, r7
 80025c6:	433d      	orrs	r5, r7
 80025c8:	e777      	b.n	80024ba <HAL_GPIO_Init+0xee>
 80025ca:	f04f 0c05 	mov.w	ip, #5
 80025ce:	fa0c f707 	lsl.w	r7, ip, r7
 80025d2:	433d      	orrs	r5, r7
 80025d4:	e771      	b.n	80024ba <HAL_GPIO_Init+0xee>
 80025d6:	f04f 0c06 	mov.w	ip, #6
 80025da:	fa0c f707 	lsl.w	r7, ip, r7
 80025de:	433d      	orrs	r5, r7
 80025e0:	e76b      	b.n	80024ba <HAL_GPIO_Init+0xee>
 80025e2:	bf00      	nop
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40020800 	.word	0x40020800
 80025ec:	40013c00 	.word	0x40013c00
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40021400 	.word	0x40021400
 8002600:	40021800 	.word	0x40021800
 8002604:	40021c00 	.word	0x40021c00

08002608 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	b902      	cbnz	r2, 800260c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260a:	0409      	lsls	r1, r1, #16
 800260c:	6181      	str	r1, [r0, #24]
  }
}
 800260e:	4770      	bx	lr

08002610 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002610:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002612:	ea01 0203 	and.w	r2, r1, r3
 8002616:	ea21 0103 	bic.w	r1, r1, r3
 800261a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800261e:	6181      	str	r1, [r0, #24]
}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop

08002624 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	2800      	cmp	r0, #0
 8002626:	f000 81d8 	beq.w	80029da <HAL_RCC_OscConfig+0x3b6>
{
 800262a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	6803      	ldr	r3, [r0, #0]
 8002630:	07dd      	lsls	r5, r3, #31
{
 8002632:	b082      	sub	sp, #8
 8002634:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	d52f      	bpl.n	8002698 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002638:	499d      	ldr	r1, [pc, #628]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 800263a:	688a      	ldr	r2, [r1, #8]
 800263c:	f002 020c 	and.w	r2, r2, #12
 8002640:	2a04      	cmp	r2, #4
 8002642:	f000 80ec 	beq.w	800281e <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	688a      	ldr	r2, [r1, #8]
 8002648:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264c:	2a08      	cmp	r2, #8
 800264e:	f000 80e2 	beq.w	8002816 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	6863      	ldr	r3, [r4, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002658:	f000 80eb 	beq.w	8002832 <HAL_RCC_OscConfig+0x20e>
 800265c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002660:	f000 8173 	beq.w	800294a <HAL_RCC_OscConfig+0x326>
 8002664:	4d92      	ldr	r5, [pc, #584]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 8002666:	682a      	ldr	r2, [r5, #0]
 8002668:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800266c:	602a      	str	r2, [r5, #0]
 800266e:	682a      	ldr	r2, [r5, #0]
 8002670:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002674:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 80e0 	bne.w	800283c <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff f9f4 	bl	8001a68 <HAL_GetTick>
 8002680:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	e005      	b.n	8002690 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff f9f0 	bl	8001a68 <HAL_GetTick>
 8002688:	1b80      	subs	r0, r0, r6
 800268a:	2864      	cmp	r0, #100	@ 0x64
 800268c:	f200 8100 	bhi.w	8002890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002690:	682b      	ldr	r3, [r5, #0]
 8002692:	039f      	lsls	r7, r3, #14
 8002694:	d4f6      	bmi.n	8002684 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	079d      	lsls	r5, r3, #30
 800269a:	d528      	bpl.n	80026ee <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269c:	4a84      	ldr	r2, [pc, #528]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 800269e:	6891      	ldr	r1, [r2, #8]
 80026a0:	f011 0f0c 	tst.w	r1, #12
 80026a4:	f000 809b 	beq.w	80027de <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a8:	6891      	ldr	r1, [r2, #8]
 80026aa:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ae:	2908      	cmp	r1, #8
 80026b0:	f000 8091 	beq.w	80027d6 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026b4:	68e3      	ldr	r3, [r4, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 810c 	beq.w	80028d4 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026bc:	4b7d      	ldr	r3, [pc, #500]	@ (80028b4 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4e7c      	ldr	r6, [pc, #496]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026c4:	f7ff f9d0 	bl	8001a68 <HAL_GetTick>
 80026c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	e005      	b.n	80026d8 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026cc:	f7ff f9cc 	bl	8001a68 <HAL_GetTick>
 80026d0:	1b40      	subs	r0, r0, r5
 80026d2:	2802      	cmp	r0, #2
 80026d4:	f200 80dc 	bhi.w	8002890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	6833      	ldr	r3, [r6, #0]
 80026da:	079f      	lsls	r7, r3, #30
 80026dc:	d5f6      	bpl.n	80026cc <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	6833      	ldr	r3, [r6, #0]
 80026e0:	6922      	ldr	r2, [r4, #16]
 80026e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80026e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80026ea:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	071a      	lsls	r2, r3, #28
 80026f0:	d45c      	bmi.n	80027ac <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f2:	075d      	lsls	r5, r3, #29
 80026f4:	d53a      	bpl.n	800276c <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f6:	4a6e      	ldr	r2, [pc, #440]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 80026f8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80026fa:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	f040 8088 	bne.w	8002812 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	@ 0x40
 800270c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002716:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4e67      	ldr	r6, [pc, #412]	@ (80028b8 <HAL_RCC_OscConfig+0x294>)
 800271a:	6833      	ldr	r3, [r6, #0]
 800271c:	05d8      	lsls	r0, r3, #23
 800271e:	f140 80a7 	bpl.w	8002870 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002722:	68a3      	ldr	r3, [r4, #8]
 8002724:	2b01      	cmp	r3, #1
 8002726:	f000 80b7 	beq.w	8002898 <HAL_RCC_OscConfig+0x274>
 800272a:	2b05      	cmp	r3, #5
 800272c:	f000 811d 	beq.w	800296a <HAL_RCC_OscConfig+0x346>
 8002730:	4e5f      	ldr	r6, [pc, #380]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 8002732:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	6732      	str	r2, [r6, #112]	@ 0x70
 800273a:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 800273c:	f022 0204 	bic.w	r2, r2, #4
 8002740:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002742:	2b00      	cmp	r3, #0
 8002744:	f040 80ad 	bne.w	80028a2 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7ff f98e 	bl	8001a68 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002750:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002752:	e005      	b.n	8002760 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7ff f988 	bl	8001a68 <HAL_GetTick>
 8002758:	1bc0      	subs	r0, r0, r7
 800275a:	4540      	cmp	r0, r8
 800275c:	f200 8098 	bhi.w	8002890 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002762:	079b      	lsls	r3, r3, #30
 8002764:	d4f6      	bmi.n	8002754 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002766:	2d00      	cmp	r5, #0
 8002768:	f040 80f9 	bne.w	800295e <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276c:	69a3      	ldr	r3, [r4, #24]
 800276e:	b1cb      	cbz	r3, 80027a4 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002770:	4d4f      	ldr	r5, [pc, #316]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 8002772:	68aa      	ldr	r2, [r5, #8]
 8002774:	f002 020c 	and.w	r2, r2, #12
 8002778:	2a08      	cmp	r2, #8
 800277a:	f000 80bc 	beq.w	80028f6 <HAL_RCC_OscConfig+0x2d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277e:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002780:	4b4c      	ldr	r3, [pc, #304]	@ (80028b4 <HAL_RCC_OscConfig+0x290>)
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002788:	f000 80f9 	beq.w	800297e <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7ff f96c 	bl	8001a68 <HAL_GetTick>
 8002790:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	e004      	b.n	800279e <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002794:	f7ff f968 	bl	8001a68 <HAL_GetTick>
 8002798:	1b00      	subs	r0, r0, r4
 800279a:	2802      	cmp	r0, #2
 800279c:	d878      	bhi.n	8002890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	682b      	ldr	r3, [r5, #0]
 80027a0:	019b      	lsls	r3, r3, #6
 80027a2:	d4f7      	bmi.n	8002794 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80027a4:	2000      	movs	r0, #0
}
 80027a6:	b002      	add	sp, #8
 80027a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ac:	6963      	ldr	r3, [r4, #20]
 80027ae:	b1fb      	cbz	r3, 80027f0 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 80027b0:	4b40      	ldr	r3, [pc, #256]	@ (80028b4 <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b2:	4e3f      	ldr	r6, [pc, #252]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 80027b4:	2201      	movs	r2, #1
 80027b6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80027ba:	f7ff f955 	bl	8001a68 <HAL_GetTick>
 80027be:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c0:	e004      	b.n	80027cc <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c2:	f7ff f951 	bl	8001a68 <HAL_GetTick>
 80027c6:	1b40      	subs	r0, r0, r5
 80027c8:	2802      	cmp	r0, #2
 80027ca:	d861      	bhi.n	8002890 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027cc:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80027ce:	079b      	lsls	r3, r3, #30
 80027d0:	d5f7      	bpl.n	80027c2 <HAL_RCC_OscConfig+0x19e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	e78d      	b.n	80026f2 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	6852      	ldr	r2, [r2, #4]
 80027d8:	0251      	lsls	r1, r2, #9
 80027da:	f53f af6b 	bmi.w	80026b4 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027de:	4a34      	ldr	r2, [pc, #208]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	0792      	lsls	r2, r2, #30
 80027e4:	d538      	bpl.n	8002858 <HAL_RCC_OscConfig+0x234>
 80027e6:	68e2      	ldr	r2, [r4, #12]
 80027e8:	2a01      	cmp	r2, #1
 80027ea:	d035      	beq.n	8002858 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
 80027ee:	e7da      	b.n	80027a6 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 80027f0:	4a30      	ldr	r2, [pc, #192]	@ (80028b4 <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f2:	4e2f      	ldr	r6, [pc, #188]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 80027f4:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80027f8:	f7ff f936 	bl	8001a68 <HAL_GetTick>
 80027fc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fe:	e004      	b.n	800280a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff f932 	bl	8001a68 <HAL_GetTick>
 8002804:	1b40      	subs	r0, r0, r5
 8002806:	2802      	cmp	r0, #2
 8002808:	d842      	bhi.n	8002890 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800280c:	079f      	lsls	r7, r3, #30
 800280e:	d4f7      	bmi.n	8002800 <HAL_RCC_OscConfig+0x1dc>
 8002810:	e7df      	b.n	80027d2 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8002812:	2500      	movs	r5, #0
 8002814:	e780      	b.n	8002718 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	684a      	ldr	r2, [r1, #4]
 8002818:	0251      	lsls	r1, r2, #9
 800281a:	f57f af1a 	bpl.w	8002652 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281e:	4a24      	ldr	r2, [pc, #144]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	0392      	lsls	r2, r2, #14
 8002824:	f57f af38 	bpl.w	8002698 <HAL_RCC_OscConfig+0x74>
 8002828:	6862      	ldr	r2, [r4, #4]
 800282a:	2a00      	cmp	r2, #0
 800282c:	f47f af34 	bne.w	8002698 <HAL_RCC_OscConfig+0x74>
 8002830:	e7dc      	b.n	80027ec <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002832:	4a1f      	ldr	r2, [pc, #124]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 8002834:	6813      	ldr	r3, [r2, #0]
 8002836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800283c:	f7ff f914 	bl	8001a68 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002840:	4e1b      	ldr	r6, [pc, #108]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002842:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002844:	e004      	b.n	8002850 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002846:	f7ff f90f 	bl	8001a68 <HAL_GetTick>
 800284a:	1b40      	subs	r0, r0, r5
 800284c:	2864      	cmp	r0, #100	@ 0x64
 800284e:	d81f      	bhi.n	8002890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002850:	6833      	ldr	r3, [r6, #0]
 8002852:	039b      	lsls	r3, r3, #14
 8002854:	d5f7      	bpl.n	8002846 <HAL_RCC_OscConfig+0x222>
 8002856:	e71e      	b.n	8002696 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4915      	ldr	r1, [pc, #84]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 800285a:	6920      	ldr	r0, [r4, #16]
 800285c:	680a      	ldr	r2, [r1, #0]
 800285e:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8002862:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002866:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002868:	071a      	lsls	r2, r3, #28
 800286a:	f57f af42 	bpl.w	80026f2 <HAL_RCC_OscConfig+0xce>
 800286e:	e79d      	b.n	80027ac <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002870:	6833      	ldr	r3, [r6, #0]
 8002872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002876:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002878:	f7ff f8f6 	bl	8001a68 <HAL_GetTick>
 800287c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	6833      	ldr	r3, [r6, #0]
 8002880:	05d9      	lsls	r1, r3, #23
 8002882:	f53f af4e 	bmi.w	8002722 <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7ff f8ef 	bl	8001a68 <HAL_GetTick>
 800288a:	1bc0      	subs	r0, r0, r7
 800288c:	2802      	cmp	r0, #2
 800288e:	d9f6      	bls.n	800287e <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8002890:	2003      	movs	r0, #3
}
 8002892:	b002      	add	sp, #8
 8002894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002898:	4a05      	ldr	r2, [pc, #20]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
 800289a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80028a2:	f7ff f8e1 	bl	8001a68 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a6:	4f02      	ldr	r7, [pc, #8]	@ (80028b0 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80028a8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_OscConfig+0x2a2>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	42470000 	.word	0x42470000
 80028b8:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7ff f8d4 	bl	8001a68 <HAL_GetTick>
 80028c0:	1b80      	subs	r0, r0, r6
 80028c2:	4540      	cmp	r0, r8
 80028c4:	d8e4      	bhi.n	8002890 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028c8:	079a      	lsls	r2, r3, #30
 80028ca:	d5f7      	bpl.n	80028bc <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 80028cc:	2d00      	cmp	r5, #0
 80028ce:	f43f af4d 	beq.w	800276c <HAL_RCC_OscConfig+0x148>
 80028d2:	e044      	b.n	800295e <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 80028d4:	4a42      	ldr	r2, [pc, #264]	@ (80029e0 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4e43      	ldr	r6, [pc, #268]	@ (80029e4 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 80028d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80028da:	f7ff f8c5 	bl	8001a68 <HAL_GetTick>
 80028de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e0:	e004      	b.n	80028ec <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e2:	f7ff f8c1 	bl	8001a68 <HAL_GetTick>
 80028e6:	1b40      	subs	r0, r0, r5
 80028e8:	2802      	cmp	r0, #2
 80028ea:	d8d1      	bhi.n	8002890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ec:	6833      	ldr	r3, [r6, #0]
 80028ee:	0799      	lsls	r1, r3, #30
 80028f0:	d4f7      	bmi.n	80028e2 <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	e6fb      	b.n	80026ee <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	f43f af78 	beq.w	80027ec <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80028fc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fe:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002900:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002904:	4291      	cmp	r1, r2
 8002906:	f47f af71 	bne.w	80027ec <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800290c:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002910:	4291      	cmp	r1, r2
 8002912:	f47f af6b 	bne.w	80027ec <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002916:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002918:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800291c:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002922:	f47f af63 	bne.w	80027ec <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002926:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002928:	0852      	lsrs	r2, r2, #1
 800292a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800292e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002930:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002934:	f47f af5a 	bne.w	80027ec <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002938:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800293a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002942:	bf14      	ite	ne
 8002944:	2001      	movne	r0, #1
 8002946:	2000      	moveq	r0, #0
 8002948:	e72d      	b.n	80027a6 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294a:	4b26      	ldr	r3, [pc, #152]	@ (80029e4 <HAL_RCC_OscConfig+0x3c0>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800295a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800295c:	e76e      	b.n	800283c <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800295e:	4a21      	ldr	r2, [pc, #132]	@ (80029e4 <HAL_RCC_OscConfig+0x3c0>)
 8002960:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002966:	6413      	str	r3, [r2, #64]	@ 0x40
 8002968:	e700      	b.n	800276c <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296a:	4b1e      	ldr	r3, [pc, #120]	@ (80029e4 <HAL_RCC_OscConfig+0x3c0>)
 800296c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800296e:	f042 0204 	orr.w	r2, r2, #4
 8002972:	671a      	str	r2, [r3, #112]	@ 0x70
 8002974:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297c:	e791      	b.n	80028a2 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800297e:	f7ff f873 	bl	8001a68 <HAL_GetTick>
 8002982:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002984:	e005      	b.n	8002992 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002986:	f7ff f86f 	bl	8001a68 <HAL_GetTick>
 800298a:	1b80      	subs	r0, r0, r6
 800298c:	2802      	cmp	r0, #2
 800298e:	f63f af7f 	bhi.w	8002890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	682b      	ldr	r3, [r5, #0]
 8002994:	0199      	lsls	r1, r3, #6
 8002996:	d4f6      	bmi.n	8002986 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002998:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800299c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800299e:	430b      	orrs	r3, r1
 80029a0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80029a4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 80029a8:	0852      	lsrs	r2, r2, #1
 80029aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80029ae:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80029b0:	490b      	ldr	r1, [pc, #44]	@ (80029e0 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80029b6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80029ba:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80029bc:	f7ff f854 	bl	8001a68 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	4d08      	ldr	r5, [pc, #32]	@ (80029e4 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 80029c2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	e005      	b.n	80029d2 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c6:	f7ff f84f 	bl	8001a68 <HAL_GetTick>
 80029ca:	1b00      	subs	r0, r0, r4
 80029cc:	2802      	cmp	r0, #2
 80029ce:	f63f af5f 	bhi.w	8002890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	682b      	ldr	r3, [r5, #0]
 80029d4:	019a      	lsls	r2, r3, #6
 80029d6:	d5f6      	bpl.n	80029c6 <HAL_RCC_OscConfig+0x3a2>
 80029d8:	e6e4      	b.n	80027a4 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 80029da:	2001      	movs	r0, #1
}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	42470000 	.word	0x42470000
 80029e4:	40023800 	.word	0x40023800

080029e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e8:	4916      	ldr	r1, [pc, #88]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80029ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ec:	688b      	ldr	r3, [r1, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d01b      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x46>
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d117      	bne.n	8002a2a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029fa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a00:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a04:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a08:	d113      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0a:	480f      	ldr	r0, [pc, #60]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x60>)
 8002a0c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002a10:	fba1 0100 	umull	r0, r1, r1, r0
 8002a14:	f7fe f894 	bl	8000b40 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002a20:	3301      	adds	r3, #1
 8002a22:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002a24:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002a28:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002a2a:	4807      	ldr	r0, [pc, #28]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002a2c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a2e:	4807      	ldr	r0, [pc, #28]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002a30:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a32:	4806      	ldr	r0, [pc, #24]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x64>)
 8002a34:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002a38:	2300      	movs	r3, #0
 8002a3a:	fba1 0100 	umull	r0, r1, r1, r0
 8002a3e:	f7fe f87f 	bl	8000b40 <__aeabi_uldivmod>
 8002a42:	e7e9      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x30>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	00f42400 	.word	0x00f42400
 8002a4c:	007a1200 	.word	0x007a1200

08002a50 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002a50:	2800      	cmp	r0, #0
 8002a52:	f000 8087 	beq.w	8002b64 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a56:	4a48      	ldr	r2, [pc, #288]	@ (8002b78 <HAL_RCC_ClockConfig+0x128>)
 8002a58:	6813      	ldr	r3, [r2, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	428b      	cmp	r3, r1
{
 8002a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a64:	460d      	mov	r5, r1
 8002a66:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	d209      	bcs.n	8002a7e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	b2cb      	uxtb	r3, r1
 8002a6c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	6813      	ldr	r3, [r2, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	428b      	cmp	r3, r1
 8002a76:	d002      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
}
 8002a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	0798      	lsls	r0, r3, #30
 8002a82:	d514      	bpl.n	8002aae <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	0759      	lsls	r1, r3, #29
 8002a86:	d504      	bpl.n	8002a92 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a88:	493c      	ldr	r1, [pc, #240]	@ (8002b7c <HAL_RCC_ClockConfig+0x12c>)
 8002a8a:	688a      	ldr	r2, [r1, #8]
 8002a8c:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002a90:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a92:	071a      	lsls	r2, r3, #28
 8002a94:	d504      	bpl.n	8002aa0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a96:	4939      	ldr	r1, [pc, #228]	@ (8002b7c <HAL_RCC_ClockConfig+0x12c>)
 8002a98:	688a      	ldr	r2, [r1, #8]
 8002a9a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8002a9e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4936      	ldr	r1, [pc, #216]	@ (8002b7c <HAL_RCC_ClockConfig+0x12c>)
 8002aa2:	68a0      	ldr	r0, [r4, #8]
 8002aa4:	688a      	ldr	r2, [r1, #8]
 8002aa6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002aaa:	4302      	orrs	r2, r0
 8002aac:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aae:	07df      	lsls	r7, r3, #31
 8002ab0:	d521      	bpl.n	8002af6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	6862      	ldr	r2, [r4, #4]
 8002ab4:	2a01      	cmp	r2, #1
 8002ab6:	d057      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab8:	1e93      	subs	r3, r2, #2
 8002aba:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b7c <HAL_RCC_ClockConfig+0x12c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac0:	d94d      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	0799      	lsls	r1, r3, #30
 8002ac4:	d5d8      	bpl.n	8002a78 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac6:	4e2d      	ldr	r6, [pc, #180]	@ (8002b7c <HAL_RCC_ClockConfig+0x12c>)
 8002ac8:	68b3      	ldr	r3, [r6, #8]
 8002aca:	f023 0303 	bic.w	r3, r3, #3
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002ad2:	f7fe ffc9 	bl	8001a68 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad6:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002ada:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002adc:	e004      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ade:	f7fe ffc3 	bl	8001a68 <HAL_GetTick>
 8002ae2:	1bc0      	subs	r0, r0, r7
 8002ae4:	4540      	cmp	r0, r8
 8002ae6:	d844      	bhi.n	8002b72 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae8:	68b3      	ldr	r3, [r6, #8]
 8002aea:	6862      	ldr	r2, [r4, #4]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002af4:	d1f3      	bne.n	8002ade <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af6:	4a20      	ldr	r2, [pc, #128]	@ (8002b78 <HAL_RCC_ClockConfig+0x128>)
 8002af8:	6813      	ldr	r3, [r2, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	42ab      	cmp	r3, r5
 8002b00:	d906      	bls.n	8002b10 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	b2eb      	uxtb	r3, r5
 8002b04:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	42ab      	cmp	r3, r5
 8002b0e:	d1b3      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	075a      	lsls	r2, r3, #29
 8002b14:	d506      	bpl.n	8002b24 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b16:	4919      	ldr	r1, [pc, #100]	@ (8002b7c <HAL_RCC_ClockConfig+0x12c>)
 8002b18:	68e0      	ldr	r0, [r4, #12]
 8002b1a:	688a      	ldr	r2, [r1, #8]
 8002b1c:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8002b20:	4302      	orrs	r2, r0
 8002b22:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	071b      	lsls	r3, r3, #28
 8002b26:	d507      	bpl.n	8002b38 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b28:	4a14      	ldr	r2, [pc, #80]	@ (8002b7c <HAL_RCC_ClockConfig+0x12c>)
 8002b2a:	6921      	ldr	r1, [r4, #16]
 8002b2c:	6893      	ldr	r3, [r2, #8]
 8002b2e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002b32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b36:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b38:	f7ff ff56 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b7c <HAL_RCC_ClockConfig+0x12c>)
 8002b3e:	4c10      	ldr	r4, [pc, #64]	@ (8002b80 <HAL_RCC_ClockConfig+0x130>)
 8002b40:	6892      	ldr	r2, [r2, #8]
 8002b42:	4910      	ldr	r1, [pc, #64]	@ (8002b84 <HAL_RCC_ClockConfig+0x134>)
 8002b44:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002b48:	4603      	mov	r3, r0
 8002b4a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002b4c:	480e      	ldr	r0, [pc, #56]	@ (8002b88 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b4e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002b50:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b52:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002b54:	f7fe ff3e 	bl	80019d4 <HAL_InitTick>
  return HAL_OK;
 8002b58:	2000      	movs	r0, #0
}
 8002b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	0198      	lsls	r0, r3, #6
 8002b60:	d4b1      	bmi.n	8002ac6 <HAL_RCC_ClockConfig+0x76>
 8002b62:	e789      	b.n	8002a78 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002b64:	2001      	movs	r0, #1
}
 8002b66:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <HAL_RCC_ClockConfig+0x12c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	039e      	lsls	r6, r3, #14
 8002b6e:	d4aa      	bmi.n	8002ac6 <HAL_RCC_ClockConfig+0x76>
 8002b70:	e782      	b.n	8002a78 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002b72:	2003      	movs	r0, #3
 8002b74:	e781      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2a>
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08003870 	.word	0x08003870
 8002b84:	20000018 	.word	0x20000018
 8002b88:	20000020 	.word	0x20000020

08002b8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b8c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b8e:	6803      	ldr	r3, [r0, #0]
 8002b90:	f013 0f05 	tst.w	r3, #5
{
 8002b94:	b083      	sub	sp, #12
 8002b96:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b98:	d104      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b9a:	0798      	lsls	r0, r3, #30
 8002b9c:	d43b      	bmi.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b9e:	2000      	movs	r0, #0
}
 8002ba0:	b003      	add	sp, #12
 8002ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002ba4:	4b45      	ldr	r3, [pc, #276]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ba6:	4e46      	ldr	r6, [pc, #280]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002ba8:	2200      	movs	r2, #0
 8002baa:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002bac:	f7fe ff5c 	bl	8001a68 <HAL_GetTick>
 8002bb0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bb2:	e004      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x32>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bb4:	f7fe ff58 	bl	8001a68 <HAL_GetTick>
 8002bb8:	1b43      	subs	r3, r0, r5
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d828      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bbe:	6833      	ldr	r3, [r6, #0]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	d4f7      	bmi.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002bc4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 8002bc8:	071b      	lsls	r3, r3, #28
 8002bca:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 8002bce:	4a3b      	ldr	r2, [pc, #236]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd0:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	6693      	str	r3, [r2, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002bd8:	f7fe ff46 	bl	8001a68 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bdc:	4e38      	ldr	r6, [pc, #224]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    tickstart = HAL_GetTick();
 8002bde:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002be0:	e004      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x60>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002be2:	f7fe ff41 	bl	8001a68 <HAL_GetTick>
 8002be6:	1b43      	subs	r3, r0, r5
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d811      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bec:	6833      	ldr	r3, [r6, #0]
 8002bee:	011f      	lsls	r7, r3, #4
 8002bf0:	d5f7      	bpl.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x56>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	e7d1      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8002bf6:	f7fe ff37 	bl	8001a68 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8002bfe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002c02:	079b      	lsls	r3, r3, #30
 8002c04:	d43c      	bmi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fe ff2f 	bl	8001a68 <HAL_GetTick>
 8002c0a:	1b80      	subs	r0, r0, r6
 8002c0c:	42b8      	cmp	r0, r7
 8002c0e:	d9f7      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x74>
        return HAL_TIMEOUT;
 8002c10:	2003      	movs	r0, #3
}
 8002c12:	b003      	add	sp, #12
 8002c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    PWR->CR |= PWR_CR_DBP;
 8002c18:	4d2a      	ldr	r5, [pc, #168]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	9201      	str	r2, [sp, #4]
 8002c1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c20:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002c24:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c36:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002c38:	f7fe ff16 	bl	8001a68 <HAL_GetTick>
 8002c3c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c3e:	e004      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xbe>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c40:	f7fe ff12 	bl	8001a68 <HAL_GetTick>
 8002c44:	1b83      	subs	r3, r0, r6
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d8e2      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c4a:	682b      	ldr	r3, [r5, #0]
 8002c4c:	05d9      	lsls	r1, r3, #23
 8002c4e:	d5f7      	bpl.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c50:	4d1b      	ldr	r5, [pc, #108]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c52:	68e3      	ldr	r3, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c54:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c56:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8002c5a:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8002c5e:	d012      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002c60:	428a      	cmp	r2, r1
 8002c62:	d010      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c64:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c66:	4a15      	ldr	r2, [pc, #84]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c68:	2101      	movs	r1, #1
 8002c6a:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	2100      	movs	r1, #0
 8002c74:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8002c78:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c7a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002c7c:	07da      	lsls	r2, r3, #31
 8002c7e:	d4ba      	bmi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c80:	68e3      	ldr	r3, [r4, #12]
 8002c82:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8002c86:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8002c8a:	d00b      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8002c8c:	490c      	ldr	r1, [pc, #48]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c8e:	688a      	ldr	r2, [r1, #8]
 8002c90:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002c94:	608a      	str	r2, [r1, #8]
 8002c96:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c98:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8002c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca2:	e77c      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x12>
 8002ca4:	4806      	ldr	r0, [pc, #24]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ca6:	6882      	ldr	r2, [r0, #8]
 8002ca8:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002cac:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8002cb0:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	6082      	str	r2, [r0, #8]
 8002cb8:	e7ed      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8002cba:	bf00      	nop
 8002cbc:	42470000 	.word	0x42470000
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40007000 	.word	0x40007000

08002cc8 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002cc8:	6803      	ldr	r3, [r0, #0]
{
 8002cca:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ccc:	68dc      	ldr	r4, [r3, #12]
 8002cce:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8002cd2:	d002      	beq.n	8002cda <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8002cd4:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 8002ce4:	f7fe fec0 	bl	8001a68 <HAL_GetTick>
 8002ce8:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cea:	682b      	ldr	r3, [r5, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	065b      	lsls	r3, r3, #25
 8002cf0:	d4f1      	bmi.n	8002cd6 <RTC_EnterInitMode+0xe>
 8002cf2:	2c00      	cmp	r4, #0
 8002cf4:	d1ef      	bne.n	8002cd6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cf6:	f7fe feb7 	bl	8001a68 <HAL_GetTick>
 8002cfa:	1b83      	subs	r3, r0, r6
 8002cfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d00:	d9f3      	bls.n	8002cea <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d02:	2304      	movs	r3, #4
 8002d04:	776b      	strb	r3, [r5, #29]
        status = HAL_ERROR;
 8002d06:	2401      	movs	r4, #1
 8002d08:	e7ef      	b.n	8002cea <RTC_EnterInitMode+0x22>
 8002d0a:	bf00      	nop

08002d0c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d0c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d0e:	6803      	ldr	r3, [r0, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d16:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	0692      	lsls	r2, r2, #26
 8002d1c:	d501      	bpl.n	8002d22 <RTC_ExitInitMode+0x16>
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8002d20:	bd38      	pop	{r3, r4, r5, pc}
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002d22:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <RTC_ExitInitMode+0x40>)
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8002d28:	f7fe fe9e 	bl	8001a68 <HAL_GetTick>
 8002d2c:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	069b      	lsls	r3, r3, #26
 8002d34:	d4f3      	bmi.n	8002d1e <RTC_ExitInitMode+0x12>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d36:	f7fe fe97 	bl	8001a68 <HAL_GetTick>
 8002d3a:	1b43      	subs	r3, r0, r5
 8002d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d40:	d9f5      	bls.n	8002d2e <RTC_ExitInitMode+0x22>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d42:	2304      	movs	r3, #4
 8002d44:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
}
 8002d48:	bd38      	pop	{r3, r4, r5, pc}
 8002d4a:	bf00      	nop
 8002d4c:	00017f5f 	.word	0x00017f5f

08002d50 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d045      	beq.n	8002de0 <HAL_RTC_Init+0x90>
{
 8002d54:	b538      	push	{r3, r4, r5, lr}
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d56:	7f43      	ldrb	r3, [r0, #29]
 8002d58:	4604      	mov	r4, r0
 8002d5a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002d5e:	b14b      	cbz	r3, 8002d74 <HAL_RTC_Init+0x24>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d60:	2202      	movs	r2, #2
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d62:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d64:	7762      	strb	r2, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	06d2      	lsls	r2, r2, #27
 8002d6a:	d507      	bpl.n	8002d7c <HAL_RTC_Init+0x2c>
    hrtc->State = HAL_RTC_STATE_READY;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	7763      	strb	r3, [r4, #29]
 8002d70:	2000      	movs	r0, #0
}
 8002d72:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002d74:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002d76:	f7fe fb7f 	bl	8001478 <HAL_RTC_MspInit>
 8002d7a:	e7f1      	b.n	8002d60 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d7c:	21ca      	movs	r1, #202	@ 0xca
 8002d7e:	2253      	movs	r2, #83	@ 0x53
 8002d80:	6259      	str	r1, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8002d82:	4620      	mov	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d84:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8002d86:	f7ff ff9f 	bl	8002cc8 <RTC_EnterInitMode>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d8a:	6823      	ldr	r3, [r4, #0]
    if (status == HAL_OK)
 8002d8c:	b110      	cbz	r0, 8002d94 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d8e:	22ff      	movs	r2, #255	@ 0xff
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002d92:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d94:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d96:	6862      	ldr	r2, [r4, #4]
 8002d98:	6925      	ldr	r5, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d9a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8002d9e:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8002da2:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002da4:	6961      	ldr	r1, [r4, #20]
 8002da6:	6898      	ldr	r0, [r3, #8]
 8002da8:	432a      	orrs	r2, r5
 8002daa:	430a      	orrs	r2, r1
 8002dac:	4302      	orrs	r2, r0
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002dae:	68e1      	ldr	r1, [r4, #12]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002db0:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002db2:	6119      	str	r1, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	68a1      	ldr	r1, [r4, #8]
 8002db8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dbc:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7ff ffa4 	bl	8002d0c <RTC_ExitInitMode>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002dc4:	6823      	ldr	r3, [r4, #0]
    if (status == HAL_OK)
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d1e1      	bne.n	8002d8e <HAL_RTC_Init+0x3e>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002dca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002dcc:	69a0      	ldr	r0, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002dce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dd6:	21ff      	movs	r1, #255	@ 0xff
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002dd8:	4302      	orrs	r2, r0
 8002dda:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ddc:	6259      	str	r1, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002dde:	e7c5      	b.n	8002d6c <HAL_RTC_Init+0x1c>
    return HAL_ERROR;
 8002de0:	2001      	movs	r0, #1
}
 8002de2:	4770      	bx	lr

08002de4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002de4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de6:	6a02      	ldr	r2, [r0, #32]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	6202      	str	r2, [r0, #32]
{
 8002dee:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002df2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002df6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002dfa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dfc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002dfe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002e02:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e04:	4d0e      	ldr	r5, [pc, #56]	@ (8002e40 <TIM_OC1_SetConfig+0x5c>)
 8002e06:	42a8      	cmp	r0, r5
 8002e08:	d00a      	beq.n	8002e20 <TIM_OC1_SetConfig+0x3c>
 8002e0a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002e0e:	42a8      	cmp	r0, r5
 8002e10:	d006      	beq.n	8002e20 <TIM_OC1_SetConfig+0x3c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e12:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002e14:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e16:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002e18:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8002e1a:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8002e1c:	6203      	str	r3, [r0, #32]
}
 8002e1e:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8002e20:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e22:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002e26:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e28:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e2c:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e30:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e34:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e38:	ea4c 0404 	orr.w	r4, ip, r4
 8002e3c:	e7e9      	b.n	8002e12 <TIM_OC1_SetConfig+0x2e>
 8002e3e:	bf00      	nop
 8002e40:	40010000 	.word	0x40010000

08002e44 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e44:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e46:	6a02      	ldr	r2, [r0, #32]
 8002e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e4c:	6202      	str	r2, [r0, #32]
{
 8002e4e:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e52:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e56:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002e5a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e5c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002e5e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e62:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e66:	4d0f      	ldr	r5, [pc, #60]	@ (8002ea4 <TIM_OC3_SetConfig+0x60>)
 8002e68:	42a8      	cmp	r0, r5
 8002e6a:	d00a      	beq.n	8002e82 <TIM_OC3_SetConfig+0x3e>
 8002e6c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002e70:	42a8      	cmp	r0, r5
 8002e72:	d006      	beq.n	8002e82 <TIM_OC3_SetConfig+0x3e>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e74:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002e76:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002e78:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002e7a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8002e7c:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8002e7e:	6203      	str	r3, [r0, #32]
}
 8002e80:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e82:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e88:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e8c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e90:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e94:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e9c:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
 8002ea0:	e7e8      	b.n	8002e74 <TIM_OC3_SetConfig+0x30>
 8002ea2:	bf00      	nop
 8002ea4:	40010000 	.word	0x40010000

08002ea8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eaa:	6a02      	ldr	r2, [r0, #32]
 8002eac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002eb0:	6202      	str	r2, [r0, #32]
{
 8002eb2:	b430      	push	{r4, r5}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eb6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eba:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ec2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ec8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ecc:	4d09      	ldr	r5, [pc, #36]	@ (8002ef4 <TIM_OC4_SetConfig+0x4c>)
 8002ece:	42a8      	cmp	r0, r5
 8002ed0:	d00a      	beq.n	8002ee8 <TIM_OC4_SetConfig+0x40>
 8002ed2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002ed6:	42a8      	cmp	r0, r5
 8002ed8:	d006      	beq.n	8002ee8 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002eda:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002edc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002ede:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002ee0:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 8002ee2:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8002ee4:	6203      	str	r3, [r0, #32]
}
 8002ee6:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002eea:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eee:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002ef2:	e7f2      	b.n	8002eda <TIM_OC4_SetConfig+0x32>
 8002ef4:	40010000 	.word	0x40010000

08002ef8 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop

08002efc <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop

08002f00 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002f00:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d071      	beq.n	8002fec <HAL_TIM_ConfigClockSource+0xec>
 8002f08:	4602      	mov	r2, r0
{
 8002f0a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8002f0e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8002f14:	2001      	movs	r0, #1
 8002f16:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002f1a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f20:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002f24:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f26:	680b      	ldr	r3, [r1, #0]
 8002f28:	2b60      	cmp	r3, #96	@ 0x60
 8002f2a:	d061      	beq.n	8002ff0 <HAL_TIM_ConfigClockSource+0xf0>
 8002f2c:	d824      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
 8002f2e:	2b40      	cmp	r3, #64	@ 0x40
 8002f30:	d077      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x122>
 8002f32:	d94a      	bls.n	8002fca <HAL_TIM_ConfigClockSource+0xca>
 8002f34:	2b50      	cmp	r3, #80	@ 0x50
 8002f36:	d117      	bne.n	8002f68 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8002f38:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002f3a:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f3c:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002f42:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f44:	6a23      	ldr	r3, [r4, #32]
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f4c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f52:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f56:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002f58:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f5a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f60:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f64:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002f6a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002f70:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8002f74:	bc30      	pop	{r4, r5}
 8002f76:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f7c:	d0f3      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x66>
 8002f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f82:	d110      	bne.n	8002fa6 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f84:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002f88:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f8a:	432b      	orrs	r3, r5
 8002f8c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8e:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002f96:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f98:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f9a:	68a3      	ldr	r3, [r4, #8]
 8002f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa0:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e7e0      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002fa6:	2b70      	cmp	r3, #112	@ 0x70
 8002fa8:	d1de      	bne.n	8002f68 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002faa:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002fae:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fb0:	432b      	orrs	r3, r5
 8002fb2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb4:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fb8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002fbc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002fbe:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002fc0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fc2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002fc6:	60a3      	str	r3, [r4, #8]
      break;
 8002fc8:	e7cd      	b.n	8002f66 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	d002      	beq.n	8002fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8002fce:	d909      	bls.n	8002fe4 <HAL_TIM_ConfigClockSource+0xe4>
 8002fd0:	2b30      	cmp	r3, #48	@ 0x30
 8002fd2:	d1c9      	bne.n	8002f68 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8002fd4:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002fe0:	60a3      	str	r3, [r4, #8]
}
 8002fe2:	e7c0      	b.n	8002f66 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8002fe4:	f033 0110 	bics.w	r1, r3, #16
 8002fe8:	d1be      	bne.n	8002f68 <HAL_TIM_ConfigClockSource+0x68>
 8002fea:	e7f3      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8002fec:	2002      	movs	r0, #2
}
 8002fee:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8002ff0:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8002ff2:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002ff4:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff6:	6a21      	ldr	r1, [r4, #32]
 8002ff8:	f021 0110 	bic.w	r1, r1, #16
 8002ffc:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ffe:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003000:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003004:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8003008:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800300c:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003010:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8003012:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003014:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301a:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800301e:	60a3      	str	r3, [r4, #8]
}
 8003020:	e7a1      	b.n	8002f66 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8003022:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003024:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8003026:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003028:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800302c:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800302e:	6a23      	ldr	r3, [r4, #32]
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003036:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003038:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800303c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003040:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003042:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003044:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800304a:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800304e:	60a3      	str	r3, [r4, #8]
}
 8003050:	e789      	b.n	8002f66 <HAL_TIM_ConfigClockSource+0x66>
 8003052:	bf00      	nop

08003054 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop

08003058 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop

0800305c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop

08003060 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop

08003064 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop

08003068 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8003068:	6803      	ldr	r3, [r0, #0]
{
 800306a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800306c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800306e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003070:	07a9      	lsls	r1, r5, #30
{
 8003072:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003074:	d501      	bpl.n	800307a <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003076:	07b2      	lsls	r2, r6, #30
 8003078:	d451      	bmi.n	800311e <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800307a:	0769      	lsls	r1, r5, #29
 800307c:	d501      	bpl.n	8003082 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800307e:	0772      	lsls	r2, r6, #29
 8003080:	d43a      	bmi.n	80030f8 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003082:	072b      	lsls	r3, r5, #28
 8003084:	d501      	bpl.n	800308a <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003086:	0730      	lsls	r0, r6, #28
 8003088:	d424      	bmi.n	80030d4 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800308a:	06ea      	lsls	r2, r5, #27
 800308c:	d501      	bpl.n	8003092 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800308e:	06f3      	lsls	r3, r6, #27
 8003090:	d410      	bmi.n	80030b4 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003092:	07e8      	lsls	r0, r5, #31
 8003094:	d501      	bpl.n	800309a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003096:	07f1      	lsls	r1, r6, #31
 8003098:	d457      	bmi.n	800314a <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800309a:	062a      	lsls	r2, r5, #24
 800309c:	d501      	bpl.n	80030a2 <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800309e:	0633      	lsls	r3, r6, #24
 80030a0:	d45b      	bmi.n	800315a <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030a2:	0668      	lsls	r0, r5, #25
 80030a4:	d501      	bpl.n	80030aa <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030a6:	0671      	lsls	r1, r6, #25
 80030a8:	d45f      	bmi.n	800316a <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030aa:	06aa      	lsls	r2, r5, #26
 80030ac:	d501      	bpl.n	80030b2 <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030ae:	06b3      	lsls	r3, r6, #26
 80030b0:	d442      	bmi.n	8003138 <HAL_TIM_IRQHandler+0xd0>
}
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	f06f 0210 	mvn.w	r2, #16
 80030ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030bc:	2208      	movs	r2, #8
 80030be:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c8:	d063      	beq.n	8003192 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	f7ff ffc7 	bl	800305c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	2300      	movs	r3, #0
 80030d0:	7723      	strb	r3, [r4, #28]
 80030d2:	e7de      	b.n	8003092 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	f06f 0208 	mvn.w	r2, #8
 80030da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030dc:	2204      	movs	r2, #4
 80030de:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80030e4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e6:	d151      	bne.n	800318c <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e8:	f7ff ffb6 	bl	8003058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	4620      	mov	r0, r4
 80030ee:	f7ff ffb7 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	2300      	movs	r3, #0
 80030f4:	7723      	strb	r3, [r4, #28]
 80030f6:	e7c8      	b.n	800308a <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	f06f 0204 	mvn.w	r2, #4
 80030fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003100:	2202      	movs	r2, #2
 8003102:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800310c:	d13b      	bne.n	8003186 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	f7ff ffa3 	bl	8003058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003112:	4620      	mov	r0, r4
 8003114:	f7ff ffa4 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003118:	2300      	movs	r3, #0
 800311a:	7723      	strb	r3, [r4, #28]
 800311c:	e7b1      	b.n	8003082 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800311e:	f06f 0202 	mvn.w	r2, #2
 8003122:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003124:	2201      	movs	r2, #1
 8003126:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	079b      	lsls	r3, r3, #30
 800312c:	d025      	beq.n	800317a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800312e:	f7ff ff95 	bl	800305c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	2300      	movs	r3, #0
 8003134:	7723      	strb	r3, [r4, #28]
 8003136:	e7a0      	b.n	800307a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800313e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003140:	611a      	str	r2, [r3, #16]
}
 8003142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003146:	f000 ba4b 	b.w	80035e0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	f06f 0201 	mvn.w	r2, #1
 8003150:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003152:	4620      	mov	r0, r4
 8003154:	f7ff ff7e 	bl	8003054 <HAL_TIM_PeriodElapsedCallback>
 8003158:	e79f      	b.n	800309a <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003160:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003162:	4620      	mov	r0, r4
 8003164:	f000 fa3e 	bl	80035e4 <HAL_TIMEx_BreakCallback>
 8003168:	e79b      	b.n	80030a2 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003170:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003172:	4620      	mov	r0, r4
 8003174:	f7ff ff76 	bl	8003064 <HAL_TIM_TriggerCallback>
 8003178:	e797      	b.n	80030aa <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	f7ff ff6d 	bl	8003058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317e:	4620      	mov	r0, r4
 8003180:	f7ff ff6e 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
 8003184:	e7d5      	b.n	8003132 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	f7ff ff69 	bl	800305c <HAL_TIM_IC_CaptureCallback>
 800318a:	e7c5      	b.n	8003118 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 800318c:	f7ff ff66 	bl	800305c <HAL_TIM_IC_CaptureCallback>
 8003190:	e7af      	b.n	80030f2 <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	f7ff ff61 	bl	8003058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003196:	4620      	mov	r0, r4
 8003198:	f7ff ff62 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
 800319c:	e797      	b.n	80030ce <HAL_TIM_IRQHandler+0x66>
 800319e:	bf00      	nop

080031a0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a0:	4a34      	ldr	r2, [pc, #208]	@ (8003274 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 80031a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a4:	4290      	cmp	r0, r2
{
 80031a6:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a8:	d050      	beq.n	800324c <TIM_Base_SetConfig+0xac>
 80031aa:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80031ae:	d03b      	beq.n	8003228 <TIM_Base_SetConfig+0x88>
 80031b0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80031b4:	4290      	cmp	r0, r2
 80031b6:	d037      	beq.n	8003228 <TIM_Base_SetConfig+0x88>
 80031b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031bc:	4290      	cmp	r0, r2
 80031be:	d033      	beq.n	8003228 <TIM_Base_SetConfig+0x88>
 80031c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031c4:	4290      	cmp	r0, r2
 80031c6:	d02f      	beq.n	8003228 <TIM_Base_SetConfig+0x88>
 80031c8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80031cc:	4290      	cmp	r0, r2
 80031ce:	d03d      	beq.n	800324c <TIM_Base_SetConfig+0xac>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d0:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80031d4:	4290      	cmp	r0, r2
 80031d6:	d02b      	beq.n	8003230 <TIM_Base_SetConfig+0x90>
 80031d8:	4a27      	ldr	r2, [pc, #156]	@ (8003278 <TIM_Base_SetConfig+0xd8>)
 80031da:	4290      	cmp	r0, r2
 80031dc:	d028      	beq.n	8003230 <TIM_Base_SetConfig+0x90>
 80031de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031e2:	4290      	cmp	r0, r2
 80031e4:	d024      	beq.n	8003230 <TIM_Base_SetConfig+0x90>
 80031e6:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80031ea:	4290      	cmp	r0, r2
 80031ec:	d020      	beq.n	8003230 <TIM_Base_SetConfig+0x90>
 80031ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031f2:	4290      	cmp	r0, r2
 80031f4:	d01c      	beq.n	8003230 <TIM_Base_SetConfig+0x90>
 80031f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031fa:	4290      	cmp	r0, r2
 80031fc:	d018      	beq.n	8003230 <TIM_Base_SetConfig+0x90>
  TIMx->PSC = Structure->Prescaler;
 80031fe:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003200:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003202:	6949      	ldr	r1, [r1, #20]
 8003204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003208:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800320a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800320c:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800320e:	6282      	str	r2, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003210:	2301      	movs	r3, #1
 8003212:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003214:	6903      	ldr	r3, [r0, #16]
 8003216:	07db      	lsls	r3, r3, #31
 8003218:	d503      	bpl.n	8003222 <TIM_Base_SetConfig+0x82>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800321a:	6903      	ldr	r3, [r0, #16]
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6103      	str	r3, [r0, #16]
}
 8003222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003226:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003228:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800322a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800322e:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003230:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003232:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003238:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800323a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800323e:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003240:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8003242:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003244:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003246:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003248:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800324a:	e7e1      	b.n	8003210 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= Structure->CounterMode;
 800324c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003254:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8003256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800325c:	694a      	ldr	r2, [r1, #20]
 800325e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003262:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003264:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003266:	688b      	ldr	r3, [r1, #8]
 8003268:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800326a:	680b      	ldr	r3, [r1, #0]
 800326c:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800326e:	690b      	ldr	r3, [r1, #16]
 8003270:	6303      	str	r3, [r0, #48]	@ 0x30
 8003272:	e7cd      	b.n	8003210 <TIM_Base_SetConfig+0x70>
 8003274:	40010000 	.word	0x40010000
 8003278:	40014400 	.word	0x40014400

0800327c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800327c:	b350      	cbz	r0, 80032d4 <HAL_TIM_Base_Init+0x58>
{
 800327e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003280:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003284:	4604      	mov	r4, r0
 8003286:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800328a:	b1f3      	cbz	r3, 80032ca <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003294:	f851 0b04 	ldr.w	r0, [r1], #4
 8003298:	f7ff ff82 	bl	80031a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	2301      	movs	r3, #1
 800329e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80032a6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80032aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80032ae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032ba:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80032be:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80032c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80032c6:	2000      	movs	r0, #0
}
 80032c8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80032ca:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80032ce:	f7fe f8f7 	bl	80014c0 <HAL_TIM_Base_MspInit>
 80032d2:	e7db      	b.n	800328c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80032d4:	2001      	movs	r0, #1
}
 80032d6:	4770      	bx	lr

080032d8 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80032d8:	b350      	cbz	r0, 8003330 <HAL_TIM_OC_Init+0x58>
{
 80032da:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80032dc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80032e0:	4604      	mov	r4, r0
 80032e2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80032e6:	b1f3      	cbz	r3, 8003326 <HAL_TIM_OC_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80032e8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80032ea:	2302      	movs	r3, #2
 80032ec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80032f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80032f4:	f7ff ff54 	bl	80031a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003302:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003306:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800330a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003316:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800331a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800331e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003322:	2000      	movs	r0, #0
}
 8003324:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003326:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 800332a:	f7ff fde5 	bl	8002ef8 <HAL_TIM_OC_MspInit>
 800332e:	e7db      	b.n	80032e8 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 8003330:	2001      	movs	r0, #1
}
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003334:	b350      	cbz	r0, 800338c <HAL_TIM_PWM_Init+0x58>
{
 8003336:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003338:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800333c:	4604      	mov	r4, r0
 800333e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003342:	b1f3      	cbz	r3, 8003382 <HAL_TIM_PWM_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003344:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003346:	2302      	movs	r3, #2
 8003348:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003350:	f7ff ff26 	bl	80031a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003354:	2301      	movs	r3, #1
 8003356:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800335e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003362:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003366:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800336e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003372:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003376:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800337a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800337e:	2000      	movs	r0, #0
}
 8003380:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003382:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003386:	f7ff fdb9 	bl	8002efc <HAL_TIM_PWM_MspInit>
 800338a:	e7db      	b.n	8003344 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 800338c:	2001      	movs	r0, #1
}
 800338e:	4770      	bx	lr

08003390 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8003390:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003392:	6a02      	ldr	r2, [r0, #32]
 8003394:	f022 0210 	bic.w	r2, r2, #16
 8003398:	6202      	str	r2, [r0, #32]
{
 800339a:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 800339c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800339e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033aa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80033ac:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033b4:	4d0e      	ldr	r5, [pc, #56]	@ (80033f0 <TIM_OC2_SetConfig+0x60>)
 80033b6:	42a8      	cmp	r0, r5
 80033b8:	d00a      	beq.n	80033d0 <TIM_OC2_SetConfig+0x40>
 80033ba:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033be:	42a8      	cmp	r0, r5
 80033c0:	d006      	beq.n	80033d0 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 80033c2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80033c4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80033c6:	6182      	str	r2, [r0, #24]
}
 80033c8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80033ca:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80033cc:	6203      	str	r3, [r0, #32]
}
 80033ce:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033da:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033de:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033e2:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033ea:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 80033ee:	e7e8      	b.n	80033c2 <TIM_OC2_SetConfig+0x32>
 80033f0:	40010000 	.word	0x40010000

080033f4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80033f4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d025      	beq.n	8003448 <HAL_TIM_OC_ConfigChannel+0x54>
{
 80033fc:	b510      	push	{r4, lr}
 80033fe:	4604      	mov	r4, r0
  switch (Channel)
 8003400:	2a0c      	cmp	r2, #12
 8003402:	d808      	bhi.n	8003416 <HAL_TIM_OC_ConfigChannel+0x22>
 8003404:	e8df f002 	tbb	[pc, r2]
 8003408:	07070714 	.word	0x07070714
 800340c:	07070718 	.word	0x07070718
 8003410:	0707071c 	.word	0x0707071c
 8003414:	0c          	.byte	0x0c
 8003415:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8003416:	2300      	movs	r3, #0
 8003418:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 800341c:	2001      	movs	r0, #1
}
 800341e:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003420:	6800      	ldr	r0, [r0, #0]
 8003422:	f7ff fd41 	bl	8002ea8 <TIM_OC4_SetConfig>
  __HAL_UNLOCK(htim);
 8003426:	2300      	movs	r3, #0
 8003428:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800342c:	2000      	movs	r0, #0
}
 800342e:	bd10      	pop	{r4, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003430:	6800      	ldr	r0, [r0, #0]
 8003432:	f7ff fcd7 	bl	8002de4 <TIM_OC1_SetConfig>
      break;
 8003436:	e7f6      	b.n	8003426 <HAL_TIM_OC_ConfigChannel+0x32>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003438:	6800      	ldr	r0, [r0, #0]
 800343a:	f7ff ffa9 	bl	8003390 <TIM_OC2_SetConfig>
      break;
 800343e:	e7f2      	b.n	8003426 <HAL_TIM_OC_ConfigChannel+0x32>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003440:	6800      	ldr	r0, [r0, #0]
 8003442:	f7ff fcff 	bl	8002e44 <TIM_OC3_SetConfig>
      break;
 8003446:	e7ee      	b.n	8003426 <HAL_TIM_OC_ConfigChannel+0x32>
  __HAL_LOCK(htim);
 8003448:	2002      	movs	r0, #2
}
 800344a:	4770      	bx	lr

0800344c <HAL_TIM_PWM_ConfigChannel>:
{
 800344c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800344e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003452:	2b01      	cmp	r3, #1
 8003454:	d057      	beq.n	8003506 <HAL_TIM_PWM_ConfigChannel+0xba>
 8003456:	2301      	movs	r3, #1
 8003458:	4604      	mov	r4, r0
 800345a:	460d      	mov	r5, r1
 800345c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003460:	2a0c      	cmp	r2, #12
 8003462:	d808      	bhi.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003464:	e8df f002 	tbb	[pc, r2]
 8003468:	0707071e 	.word	0x0707071e
 800346c:	0707072e 	.word	0x0707072e
 8003470:	0707073f 	.word	0x0707073f
 8003474:	0c          	.byte	0x0c
 8003475:	00          	.byte	0x00
 8003476:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003478:	2300      	movs	r3, #0
 800347a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800347e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003480:	6800      	ldr	r0, [r0, #0]
 8003482:	f7ff fd11 	bl	8002ea8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003486:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003488:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800348a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800348e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003490:	69c3      	ldr	r3, [r0, #28]
 8003492:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003496:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003498:	69c3      	ldr	r3, [r0, #28]
 800349a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800349e:	61c3      	str	r3, [r0, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80034a0:	2000      	movs	r0, #0
 80034a2:	e7e9      	b.n	8003478 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a4:	6800      	ldr	r0, [r0, #0]
 80034a6:	f7ff fc9d 	bl	8002de4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034aa:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034ac:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034ae:	f043 0308 	orr.w	r3, r3, #8
 80034b2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034b4:	6983      	ldr	r3, [r0, #24]
 80034b6:	f023 0304 	bic.w	r3, r3, #4
 80034ba:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034bc:	6983      	ldr	r3, [r0, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	6183      	str	r3, [r0, #24]
      break;
 80034c2:	e7ed      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034c4:	6800      	ldr	r0, [r0, #0]
 80034c6:	f7ff ff63 	bl	8003390 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034ca:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034cc:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034d2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034d4:	6983      	ldr	r3, [r0, #24]
 80034d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034da:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034dc:	6983      	ldr	r3, [r0, #24]
 80034de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80034e2:	6183      	str	r3, [r0, #24]
      break;
 80034e4:	e7dc      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034e6:	6800      	ldr	r0, [r0, #0]
 80034e8:	f7ff fcac 	bl	8002e44 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ec:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ee:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034f0:	f043 0308 	orr.w	r3, r3, #8
 80034f4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034f6:	69c3      	ldr	r3, [r0, #28]
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034fe:	69c3      	ldr	r3, [r0, #28]
 8003500:	4313      	orrs	r3, r2
 8003502:	61c3      	str	r3, [r0, #28]
      break;
 8003504:	e7cc      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8003506:	2002      	movs	r0, #2
}
 8003508:	bd38      	pop	{r3, r4, r5, pc}
 800350a:	bf00      	nop

0800350c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003510:	2a01      	cmp	r2, #1
 8003512:	d037      	beq.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003514:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003516:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	2002      	movs	r0, #2
{
 800351a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003520:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003522:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003524:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003526:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800352a:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800352c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352e:	4816      	ldr	r0, [pc, #88]	@ (8003588 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8003530:	4282      	cmp	r2, r0
 8003532:	d01a      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003534:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003538:	d017      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800353a:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800353e:	4282      	cmp	r2, r0
 8003540:	d013      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003542:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003546:	4282      	cmp	r2, r0
 8003548:	d00f      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800354a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800354e:	4282      	cmp	r2, r0
 8003550:	d00b      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003552:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8003556:	4282      	cmp	r2, r0
 8003558:	d007      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800355a:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 800355e:	4282      	cmp	r2, r0
 8003560:	d003      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003562:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003566:	4282      	cmp	r2, r0
 8003568:	d104      	bne.n	8003574 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800356a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800356c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003570:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003572:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003574:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800357c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003580:	bc30      	pop	{r4, r5}
 8003582:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003584:	2002      	movs	r0, #2
}
 8003586:	4770      	bx	lr
 8003588:	40010000 	.word	0x40010000

0800358c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800358c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d023      	beq.n	80035dc <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8003594:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003596:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800359a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800359e:	4602      	mov	r2, r0
 80035a0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035a2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035a4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035aa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035b0:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035b2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035b8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035ba:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035bc:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035c8:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 80035ca:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035cc:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 80035ce:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80035d0:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 80035d4:	4608      	mov	r0, r1
}
 80035d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035da:	4770      	bx	lr
  __HAL_LOCK(htim);
 80035dc:	2002      	movs	r0, #2
}
 80035de:	4770      	bx	lr

080035e0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop

080035e4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <memset>:
 80035e8:	4402      	add	r2, r0
 80035ea:	4603      	mov	r3, r0
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d100      	bne.n	80035f2 <memset+0xa>
 80035f0:	4770      	bx	lr
 80035f2:	f803 1b01 	strb.w	r1, [r3], #1
 80035f6:	e7f9      	b.n	80035ec <memset+0x4>

080035f8 <__errno>:
 80035f8:	4b01      	ldr	r3, [pc, #4]	@ (8003600 <__errno+0x8>)
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000024 	.word	0x20000024

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	4d0d      	ldr	r5, [pc, #52]	@ (800363c <__libc_init_array+0x38>)
 8003608:	4c0d      	ldr	r4, [pc, #52]	@ (8003640 <__libc_init_array+0x3c>)
 800360a:	1b64      	subs	r4, r4, r5
 800360c:	10a4      	asrs	r4, r4, #2
 800360e:	2600      	movs	r6, #0
 8003610:	42a6      	cmp	r6, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	4d0b      	ldr	r5, [pc, #44]	@ (8003644 <__libc_init_array+0x40>)
 8003616:	4c0c      	ldr	r4, [pc, #48]	@ (8003648 <__libc_init_array+0x44>)
 8003618:	f000 f91e 	bl	8003858 <_init>
 800361c:	1b64      	subs	r4, r4, r5
 800361e:	10a4      	asrs	r4, r4, #2
 8003620:	2600      	movs	r6, #0
 8003622:	42a6      	cmp	r6, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	f855 3b04 	ldr.w	r3, [r5], #4
 800362c:	4798      	blx	r3
 800362e:	3601      	adds	r6, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	f855 3b04 	ldr.w	r3, [r5], #4
 8003636:	4798      	blx	r3
 8003638:	3601      	adds	r6, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	08003ed0 	.word	0x08003ed0
 8003640:	08003ed0 	.word	0x08003ed0
 8003644:	08003ed0 	.word	0x08003ed0
 8003648:	08003ed4 	.word	0x08003ed4

0800364c <sqrt>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	ed2d 8b02 	vpush	{d8}
 8003652:	ec55 4b10 	vmov	r4, r5, d0
 8003656:	f000 f825 	bl	80036a4 <__ieee754_sqrt>
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	4620      	mov	r0, r4
 8003660:	4629      	mov	r1, r5
 8003662:	eeb0 8a40 	vmov.f32	s16, s0
 8003666:	eef0 8a60 	vmov.f32	s17, s1
 800366a:	f7fd fa03 	bl	8000a74 <__aeabi_dcmpun>
 800366e:	b990      	cbnz	r0, 8003696 <sqrt+0x4a>
 8003670:	2200      	movs	r2, #0
 8003672:	2300      	movs	r3, #0
 8003674:	4620      	mov	r0, r4
 8003676:	4629      	mov	r1, r5
 8003678:	f7fd f9d4 	bl	8000a24 <__aeabi_dcmplt>
 800367c:	b158      	cbz	r0, 8003696 <sqrt+0x4a>
 800367e:	f7ff ffbb 	bl	80035f8 <__errno>
 8003682:	2321      	movs	r3, #33	@ 0x21
 8003684:	6003      	str	r3, [r0, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	2300      	movs	r3, #0
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	f7fd f881 	bl	8000794 <__aeabi_ddiv>
 8003692:	ec41 0b18 	vmov	d8, r0, r1
 8003696:	eeb0 0a48 	vmov.f32	s0, s16
 800369a:	eef0 0a68 	vmov.f32	s1, s17
 800369e:	ecbd 8b02 	vpop	{d8}
 80036a2:	bd38      	pop	{r3, r4, r5, pc}

080036a4 <__ieee754_sqrt>:
 80036a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a8:	4a68      	ldr	r2, [pc, #416]	@ (800384c <__ieee754_sqrt+0x1a8>)
 80036aa:	ec55 4b10 	vmov	r4, r5, d0
 80036ae:	43aa      	bics	r2, r5
 80036b0:	462b      	mov	r3, r5
 80036b2:	4621      	mov	r1, r4
 80036b4:	d110      	bne.n	80036d8 <__ieee754_sqrt+0x34>
 80036b6:	4622      	mov	r2, r4
 80036b8:	4620      	mov	r0, r4
 80036ba:	4629      	mov	r1, r5
 80036bc:	f7fc ff40 	bl	8000540 <__aeabi_dmul>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4620      	mov	r0, r4
 80036c6:	4629      	mov	r1, r5
 80036c8:	f7fc fd84 	bl	80001d4 <__adddf3>
 80036cc:	4604      	mov	r4, r0
 80036ce:	460d      	mov	r5, r1
 80036d0:	ec45 4b10 	vmov	d0, r4, r5
 80036d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d8:	2d00      	cmp	r5, #0
 80036da:	dc0e      	bgt.n	80036fa <__ieee754_sqrt+0x56>
 80036dc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80036e0:	4322      	orrs	r2, r4
 80036e2:	d0f5      	beq.n	80036d0 <__ieee754_sqrt+0x2c>
 80036e4:	b19d      	cbz	r5, 800370e <__ieee754_sqrt+0x6a>
 80036e6:	4622      	mov	r2, r4
 80036e8:	4620      	mov	r0, r4
 80036ea:	4629      	mov	r1, r5
 80036ec:	f7fc fd70 	bl	80001d0 <__aeabi_dsub>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	f7fd f84e 	bl	8000794 <__aeabi_ddiv>
 80036f8:	e7e8      	b.n	80036cc <__ieee754_sqrt+0x28>
 80036fa:	152a      	asrs	r2, r5, #20
 80036fc:	d115      	bne.n	800372a <__ieee754_sqrt+0x86>
 80036fe:	2000      	movs	r0, #0
 8003700:	e009      	b.n	8003716 <__ieee754_sqrt+0x72>
 8003702:	0acb      	lsrs	r3, r1, #11
 8003704:	3a15      	subs	r2, #21
 8003706:	0549      	lsls	r1, r1, #21
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0fa      	beq.n	8003702 <__ieee754_sqrt+0x5e>
 800370c:	e7f7      	b.n	80036fe <__ieee754_sqrt+0x5a>
 800370e:	462a      	mov	r2, r5
 8003710:	e7fa      	b.n	8003708 <__ieee754_sqrt+0x64>
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	3001      	adds	r0, #1
 8003716:	02dc      	lsls	r4, r3, #11
 8003718:	d5fb      	bpl.n	8003712 <__ieee754_sqrt+0x6e>
 800371a:	1e44      	subs	r4, r0, #1
 800371c:	1b12      	subs	r2, r2, r4
 800371e:	f1c0 0420 	rsb	r4, r0, #32
 8003722:	fa21 f404 	lsr.w	r4, r1, r4
 8003726:	4323      	orrs	r3, r4
 8003728:	4081      	lsls	r1, r0
 800372a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800372e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003736:	07d2      	lsls	r2, r2, #31
 8003738:	bf5c      	itt	pl
 800373a:	005b      	lslpl	r3, r3, #1
 800373c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8003740:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003744:	bf58      	it	pl
 8003746:	0049      	lslpl	r1, r1, #1
 8003748:	2600      	movs	r6, #0
 800374a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800374e:	106d      	asrs	r5, r5, #1
 8003750:	0049      	lsls	r1, r1, #1
 8003752:	2016      	movs	r0, #22
 8003754:	4632      	mov	r2, r6
 8003756:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800375a:	1917      	adds	r7, r2, r4
 800375c:	429f      	cmp	r7, r3
 800375e:	bfde      	ittt	le
 8003760:	193a      	addle	r2, r7, r4
 8003762:	1bdb      	suble	r3, r3, r7
 8003764:	1936      	addle	r6, r6, r4
 8003766:	0fcf      	lsrs	r7, r1, #31
 8003768:	3801      	subs	r0, #1
 800376a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800376e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003772:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003776:	d1f0      	bne.n	800375a <__ieee754_sqrt+0xb6>
 8003778:	4604      	mov	r4, r0
 800377a:	2720      	movs	r7, #32
 800377c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8003780:	429a      	cmp	r2, r3
 8003782:	eb00 0e0c 	add.w	lr, r0, ip
 8003786:	db02      	blt.n	800378e <__ieee754_sqrt+0xea>
 8003788:	d113      	bne.n	80037b2 <__ieee754_sqrt+0x10e>
 800378a:	458e      	cmp	lr, r1
 800378c:	d811      	bhi.n	80037b2 <__ieee754_sqrt+0x10e>
 800378e:	f1be 0f00 	cmp.w	lr, #0
 8003792:	eb0e 000c 	add.w	r0, lr, ip
 8003796:	da42      	bge.n	800381e <__ieee754_sqrt+0x17a>
 8003798:	2800      	cmp	r0, #0
 800379a:	db40      	blt.n	800381e <__ieee754_sqrt+0x17a>
 800379c:	f102 0801 	add.w	r8, r2, #1
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	458e      	cmp	lr, r1
 80037a4:	bf88      	it	hi
 80037a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80037aa:	eba1 010e 	sub.w	r1, r1, lr
 80037ae:	4464      	add	r4, ip
 80037b0:	4642      	mov	r2, r8
 80037b2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80037b6:	3f01      	subs	r7, #1
 80037b8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80037bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80037c0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80037c4:	d1dc      	bne.n	8003780 <__ieee754_sqrt+0xdc>
 80037c6:	4319      	orrs	r1, r3
 80037c8:	d01b      	beq.n	8003802 <__ieee754_sqrt+0x15e>
 80037ca:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8003850 <__ieee754_sqrt+0x1ac>
 80037ce:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8003854 <__ieee754_sqrt+0x1b0>
 80037d2:	e9da 0100 	ldrd	r0, r1, [sl]
 80037d6:	e9db 2300 	ldrd	r2, r3, [fp]
 80037da:	f7fc fcf9 	bl	80001d0 <__aeabi_dsub>
 80037de:	e9da 8900 	ldrd	r8, r9, [sl]
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4640      	mov	r0, r8
 80037e8:	4649      	mov	r1, r9
 80037ea:	f7fd f925 	bl	8000a38 <__aeabi_dcmple>
 80037ee:	b140      	cbz	r0, 8003802 <__ieee754_sqrt+0x15e>
 80037f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80037f4:	e9da 0100 	ldrd	r0, r1, [sl]
 80037f8:	e9db 2300 	ldrd	r2, r3, [fp]
 80037fc:	d111      	bne.n	8003822 <__ieee754_sqrt+0x17e>
 80037fe:	3601      	adds	r6, #1
 8003800:	463c      	mov	r4, r7
 8003802:	1072      	asrs	r2, r6, #1
 8003804:	0863      	lsrs	r3, r4, #1
 8003806:	07f1      	lsls	r1, r6, #31
 8003808:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800380c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8003810:	bf48      	it	mi
 8003812:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8003816:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800381a:	4618      	mov	r0, r3
 800381c:	e756      	b.n	80036cc <__ieee754_sqrt+0x28>
 800381e:	4690      	mov	r8, r2
 8003820:	e7be      	b.n	80037a0 <__ieee754_sqrt+0xfc>
 8003822:	f7fc fcd7 	bl	80001d4 <__adddf3>
 8003826:	e9da 8900 	ldrd	r8, r9, [sl]
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4640      	mov	r0, r8
 8003830:	4649      	mov	r1, r9
 8003832:	f7fd f8f7 	bl	8000a24 <__aeabi_dcmplt>
 8003836:	b120      	cbz	r0, 8003842 <__ieee754_sqrt+0x19e>
 8003838:	1ca0      	adds	r0, r4, #2
 800383a:	bf08      	it	eq
 800383c:	3601      	addeq	r6, #1
 800383e:	3402      	adds	r4, #2
 8003840:	e7df      	b.n	8003802 <__ieee754_sqrt+0x15e>
 8003842:	1c63      	adds	r3, r4, #1
 8003844:	f023 0401 	bic.w	r4, r3, #1
 8003848:	e7db      	b.n	8003802 <__ieee754_sqrt+0x15e>
 800384a:	bf00      	nop
 800384c:	7ff00000 	.word	0x7ff00000
 8003850:	20000080 	.word	0x20000080
 8003854:	20000078 	.word	0x20000078

08003858 <_init>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr

08003864 <_fini>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr
